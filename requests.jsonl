{"messages": [{"role": "system", "content": "You are a workflow analysis agent that evaluates automation requests.\nYour goal is to determine if a workflow request contains enough core information to proceed with implementation.\n\nKey Guidelines:\n- Focus only on blocking/critical missing information\n- Make reasonable assumptions about company context when possible\n- Only flag missing information if it would completely prevent the workflow from being implemented\n- Accept general company references without requiring specific domain names\n- For document classifications, accept natural language descriptions\n- Consider the request complete if the core workflow logic is clear, even if some details could be configured later\n\nWhen evaluating completeness, ask:\n1. Is the basic workflow logic clear and actionable?\n2. Are the essential triggers and actions defined?\n3. Would an implementer understand the core goal?\n\nErr on the side of accepting requests as complete if the fundamental workflow is understandable.\n"}, {"role": "user", "content": "Need help organizing my field research from the National Archives in Mexico City. Right now my Google Drive is a mess - hundreds of photos of documents, transcriptions in Docs, and scattered notes. Would love a workflow that could monitor my Drive folder, grab new document photos as I add them, run them through text recognition, and dump the searchable text into a master Doc. Bonus if it could use Canva to make simple visualizations of word frequencies and patterns I'm tracking."}], "model": "deepseek-ai/DeepSeek-R1-Distill-Qwen-32B", "n": 1, "parallel_tool_calls": true, "stream": false, "tool_choice": "required", "tools": [{"type": "function", "function": {"name": "final_result", "description": "The final response which ends this conversation", "parameters": {"properties": {"is_complete": {"description": "Whether request has all needed information", "title": "Is Complete", "type": "boolean"}, "missing_info": {"anyOf": [{"items": {"type": "string"}, "type": "array"}, {"type": "null"}], "default": null, "description": "List of missing information pieces if incomplete", "title": "Missing Info"}, "clarifying_questions": {"anyOf": [{"items": {"type": "string"}, "type": "array"}, {"type": "null"}], "default": null, "description": "Questions to ask user if more information needed", "title": "Clarifying Questions"}, "parsed_request": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "description": "Clean version of request once complete", "title": "Parsed Request"}}, "required": ["is_complete"], "title": "RequestCompleteness", "type": "object"}}}]}
{"messages": [{"role": "system", "content": "You are a workflow analysis agent that evaluates automation requests.\nYour goal is to determine if a workflow request contains enough core information to proceed with implementation.\n\nKey Guidelines:\n- Focus only on blocking/critical missing information\n- Make reasonable assumptions about company context when possible\n- Only flag missing information if it would completely prevent the workflow from being implemented\n- Accept general company references without requiring specific domain names\n- For document classifications, accept natural language descriptions\n- Consider the request complete if the core workflow logic is clear, even if some details could be configured later\n\nWhen evaluating completeness, ask:\n1. Is the basic workflow logic clear and actionable?\n2. Are the essential triggers and actions defined?\n3. Would an implementer understand the core goal?\n\nErr on the side of accepting requests as complete if the fundamental workflow is understandable.\n"}, {"role": "user", "content": "can you help me handle speaker submissions? when someone books a presentation slot in calendly, send them a gmail with a link to the mathematical tool where they can properly format their equations and theorems. way better than getting emailed random latex files or scanned handwritten notes."}], "model": "deepseek-ai/DeepSeek-R1-Distill-Qwen-32B", "n": 1, "parallel_tool_calls": true, "stream": false, "tool_choice": "required", "tools": [{"type": "function", "function": {"name": "final_result", "description": "The final response which ends this conversation", "parameters": {"properties": {"is_complete": {"description": "Whether request has all needed information", "title": "Is Complete", "type": "boolean"}, "missing_info": {"anyOf": [{"items": {"type": "string"}, "type": "array"}, {"type": "null"}], "default": null, "description": "List of missing information pieces if incomplete", "title": "Missing Info"}, "clarifying_questions": {"anyOf": [{"items": {"type": "string"}, "type": "array"}, {"type": "null"}], "default": null, "description": "Questions to ask user if more information needed", "title": "Clarifying Questions"}, "parsed_request": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "description": "Clean version of request once complete", "title": "Parsed Request"}}, "required": ["is_complete"], "title": "RequestCompleteness", "type": "object"}}}]}
{"messages": [{"role": "system", "content": "You are a workflow analysis agent that evaluates automation requests.\nYour goal is to determine if a workflow request contains enough core information to proceed with implementation.\n\nKey Guidelines:\n- Focus only on blocking/critical missing information\n- Make reasonable assumptions about company context when possible\n- Only flag missing information if it would completely prevent the workflow from being implemented\n- Accept general company references without requiring specific domain names\n- For document classifications, accept natural language descriptions\n- Consider the request complete if the core workflow logic is clear, even if some details could be configured later\n\nWhen evaluating completeness, ask:\n1. Is the basic workflow logic clear and actionable?\n2. Are the essential triggers and actions defined?\n3. Would an implementer understand the core goal?\n\nErr on the side of accepting requests as complete if the fundamental workflow is understandable.\n"}, {"role": "user", "content": "can you help me handle speaker submissions? when someone books a presentation slot in calendly, send them a gmail with a link to the mathematical tool where they can properly format their equations and theorems. way better than getting emailed random latex files or scanned handwritten notes."}], "model": "deepseek-ai/DeepSeek-R1-Distill-Qwen-32B", "n": 1, "parallel_tool_calls": true, "stream": false, "tool_choice": "required", "tools": [{"type": "function", "function": {"name": "final_result", "description": "The final response which ends this conversation", "parameters": {"properties": {"is_complete": {"description": "Whether request has all needed information", "title": "Is Complete", "type": "boolean"}, "missing_info": {"anyOf": [{"items": {"type": "string"}, "type": "array"}, {"type": "null"}], "default": null, "description": "List of missing information pieces if incomplete", "title": "Missing Info"}, "clarifying_questions": {"anyOf": [{"items": {"type": "string"}, "type": "array"}, {"type": "null"}], "default": null, "description": "Questions to ask user if more information needed", "title": "Clarifying Questions"}, "parsed_request": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "description": "Clean version of request once complete", "title": "Parsed Request"}}, "required": ["is_complete"], "title": "RequestCompleteness", "type": "object"}}}]}
{"messages": [{"role": "system", "content": "You are a workflow analysis agent that evaluates automation requests.\nYour goal is to determine if a workflow request contains enough core information to proceed with implementation.\n\nKey Guidelines:\n- Focus only on blocking/critical missing information\n- Make reasonable assumptions about company context when possible\n- Only flag missing information if it would completely prevent the workflow from being implemented\n- Accept general company references without requiring specific domain names\n- For document classifications, accept natural language descriptions\n- Consider the request complete if the core workflow logic is clear, even if some details could be configured later\n\nWhen evaluating completeness, ask:\n1. Is the basic workflow logic clear and actionable?\n2. Are the essential triggers and actions defined?\n3. Would an implementer understand the core goal?\n\nErr on the side of accepting requests as complete if the fundamental workflow is understandable.\n"}, {"role": "user", "content": "can you help me handle speaker submissions? when someone books a presentation slot in calendly, send them a gmail with a link to the mathematical tool where they can properly format their equations and theorems. way better than getting emailed random latex files or scanned handwritten notes."}], "model": "deepseek-ai/DeepSeek-R1-Distill-Qwen-32B", "n": 1, "parallel_tool_calls": true, "stream": false, "tool_choice": "required", "tools": [{"type": "function", "function": {"name": "final_result", "description": "The final response which ends this conversation", "parameters": {"properties": {"is_complete": {"description": "Whether request has all needed information", "title": "Is Complete", "type": "boolean"}, "missing_info": {"anyOf": [{"items": {"type": "string"}, "type": "array"}, {"type": "null"}], "default": null, "description": "List of missing information pieces if incomplete", "title": "Missing Info"}, "clarifying_questions": {"anyOf": [{"items": {"type": "string"}, "type": "array"}, {"type": "null"}], "default": null, "description": "Questions to ask user if more information needed", "title": "Clarifying Questions"}, "parsed_request": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "description": "Clean version of request once complete", "title": "Parsed Request"}}, "required": ["is_complete"], "title": "RequestCompleteness", "type": "object"}}}]}
{"messages": [{"role": "system", "content": "You are a workflow analysis agent that evaluates automation requests.\nYour goal is to determine if a workflow request contains enough core information to proceed with implementation.\n\nKey Guidelines:\n- Focus only on blocking/critical missing information\n- Make reasonable assumptions about company context when possible\n- Only flag missing information if it would completely prevent the workflow from being implemented\n- Accept general company references without requiring specific domain names\n- For document classifications, accept natural language descriptions\n- Consider the request complete if the core workflow logic is clear, even if some details could be configured later\n\nWhen evaluating completeness, ask:\n1. Is the basic workflow logic clear and actionable?\n2. Are the essential triggers and actions defined?\n3. Would an implementer understand the core goal?\n\nErr on the side of accepting requests as complete if the fundamental workflow is understandable.\n"}, {"role": "user", "content": "Got way too many demos piling up in my Gmail - artists sending mp3s and wav files all day long. Can you grab those attachments when they come in, dump them in a folder in Drive, and use ElevenLabs to record me a quick summary message I can listen to while I'm running around? Like \"3 new demos came in today from these artists...\" Just need to stay on top of what's coming in without having to sit and open every email."}], "model": "deepseek-ai/DeepSeek-R1-Distill-Qwen-32B", "n": 1, "parallel_tool_calls": true, "stream": false, "tool_choice": "required", "tools": [{"type": "function", "function": {"name": "final_result", "description": "The final response which ends this conversation", "parameters": {"properties": {"is_complete": {"description": "Whether request has all needed information", "title": "Is Complete", "type": "boolean"}, "missing_info": {"anyOf": [{"items": {"type": "string"}, "type": "array"}, {"type": "null"}], "default": null, "description": "List of missing information pieces if incomplete", "title": "Missing Info"}, "clarifying_questions": {"anyOf": [{"items": {"type": "string"}, "type": "array"}, {"type": "null"}], "default": null, "description": "Questions to ask user if more information needed", "title": "Clarifying Questions"}, "parsed_request": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "description": "Clean version of request once complete", "title": "Parsed Request"}}, "required": ["is_complete"], "title": "RequestCompleteness", "type": "object"}}}]}
{"messages": [{"role": "system", "content": "You are a workflow analysis agent that evaluates automation requests.\nYour goal is to determine if a workflow request contains enough core information to proceed with implementation.\n\nKey Guidelines:\n- Focus only on blocking/critical missing information\n- Make reasonable assumptions about company context when possible\n- Only flag missing information if it would completely prevent the workflow from being implemented\n- Accept general company references without requiring specific domain names\n- For document classifications, accept natural language descriptions\n- Consider the request complete if the core workflow logic is clear, even if some details could be configured later\n\nWhen evaluating completeness, ask:\n1. Is the basic workflow logic clear and actionable?\n2. Are the essential triggers and actions defined?\n3. Would an implementer understand the core goal?\n\nErr on the side of accepting requests as complete if the fundamental workflow is understandable.\n"}, {"role": "user", "content": "Got way too many demos piling up in my Gmail - artists sending mp3s and wav files all day long. Can you grab those attachments when they come in, dump them in a folder in Drive, and use ElevenLabs to record me a quick summary message I can listen to while I'm running around? Like \"3 new demos came in today from these artists...\" Just need to stay on top of what's coming in without having to sit and open every email."}], "model": "deepseek-ai/DeepSeek-R1-Distill-Qwen-32B", "n": 1, "parallel_tool_calls": true, "stream": false, "tool_choice": "required", "tools": [{"type": "function", "function": {"name": "final_result", "description": "The final response which ends this conversation", "parameters": {"properties": {"is_complete": {"description": "Whether request has all needed information", "title": "Is Complete", "type": "boolean"}, "missing_info": {"anyOf": [{"items": {"type": "string"}, "type": "array"}, {"type": "null"}], "default": null, "description": "List of missing information pieces if incomplete", "title": "Missing Info"}, "clarifying_questions": {"anyOf": [{"items": {"type": "string"}, "type": "array"}, {"type": "null"}], "default": null, "description": "Questions to ask user if more information needed", "title": "Clarifying Questions"}, "parsed_request": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "description": "Clean version of request once complete", "title": "Parsed Request"}}, "required": ["is_complete"], "title": "RequestCompleteness", "type": "object"}}}]}
{"messages": [{"role": "system", "content": "You are a workflow analysis agent that evaluates automation requests.\nYour goal is to determine if a workflow request contains enough core information to proceed with implementation.\n\nKey Guidelines:\n- Focus only on blocking/critical missing information\n- Make reasonable assumptions about company context when possible\n- Only flag missing information if it would completely prevent the workflow from being implemented\n- Accept general company references without requiring specific domain names\n- For document classifications, accept natural language descriptions\n- Consider the request complete if the core workflow logic is clear, even if some details could be configured later\n\nWhen evaluating completeness, ask:\n1. Is the basic workflow logic clear and actionable?\n2. Are the essential triggers and actions defined?\n3. Would an implementer understand the core goal?\n\nErr on the side of accepting requests as complete if the fundamental workflow is understandable.\n"}, {"role": "user", "content": "Got way too many demos piling up in my Gmail - artists sending mp3s and wav files all day long. Can you grab those attachments when they come in, dump them in a folder in Drive, and use ElevenLabs to record me a quick summary message I can listen to while I'm running around? Like \"3 new demos came in today from these artists...\" Just need to stay on top of what's coming in without having to sit and open every email."}], "model": "deepseek-ai/DeepSeek-R1-Distill-Qwen-32B", "n": 1, "parallel_tool_calls": true, "stream": false, "tool_choice": "required", "tools": [{"type": "function", "function": {"name": "final_result", "description": "The final response which ends this conversation", "parameters": {"properties": {"is_complete": {"description": "Whether request has all needed information", "title": "Is Complete", "type": "boolean"}, "missing_info": {"anyOf": [{"items": {"type": "string"}, "type": "array"}, {"type": "null"}], "default": null, "description": "List of missing information pieces if incomplete", "title": "Missing Info"}, "clarifying_questions": {"anyOf": [{"items": {"type": "string"}, "type": "array"}, {"type": "null"}], "default": null, "description": "Questions to ask user if more information needed", "title": "Clarifying Questions"}, "parsed_request": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "description": "Clean version of request once complete", "title": "Parsed Request"}}, "required": ["is_complete"], "title": "RequestCompleteness", "type": "object"}}}]}
{"messages": [{"role": "system", "content": "You are a workflow analysis agent that evaluates automation requests.\nYour goal is to determine if a workflow request contains enough core information to proceed with implementation.\n\nKey Guidelines:\n- Focus only on blocking/critical missing information\n- Make reasonable assumptions about company context when possible\n- Only flag missing information if it would completely prevent the workflow from being implemented\n- Accept general company references without requiring specific domain names\n- For document classifications, accept natural language descriptions\n- Consider the request complete if the core workflow logic is clear, even if some details could be configured later\n\nWhen evaluating completeness, ask:\n1. Is the basic workflow logic clear and actionable?\n2. Are the essential triggers and actions defined?\n3. Would an implementer understand the core goal?\n\nErr on the side of accepting requests as complete if the fundamental workflow is understandable.\n"}, {"role": "user", "content": "Need help tracking urgent customer issues. When someone sends an angry email to our support inbox in Outlook, can it ping me in Teams and create a folder in SharePoint to store all the correspondence? Just trying to make sure nothing slips through and all the documentation is in one place."}], "model": "deepseek-ai/DeepSeek-R1-Distill-Qwen-32B", "n": 1, "parallel_tool_calls": true, "stream": false, "tool_choice": "required", "tools": [{"type": "function", "function": {"name": "final_result", "description": "The final response which ends this conversation", "parameters": {"properties": {"is_complete": {"description": "Whether request has all needed information", "title": "Is Complete", "type": "boolean"}, "missing_info": {"anyOf": [{"items": {"type": "string"}, "type": "array"}, {"type": "null"}], "default": null, "description": "List of missing information pieces if incomplete", "title": "Missing Info"}, "clarifying_questions": {"anyOf": [{"items": {"type": "string"}, "type": "array"}, {"type": "null"}], "default": null, "description": "Questions to ask user if more information needed", "title": "Clarifying Questions"}, "parsed_request": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "description": "Clean version of request once complete", "title": "Parsed Request"}}, "required": ["is_complete"], "title": "RequestCompleteness", "type": "object"}}}]}
{"messages": [{"role": "system", "content": "You are a workflow analysis agent that evaluates automation requests.\nYour goal is to determine if a workflow request contains enough core information to proceed with implementation.\n\nKey Guidelines:\n- Focus only on blocking/critical missing information\n- Make reasonable assumptions about company context when possible\n- Only flag missing information if it would completely prevent the workflow from being implemented\n- Accept general company references without requiring specific domain names\n- For document classifications, accept natural language descriptions\n- Consider the request complete if the core workflow logic is clear, even if some details could be configured later\n\nWhen evaluating completeness, ask:\n1. Is the basic workflow logic clear and actionable?\n2. Are the essential triggers and actions defined?\n3. Would an implementer understand the core goal?\n\nErr on the side of accepting requests as complete if the fundamental workflow is understandable.\n"}, {"role": "user", "content": "My team tracks privacy concerns across different tech companies, but our findings are scattered across Teams chats, Notion pages, and shared docs. Need something that can pull our key discussions and documented issues into a single sheet, organized by company and date. Trying to spot patterns in what we're seeing without having to dig through 20 different places."}], "model": "deepseek-ai/DeepSeek-R1-Distill-Qwen-32B", "n": 1, "parallel_tool_calls": true, "stream": false, "tool_choice": "required", "tools": [{"type": "function", "function": {"name": "final_result", "description": "The final response which ends this conversation", "parameters": {"properties": {"is_complete": {"description": "Whether request has all needed information", "title": "Is Complete", "type": "boolean"}, "missing_info": {"anyOf": [{"items": {"type": "string"}, "type": "array"}, {"type": "null"}], "default": null, "description": "List of missing information pieces if incomplete", "title": "Missing Info"}, "clarifying_questions": {"anyOf": [{"items": {"type": "string"}, "type": "array"}, {"type": "null"}], "default": null, "description": "Questions to ask user if more information needed", "title": "Clarifying Questions"}, "parsed_request": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "description": "Clean version of request once complete", "title": "Parsed Request"}}, "required": ["is_complete"], "title": "RequestCompleteness", "type": "object"}}}]}
{"messages": [{"role": "system", "content": "You are a workflow analysis agent that evaluates automation requests.\nYour goal is to determine if a workflow request contains enough core information to proceed with implementation.\n\nKey Guidelines:\n- Focus only on blocking/critical missing information\n- Make reasonable assumptions about company context when possible\n- Only flag missing information if it would completely prevent the workflow from being implemented\n- Accept general company references without requiring specific domain names\n- For document classifications, accept natural language descriptions\n- Consider the request complete if the core workflow logic is clear, even if some details could be configured later\n\nWhen evaluating completeness, ask:\n1. Is the basic workflow logic clear and actionable?\n2. Are the essential triggers and actions defined?\n3. Would an implementer understand the core goal?\n\nErr on the side of accepting requests as complete if the fundamental workflow is understandable.\n"}, {"role": "user", "content": "When I finish a press release in Canva, can it trigger DocuSign to get client approval, then ping me in Slack once it's signed? Just need to stop manually sending files around for signatures."}], "model": "deepseek-ai/DeepSeek-R1-Distill-Qwen-32B", "n": 1, "parallel_tool_calls": true, "stream": false, "tool_choice": "required", "tools": [{"type": "function", "function": {"name": "final_result", "description": "The final response which ends this conversation", "parameters": {"properties": {"is_complete": {"description": "Whether request has all needed information", "title": "Is Complete", "type": "boolean"}, "missing_info": {"anyOf": [{"items": {"type": "string"}, "type": "array"}, {"type": "null"}], "default": null, "description": "List of missing information pieces if incomplete", "title": "Missing Info"}, "clarifying_questions": {"anyOf": [{"items": {"type": "string"}, "type": "array"}, {"type": "null"}], "default": null, "description": "Questions to ask user if more information needed", "title": "Clarifying Questions"}, "parsed_request": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "description": "Clean version of request once complete", "title": "Parsed Request"}}, "required": ["is_complete"], "title": "RequestCompleteness", "type": "object"}}}]}
{"messages": [{"role": "system", "content": "You are a workflow analysis agent that evaluates automation requests.\nYour goal is to determine if a workflow request contains enough core information to proceed with implementation.\n\nKey Guidelines:\n- Focus only on blocking/critical missing information\n- Make reasonable assumptions about company context when possible\n- Only flag missing information if it would completely prevent the workflow from being implemented\n- Accept general company references without requiring specific domain names\n- For document classifications, accept natural language descriptions\n- Consider the request complete if the core workflow logic is clear, even if some details could be configured later\n\nWhen evaluating completeness, ask:\n1. Is the basic workflow logic clear and actionable?\n2. Are the essential triggers and actions defined?\n3. Would an implementer understand the core goal?\n\nErr on the side of accepting requests as complete if the fundamental workflow is understandable.\n"}, {"role": "user", "content": "Our campaign tracking sheet in Google Sheets needs automation. When the team updates daily spend and results, check if any campaign's CPA goes above target. If it does, send me a Slack alert. Same sheet we're already using, just need the warning system."}], "model": "deepseek-ai/DeepSeek-R1-Distill-Qwen-32B", "n": 1, "parallel_tool_calls": true, "stream": false, "tool_choice": "required", "tools": [{"type": "function", "function": {"name": "final_result", "description": "The final response which ends this conversation", "parameters": {"properties": {"is_complete": {"description": "Whether request has all needed information", "title": "Is Complete", "type": "boolean"}, "missing_info": {"anyOf": [{"items": {"type": "string"}, "type": "array"}, {"type": "null"}], "default": null, "description": "List of missing information pieces if incomplete", "title": "Missing Info"}, "clarifying_questions": {"anyOf": [{"items": {"type": "string"}, "type": "array"}, {"type": "null"}], "default": null, "description": "Questions to ask user if more information needed", "title": "Clarifying Questions"}, "parsed_request": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "description": "Clean version of request once complete", "title": "Parsed Request"}}, "required": ["is_complete"], "title": "RequestCompleteness", "type": "object"}}}]}
{"messages": [{"role": "system", "content": "You are a workflow analysis agent.\nYour task is to identify which apps are needed for this workflow.\nReturn ONLY app IDs from this available set:\n\nAvailable app IDs:\n['affinity', 'agencyzoom', 'ahrefs', 'airtable', 'anthropic', 'apollo', 'asana', 'attio', 'bamboohr', 'bitbucket', 'blackboard', 'brevo', 'browser_tool', 'browserbase_tool', 'cal', 'calendly', 'canva', 'canvas', 'clickup', 'code_analysis_tool', 'code_format_tool', 'codeinterpreter', 'composio', 'discord', 'discordbot', 'docusign', 'dropbox', 'dynamics365', 'elevenlabs', 'embed_tool', 'entelligence', 'exa', 'figma', 'filetool', 'firecrawl', 'freshdesk', 'git', 'github', 'gmail', 'google_maps', 'googlebigquery', 'googlecalendar', 'googledocs', 'googledrive', 'googlemeet', 'googlephotos', 'googlesheets', 'googletasks', 'greptile', 'hackernews', 'heygen', 'history_fetcher', 'hubspot', 'image_analyser', 'induced_ai', 'intercom', 'jira', 'junglescout', 'klaviyo', 'linear', 'linkedin', 'listennotes', 'lmnt', 'mailchimp', 'mathematical', 'mem0', 'microsoft_clarity', 'microsoft_teams', 'monday', 'multionai', 'neon', 'notion', 'one_drive', 'outlook', 'pagerduty', 'peopledatalabs', 'perplexityai', 'pipedrive', 'posthog', 'ragtool', 'reddit', 'retellai', 'rocketlane', 'salesforce', 'sendgrid', 'sentry', 'serpapi', 'share_point', 'shelltool', 'shopify', 'slack', 'slackbot', 'snowflake', 'spidertool', 'spotify', 'sqltool', 'stripe', 'supabase', 'tavily', 'trello', 'twitter', 'twitter_media', 'weathermap', 'webtool', 'workspace_tool', 'wrike', 'yousearch', 'youtube', 'zendesk', 'zenrows', 'zeptool', 'zoho', 'zoom', 'zoominfo']\n\nIdentify required apps from the request."}, {"role": "user", "content": "Automate checking CPA against target in Google Sheets and send Slack alert if exceeded."}], "model": "deepseek-ai/DeepSeek-R1-Distill-Qwen-32B", "n": 1, "parallel_tool_calls": true, "stream": false, "tool_choice": "required", "tools": [{"type": "function", "function": {"name": "final_result", "description": "The final response which ends this conversation", "parameters": {"properties": {"app_ids": {"description": "List of app IDs required for this workflow", "items": {"type": "string"}, "title": "App Ids", "type": "array"}}, "required": ["app_ids"], "title": "AppIdsResult", "type": "object"}}}]}
{"messages": [{"role": "system", "content": "You are a workflow analysis agent that evaluates automation requests.\nYour task is to analyze what actions from ONE SPECIFIC APP (googlebigquery) are needed for this workflow.\n\nFocus ONLY on analyzing which actions from this app's registry are required. \nDo NOT consider actions needed from other apps - that will be handled separately.\n\nAvailable Actions for googlebigquery:\n[ActionModel(name='GOOGLEBIGQUERY_QUERY', display_name='Query', parameters=ActionParametersModel(properties={'query': {'description': 'Query to run on BigQuery.', 'title': 'Query', 'type': 'string'}}, title='QueryRequest', type='object', required=['query']), response=ActionResponseModel(properties={'rows': {'description': 'List of rows returned from the queries.', 'items': {}, 'title': 'Rows', 'type': 'array'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='QueryResponse', type='object', required=['rows', 'successful']), appName='googlebigquery', appId='googlebigquery', tags=[], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/googl-bigquery.svg', description=\"Query Tool Will Run A Sql Query In Big Query.\\n Note:     Make Sure The Query Being Input In A Single Line Format. For Example,     Select * From Sample Dataset.Sample Table Where Column Name = 'Value'\")]\n\nFor the following request, determine:\n1. Which specific actions from googlebigquery's registry are needed (if any)\n2. What each action's purpose would be in the workflow\n3. If this app's actions alone aren't sufficient for its part in the workflow, explain why\n\nRemember: Focus only on googlebigquery's capabilities - ignore requirements for other apps."}, {"role": "user", "content": "Automate checking CPA against target in Google Sheets and send Slack alert if exceeded."}], "model": "deepseek-ai/DeepSeek-R1-Distill-Qwen-32B", "n": 1, "parallel_tool_calls": true, "stream": false, "tool_choice": "required", "tools": [{"type": "function", "function": {"name": "final_result", "description": "The final response which ends this conversation", "parameters": {"$defs": {"ActionRequirement": {"properties": {"app_id": {"description": "ID of the required application", "title": "App Id", "type": "string"}, "action_name": {"description": "Name of the required action", "title": "Action Name", "type": "string"}, "purpose": {"description": "Why this action is needed in the workflow", "title": "Purpose", "type": "string"}}, "required": ["app_id", "action_name", "purpose"], "title": "ActionRequirement", "type": "object"}}, "properties": {"feasible": {"description": "Whether request can be implemented with available actions", "title": "Feasible", "type": "boolean"}, "required_actions": {"anyOf": [{"items": {"$ref": "#/$defs/ActionRequirement"}, "type": "array"}, {"type": "null"}], "default": null, "description": "List of required actions if feasible", "title": "Required Actions"}, "infeasible_reason": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "description": "Detailed explanation if request is not feasible", "title": "Infeasible Reason"}}, "required": ["feasible"], "title": "ActionFeasibilityResult", "type": "object"}}}]}
{"messages": [{"role": "system", "content": "You are a workflow analysis agent that evaluates automation requests.\nYour task is to analyze what actions from ONE SPECIFIC APP (googlesheets) are needed for this workflow.\n\nFocus ONLY on analyzing which actions from this app's registry are required. \nDo NOT consider actions needed from other apps - that will be handled separately.\n\nAvailable Actions for googlesheets:\n[ActionModel(name='GOOGLESHEETS_BATCH_UPDATE', display_name='Batch Update Spreadsheet', parameters=ActionParametersModel(properties={'spreadsheet_id': {'description': 'The unique identifier of the Google Sheets spreadsheet to be updated', 'examples': ['1BxiMVs0XRA5nFMdKvBdBZjgmUUqptlbs74OgvE2upms'], 'title': 'Spreadsheet Id', 'type': 'string'}, 'sheet_name': {'description': 'The name of the specific sheet within the spreadsheet to update', 'examples': ['Sheet1'], 'title': 'Sheet Name', 'type': 'string'}, 'first_cell_location': {'default': None, 'description': \"The starting cell for the update range, specified in A1 notation (e.g., 'A1', 'B2'). The update will extend from this cell to the right and down, based on the provided values.\", 'examples': ['A1', 'D3'], 'title': 'First Cell Location', 'type': 'string'}, 'values': {'description': 'A 2D list representing the values to update. Each inner list corresponds to a row in the spreadsheet.', 'examples': [['Item', 'Cost', 'Stocked', 'Ship Date'], ['Wheel', '20.5', 'Yes', '2020-06-01'], ['Screw', '0.5', 'Yes', '2020-06-03'], ['Nut', '0.25', 'No', '2020-06-02']], 'items': {'items': {'type': 'string'}, 'type': 'array'}, 'title': 'Values', 'type': 'array'}, 'includeValuesInResponse': {'default': False, 'description': 'If set to True, the response will include the updated values from the spreadsheet', 'examples': [True, False], 'title': 'Includevaluesinresponse', 'type': 'boolean'}}, title='BatchUpdateRequest', type='object', required=['spreadsheet_id', 'sheet_name', 'values']), response=ActionResponseModel(properties={'spreadsheet': {'default': None, 'description': 'Contains the updated spreadsheet data if requested in the original request', 'title': 'Spreadsheet', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='BatchUpdateResponse', type='object', required=['successful']), appName='googlesheets', appId='googlesheets', tags=[], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/google-sheets.svg', description='Perform A Batch Update Operation On A Specified Google Sheets Spreadsheet.'), ActionModel(name='GOOGLESHEETS_CREATE_GOOGLE_SHEET1', display_name='Create Google Sheet', parameters=ActionParametersModel(properties={'title': {'description': 'Title of the Google Sheet. Please ensure the title is mentioned.', 'title': 'Title', 'type': 'string'}}, title='CreateGoogleSheetRequest', type='object', required=['title']), response=ActionResponseModel(properties={'response_data': {'description': 'The full response data from the API', 'title': 'Response Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='CreateGoogleSheetResponse', type='object', required=['response_data', 'successful']), appName='googlesheets', appId='googlesheets', tags=[], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/google-sheets.svg', description='Create A New Google Sheet.'), ActionModel(name='GOOGLESHEETS_SHEET_FROM_JSON', display_name='Sheet From Json', parameters=ActionParametersModel(properties={'title': {'description': 'Title of the Google Sheet. Please ensure the title is mentioned.', 'title': 'Title', 'type': 'string'}, 'sheet_name': {'description': 'Name of the sheet to be created. Please ensure the name is mentioned.', 'title': 'Sheet Name', 'type': 'string'}, 'sheet_json': {'description': 'A list of dictionaries where each dictionary has the same keys.', 'examples': [[{'company': 'Gol', 'cost(in usd)': '20000', 'year': '2015'}, {'company': 'Palio', 'cost(in usd)': '15000', 'year': '2010'}]], 'items': {'additionalProperties': {'type': 'string'}, 'type': 'object'}, 'title': 'Sheet Json', 'type': 'array'}}, title='SheetFromJsonRequest', type='object', required=['title', 'sheet_name', 'sheet_json']), response=ActionResponseModel(properties={'response_data': {'description': 'The full response data from the API', 'title': 'Response Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='SheetFromJsonResponse', type='object', required=['response_data', 'successful']), appName='googlesheets', appId='googlesheets', tags=[], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/google-sheets.svg', description='Create A New Google Sheet From A Json Object.\\n This Action Takes A Json Structure And Converts It Into A Google Sheet Where:   The First Row Contains The Keys As Headers   Subsequent Rows Contain The Corresponding Values   All Rows Must Have The Same Structure (Keys)\\n Args:     Title (Str): The Title Of The New Google Sheet     Sheet Name (Str): Name Of The Worksheet Within The Spreadsheet     Sheet Json (List[Dict]): List Of Dictionaries With Consistent Keys'), ActionModel(name='GOOGLESHEETS_CLEAR_VALUES', display_name='Clear Spreadsheet Values', parameters=ActionParametersModel(properties={'spreadsheet_id': {'description': 'The ID of the spreadsheet', 'title': 'Spreadsheet Id', 'type': 'string'}, 'range': {'description': 'The A1 notation range to clear in the spreadsheet', 'title': 'Range', 'type': 'string'}}, title='ClearValuesRequest', type='object', required=['spreadsheet_id', 'range']), response=ActionResponseModel(properties={'response_data': {'default': None, 'description': 'Response of the operation', 'title': 'Response Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='ClearValuesResponse', type='object', required=['successful']), appName='googlesheets', appId='googlesheets', tags=[], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/google-sheets.svg', description='Clear Values From A Specified Range In A Spreadsheet.'), ActionModel(name='GOOGLESHEETS_GET_SPREADSHEET_INFO', display_name='Get Spreadsheet Info', parameters=ActionParametersModel(properties={'spreadsheet_id': {'description': 'ID of the Google Sheet to retrieve', 'title': 'Spreadsheet Id', 'type': 'string'}}, title='GetSpreadsheetInfoRequest', type='object', required=['spreadsheet_id']), response=ActionResponseModel(properties={'response_data': {'description': 'The full response data from the API', 'title': 'Response Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='GetSpreadsheetInfoResponse', type='object', required=['response_data', 'successful']), appName='googlesheets', appId='googlesheets', tags=[], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/google-sheets.svg', description='Retrieve Information About An Existing Google Sheet.'), ActionModel(name='GOOGLESHEETS_LOOKUP_SPREADSHEET_ROW', display_name='Lookup Spreadsheet Row', parameters=ActionParametersModel(properties={'spreadsheet_id': {'description': 'The ID of the spreadsheet', 'examples': ['1BiexwqQYjfC_BXy6zDQYJqb6zxzRyP9'], 'title': 'Spreadsheet Id', 'type': 'string'}, 'range': {'default': None, 'description': 'The A1 notation of the range to search.If not specified, it will return the non-empty part of the first sheet in the spreadsheet.Example: Sheet1!A1:D5.\\nPlease specify the range for large spreadsheets.', 'examples': ['Sheet1!A1:D5', 'Sheet1!A:Z'], 'title': 'Range', 'type': 'string'}, 'query': {'description': 'The search query to use for matching the row. This field is required.', 'examples': ['John'], 'title': 'Query', 'type': 'string'}}, title='LookupSpreadsheetRowRequest', type='object', required=['spreadsheet_id', 'query']), response=ActionResponseModel(properties={'row_data': {'default': None, 'description': 'The data of the found row', 'title': 'Row Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='LookupSpreadsheetRowResponse', type='object', required=['successful']), appName='googlesheets', appId='googlesheets', tags=[], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/google-sheets.svg', description='Lookup A Row In A Specific Spreadsheet By A Column And Value.'), ActionModel(name='GOOGLESHEETS_BATCH_GET', display_name='Batch Get Spreadsheet', parameters=ActionParametersModel(properties={'spreadsheet_id': {'description': 'The ID of the spreadsheet', 'title': 'Spreadsheet Id', 'type': 'string'}, 'ranges': {'default': None, 'description': \"List of ranges to retrieve in A1 notation, e.g. 'Sheet1!A1:B2'. If not specified, the filled part of the sheet will be returned if it is less than 100 rows and columns.\", 'examples': ['Sheet1!A1:B2', 'Sheet1!A:A', 'Sheet1!1:2', 'Sheet1!A5:A', 'A1:B2'], 'items': {'type': 'string'}, 'title': 'Ranges', 'type': 'array'}}, title='BatchGetRequest', type='object', required=['spreadsheet_id']), response=ActionResponseModel(properties={'spreadsheet_data': {'default': None, 'description': 'The retrieved spreadsheet data if successful', 'title': 'Spreadsheet Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='BatchGetResponse', type='object', required=['successful']), appName='googlesheets', appId='googlesheets', tags=[], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/google-sheets.svg', description='Perform A Batch Get On A Specific Spreadsheet.')]\n\nFor the following request, determine:\n1. Which specific actions from googlesheets's registry are needed (if any)\n2. What each action's purpose would be in the workflow\n3. If this app's actions alone aren't sufficient for its part in the workflow, explain why\n\nRemember: Focus only on googlesheets's capabilities - ignore requirements for other apps."}, {"role": "user", "content": "Automate checking CPA against target in Google Sheets and send Slack alert if exceeded."}], "model": "deepseek-ai/DeepSeek-R1-Distill-Qwen-32B", "n": 1, "parallel_tool_calls": true, "stream": false, "tool_choice": "required", "tools": [{"type": "function", "function": {"name": "final_result", "description": "The final response which ends this conversation", "parameters": {"$defs": {"ActionRequirement": {"properties": {"app_id": {"description": "ID of the required application", "title": "App Id", "type": "string"}, "action_name": {"description": "Name of the required action", "title": "Action Name", "type": "string"}, "purpose": {"description": "Why this action is needed in the workflow", "title": "Purpose", "type": "string"}}, "required": ["app_id", "action_name", "purpose"], "title": "ActionRequirement", "type": "object"}}, "properties": {"feasible": {"description": "Whether request can be implemented with available actions", "title": "Feasible", "type": "boolean"}, "required_actions": {"anyOf": [{"items": {"$ref": "#/$defs/ActionRequirement"}, "type": "array"}, {"type": "null"}], "default": null, "description": "List of required actions if feasible", "title": "Required Actions"}, "infeasible_reason": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "description": "Detailed explanation if request is not feasible", "title": "Infeasible Reason"}}, "required": ["feasible"], "title": "ActionFeasibilityResult", "type": "object"}}}]}
{"messages": [{"role": "system", "content": "You are a workflow analysis agent that evaluates automation requests.\nYour task is to analyze what actions from ONE SPECIFIC APP (slack) are needed for this workflow.\n\nFocus ONLY on analyzing which actions from this app's registry are required. \nDo NOT consider actions needed from other apps - that will be handled separately.\n\nAvailable Actions for slack:\n[ActionModel(name='SLACK_UPDATE_SLACK_CALL_INFORMATION', display_name='Update slack call information', parameters=ActionParametersModel(properties={'title': {'default': None, 'description': 'The name of the Call.', 'title': 'Title', 'type': 'string'}, 'desktop_app_join_url': {'default': None, 'description': 'When supplied, available Slack clients will attempt to directly launch the 3rd-party Call with this URL. ', 'title': 'Desktop App Join Url', 'type': 'string'}, 'id': {'description': '`id` returned by the [`calls.add`](https://slack.dev) method.', 'title': 'Id', 'type': 'string'}, 'join_url': {'default': None, 'description': 'The URL required for a client to join the Call.', 'title': 'Join Url', 'type': 'string'}}, title='UpdateSlackCallInformationRequest', type='object', required=['id']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='UpdateSlackCallInformationResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['calls'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Updates Information About A Call.'), ActionModel(name='SLACK_SET_WORKSPACE_DEFAULT_CHANNELS', display_name='Set workspace default channels', parameters=ActionParametersModel(properties={'channel_ids': {'description': 'An array of channel IDs.', 'title': 'Channel Ids', 'type': 'string'}, 'team_id': {'description': 'ID for the workspace to set the default channel for.', 'title': 'Team Id', 'type': 'string'}, 'token': {'description': 'Authentication token. Requires scope: `admin.teams:write`', 'title': 'Token', 'type': 'string'}}, title='SetWorkspaceDefaultChannelsRequest', type='object', required=['channel_ids', 'team_id', 'token']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='SetWorkspaceDefaultChannelsResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['admin.teams.settings', 'admin'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Set The Default Channels Of A Workspace.'), ActionModel(name='SLACK_CHECKS_AUTHENTICATION_AND_IDENTITY', display_name='Checks authentication and identity', parameters=ActionParametersModel(properties={}, title='ChecksAuthenticationAndIdentityRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='ChecksAuthenticationAndIdentityResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['auth'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Checks Authentication & Identity.'), ActionModel(name='SLACK_SENDS_EPHEMERAL_MESSAGES_TO_CHANNEL_USERS', display_name='Sends ephemeral messages to channel users', parameters=ActionParametersModel(properties={'as_user': {'default': None, 'description': 'Pass true to post the message as the authed user. Defaults to true if the chat:write:bot scope is not included. Otherwise, defaults to false. ', 'title': 'As User', 'type': 'boolean'}, 'attachments': {'default': None, 'description': 'A JSON-based array of structured attachments, presented as a URL-encoded string. ', 'title': 'Attachments', 'type': 'string'}, 'blocks': {'default': None, 'description': 'A JSON-based array of structured blocks, presented as a URL-encoded string. ', 'title': 'Blocks', 'type': 'string'}, 'channel': {'description': 'Channel, private group, or IM channel to send message to. Can be an encoded ID, or a name. ', 'title': 'Channel', 'type': 'string'}, 'icon_emoji': {'default': None, 'description': 'Emoji to use as the icon for this message. Overrides `icon_url`. Must be used in conjunction with `as_user` set to `false`, otherwise ignored. See [authorship](https://slack.dev) below. ', 'title': 'Icon Emoji', 'type': 'string'}, 'icon_url': {'default': None, 'description': 'URL to an image to use as the icon for this message. Must be used in conjunction with `as_user` set to false, otherwise ignored. See [authorship](https://slack.dev) below. ', 'title': 'Icon Url', 'type': 'string'}, 'link_names': {'default': None, 'description': 'Find and link channel names and usernames.', 'title': 'Link Names', 'type': 'boolean'}, 'parse': {'default': None, 'description': 'Change how messages are treated. Defaults to `none`. See [below](https://slack.dev). ', 'title': 'Parse', 'type': 'string'}, 'text': {'default': None, 'description': 'How this field works and whether it is required depends on other fields you use in your API call. [See below](https://slack.dev) for more detail. ', 'title': 'Text', 'type': 'string'}, 'thread_ts': {'default': None, 'description': 'Provide another message\"s `ts` value to post this message in a thread. Avoid using a reply\"s `ts` value; use its parent\"s value instead. Ephemeral messages in threads are only shown if there is already an active thread. ', 'title': 'Thread Ts', 'type': 'string'}, 'user': {'description': '`id` of the user who will receive the ephemeral message. The user should be in the channel specified by the `channel` argument. ', 'title': 'User', 'type': 'string'}, 'username': {'default': None, 'description': 'Set your bot\"s user name. Must be used in conjunction with `as_user` set to false, otherwise ignored. See [authorship](https://slack.dev) below. ', 'title': 'Username', 'type': 'string'}}, title='SendsEphemeralMessagesToChannelUsersRequest', type='object', required=['channel', 'user']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='SendsEphemeralMessagesToChannelUsersResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['chat'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Sends An Ephemeral Message To A User In A Channel.'), ActionModel(name='SLACK_ADD_IDP_GROUP_ALLOWLIST_TO_CHANNEL', display_name='Add idp group allowlist to channel', parameters=ActionParametersModel(properties={'channel_id': {'description': 'The channel to link this group to.', 'title': 'Channel Id', 'type': 'string'}, 'group_id': {'description': 'The [IDP Group](https://slack.com/help/articles/115001435788-Connect-identity-provider-groups-to-your-Enterprise-Grid-org) ID to be an allowlist for the private channel. ', 'title': 'Group Id', 'type': 'string'}, 'team_id': {'default': None, 'description': 'The workspace where the channel exists. This argument is required for channels only tied to one workspace, and optional for channels that are shared across an organization. ', 'title': 'Team Id', 'type': 'string'}, 'token': {'description': 'Authentication token. Requires scope: `admin.conversations:write`', 'title': 'Token', 'type': 'string'}}, title='AddIdpGroupAllowlistToChannelRequest', type='object', required=['channel_id', 'group_id', 'token']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='AddIdpGroupAllowlistToChannelResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['admin.conversations.restrictAccess', 'admin'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Add An Allowlist Of Idp Groups For Accessing A Channel'), ActionModel(name='SLACK_MARK_REMINDER_AS_COMPLETE', display_name='Mark reminder as complete', parameters=ActionParametersModel(properties={'reminder': {'default': None, 'description': 'The ID of the reminder to be marked as complete', 'title': 'Reminder', 'type': 'string'}}, title='MarkReminderAsCompleteRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='MarkReminderAsCompleteResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['reminders'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Marks A Reminder As Complete.'), ActionModel(name='SLACK_SET_EXPIRATION_FOR_A_GUEST_USER', display_name='Set expiration for a guest user', parameters=ActionParametersModel(properties={'expiration_ts': {'description': 'Timestamp when guest account should be disabled.', 'title': 'Expiration Ts', 'type': 'integer'}, 'team_id': {'description': 'The ID (`T1234`) of the workspace.', 'title': 'Team Id', 'type': 'string'}, 'user_id': {'description': 'The ID of the user to set an expiration for.', 'title': 'User Id', 'type': 'string'}}, title='SetExpirationForAGuestUserRequest', type='object', required=['expiration_ts', 'team_id', 'user_id']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='SetExpirationForAGuestUserResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['admin.users', 'admin'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Set An Expiration For A Guest User'), ActionModel(name='SLACK_CONVERSATIONS_INFO', display_name='Retrieve conversation information', parameters=ActionParametersModel(properties={'channel': {'default': None, 'description': 'Conversation ID to learn more about', 'title': 'Channel', 'type': 'string'}, 'include_locale': {'default': None, 'description': 'Set this to `true` to receive the locale for this conversation. Defaults to `false` ', 'title': 'Include Locale', 'type': 'boolean'}, 'include_num_members': {'default': None, 'description': 'Set to `true` to include the member count for the specified conversation. Defaults to `false` ', 'title': 'Include Num Members', 'type': 'boolean'}}, title='RetrieveConversationInformationRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='RetrieveConversationInformationResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=[], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Retrieve Information About A Conversation.<<DEPRECATED use retrieve_conversation_information>>'), ActionModel(name='SLACK_LIST_USER_GROUPS_FOR_TEAM_WITH_OPTIONS', display_name='List user groups for team with options', parameters=ActionParametersModel(properties={'include_users': {'default': None, 'description': 'Include the list of users for each User Group.', 'title': 'Include Users', 'type': 'boolean'}, 'include_count': {'default': None, 'description': 'Include the number of users in each User Group.', 'title': 'Include Count', 'type': 'boolean'}, 'include_disabled': {'default': None, 'description': 'Include disabled User Groups.', 'title': 'Include Disabled', 'type': 'boolean'}}, title='ListUserGroupsForTeamWithOptionsRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='ListUserGroupsForTeamWithOptionsResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['usergroups'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='List All User Groups For A Team'), ActionModel(name='SLACK_ADD_ENTERPRISE_USER_TO_WORKSPACE', display_name='Add enterprise user to workspace', parameters=ActionParametersModel(properties={'channel_ids': {'default': None, 'description': 'Comma separated values of channel IDs to add user in the new workspace.', 'title': 'Channel Ids', 'type': 'string'}, 'is_restricted': {'default': None, 'description': 'True if user should be added to the workspace as a guest.', 'title': 'Is Restricted', 'type': 'boolean'}, 'is_ultra_restricted': {'default': None, 'description': 'True if user should be added to the workspace as a single-channel guest.', 'title': 'Is Ultra Restricted', 'type': 'boolean'}, 'team_id': {'description': 'The ID (`T1234`) of the workspace.', 'title': 'Team Id', 'type': 'string'}, 'user_id': {'description': 'The ID of the user to add to the workspace.', 'title': 'User Id', 'type': 'string'}}, title='AddEnterpriseUserToWorkspaceRequest', type='object', required=['team_id', 'user_id']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='AddEnterpriseUserToWorkspaceResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['admin.users', 'admin'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Add An Enterprise User To A Workspace.'), ActionModel(name='SLACK_RETRIEVE_DETAILED_USER_INFORMATION', display_name='Retrieve detailed user information', parameters=ActionParametersModel(properties={'include_locale': {'default': None, 'description': 'Set this to `true` to receive the locale for this user. Defaults to `false` ', 'title': 'Include Locale', 'type': 'boolean'}, 'user': {'default': None, 'description': 'User to get info on', 'title': 'User', 'type': 'string'}}, title='RetrieveDetailedUserInformationRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='RetrieveDetailedUserInformationResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['users'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Gets Information About A User.'), ActionModel(name='SLACK_LIST_SLACK_S_REMOTE_FILES_WITH_FILTERS', display_name='List slack s remote files with filters', parameters=ActionParametersModel(properties={'channel': {'default': None, 'description': 'Filter files appearing in a specific channel, indicated by its ID.', 'title': 'Channel', 'type': 'string'}, 'ts_from': {'default': None, 'description': 'Filter files created after this timestamp (inclusive).', 'title': 'Ts From', 'type': 'integer'}, 'ts_to': {'default': None, 'description': 'Filter files created before this timestamp (inclusive).', 'title': 'Ts To', 'type': 'integer'}, 'limit': {'default': None, 'description': 'The maximum number of items to return.', 'title': 'Limit', 'type': 'integer'}, 'cursor': {'default': None, 'description': 'Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request\"s `response_metadata`. Default value fetches the first \"page\" of the collection. See [pagination](https://slack.dev) for more detail. ', 'title': 'Cursor', 'type': 'string'}}, title='ListSlackSRemoteFilesWithFiltersRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='ListSlackSRemoteFilesWithFiltersResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['files.remote', 'files'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Retrieve Information About A Remote File Added To Slack'), ActionModel(name='SLACK_LIST_WORKSPACE_ADMINS', display_name='List workspace admins', parameters=ActionParametersModel(properties={'limit': {'default': None, 'description': 'The maximum number of items to return.', 'title': 'Limit', 'type': 'integer'}, 'cursor': {'default': None, 'description': 'Set `cursor` to `next_cursor` returned by the previous call to list items in the next page. ', 'title': 'Cursor', 'type': 'string'}, 'team_id': {'description': 'Team Id', 'title': 'Team Id', 'type': 'string'}}, title='ListWorkspaceAdminsRequest', type='object', required=['team_id']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='ListWorkspaceAdminsResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['admin.teams.admins', 'admin'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='List All Of The Admins On A Given Workspace.'), ActionModel(name='SLACK_ACTIVATE_OR_MODIFY_DO_NOT_DISTURB_DURATION', display_name='Activate or modify do not disturb duration', parameters=ActionParametersModel(properties={'num_minutes': {'description': 'Number of minutes, from now, to snooze until.', 'title': 'Num Minutes', 'type': 'string'}, 'token': {'description': 'Authentication token. Requires scope: `dnd:write`', 'title': 'Token', 'type': 'string'}}, title='ActivateOrModifyDoNotDisturbDurationRequest', type='object', required=['num_minutes', 'token']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='ActivateOrModifyDoNotDisturbDurationResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['dnd'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Turns On Do Not Disturb Mode For The Current User, Or Changes Its Duration.'), ActionModel(name='SLACK_RETRIEVE_DETAILED_INFORMATION_ABOUT_A_FILE', display_name='Retrieve detailed information about a file', parameters=ActionParametersModel(properties={'file': {'default': None, 'description': 'Specify a file by providing its ID.', 'title': 'File', 'type': 'string'}, 'count': {'default': None, 'description': 'Count', 'title': 'Count', 'type': 'string'}, 'page': {'default': None, 'description': 'Page', 'title': 'Page', 'type': 'string'}, 'limit': {'default': None, 'description': 'The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the list hasn\"t been reached. ', 'title': 'Limit', 'type': 'integer'}, 'cursor': {'default': None, 'description': 'Parameter for pagination. File comments are paginated for a single file. Set `cursor` equal to the `next_cursor` attribute returned by the previous request\"s `response_metadata`. This parameter is optional, but pagination is mandatory: the default value simply fetches the first \"page\" of the collection of comments. See [pagination](https://slack.dev) for more details. ', 'title': 'Cursor', 'type': 'string'}}, title='RetrieveDetailedInformationAboutAFileRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='RetrieveDetailedInformationAboutAFileResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['files'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Gets Information About A File.'), ActionModel(name='SLACK_CLOSE_DM_OR_MULTI_PERSON_DM', display_name='Close dm or multi person dm', parameters=ActionParametersModel(properties={'channel': {'default': None, 'description': 'Conversation to close.', 'title': 'Channel', 'type': 'string'}}, title='CloseDmOrMultiPersonDmRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='CloseDmOrMultiPersonDmResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['conversations'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Closes A Direct Message Or Multi Person Direct Message.'), ActionModel(name='SLACK_SEARCH_MESSAGES', display_name='Search for messages with query', parameters=ActionParametersModel(properties={'count': {'default': None, 'description': 'Pass the number of results you want per \"page\". Maximum of `100`.', 'title': 'Count', 'type': 'integer'}, 'highlight': {'default': None, 'description': 'Pass a value of `true` to enable query highlight markers (see below).', 'title': 'Highlight', 'type': 'boolean'}, 'page': {'default': None, 'description': 'Page', 'title': 'Page', 'type': 'integer'}, 'query': {'description': 'Search query.', 'title': 'Query', 'type': 'string'}, 'sort': {'default': None, 'description': 'Return matches sorted by either `score` or `timestamp`.', 'title': 'Sort', 'type': 'string'}, 'sort_dir': {'default': None, 'description': 'Change sort direction to ascending (`asc`) or descending (`desc`).', 'title': 'Sort Dir', 'type': 'string'}}, title='SearchForMessagesWithQueryRequest', type='object', required=['query']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='SearchForMessagesWithQueryResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=[], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Searches For Messages Matching A Query.<<DEPRECATED use search_for_messages_with_query>>'), ActionModel(name='SLACK_ADD_DEFAULT_CHANNELS_TO_IDP_GROUP', display_name='Add default channels to idp group', parameters=ActionParametersModel(properties={'channel_ids': {'description': 'Comma separated string of channel IDs.', 'title': 'Channel Ids', 'type': 'string'}, 'team_id': {'default': None, 'description': 'The workspace to add default channels in.', 'title': 'Team Id', 'type': 'string'}, 'usergroup_id': {'description': 'ID of the IDP group to add default channels for.', 'title': 'Usergroup Id', 'type': 'string'}}, title='AddDefaultChannelsToIdpGroupRequest', type='object', required=['channel_ids', 'usergroup_id']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='AddDefaultChannelsToIdpGroupResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['admin.usergroups', 'admin'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Add One Or More Default Channels To An Idp Group.'), ActionModel(name='SLACK_RETRIEVE_REMOTE_FILE_INFO_IN_SLACK', display_name='Retrieve remote file info in slack', parameters=ActionParametersModel(properties={'file': {'default': None, 'description': 'Specify a file by providing its ID.', 'title': 'File', 'type': 'string'}, 'external_id': {'default': None, 'description': 'Creator defined GUID for the file.', 'title': 'External Id', 'type': 'string'}}, title='RetrieveRemoteFileInfoInSlackRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='RetrieveRemoteFileInfoInSlackResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['files.remote', 'files'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Retrieve Information About A Remote File Added To Slack'), ActionModel(name='SLACK_UPDATES_A_SLACK_MESSAGE', display_name='Updates a slack message', parameters=ActionParametersModel(properties={'as_user': {'default': None, 'description': 'Pass true to update the message as the authed user. [Bot users](https://slack.dev) in this context are considered authed users. ', 'title': 'As User', 'type': 'string'}, 'attachments': {'default': None, 'description': 'A JSON-based array of structured attachments, presented as a URL-encoded string. This field is required when not presenting `text`. If you don\"t include this field, the message\"s previous `attachments` will be retained. To remove previous `attachments`, include an empty array for this field. ', 'title': 'Attachments', 'type': 'string'}, 'blocks': {'default': None, 'description': 'A JSON-based array of [structured blocks](https://slack.dev), presented as a URL-encoded string. If you don\"t include this field, the message\"s previous `blocks` will be retained. To remove previous `blocks`, include an empty array for this field. ', 'title': 'Blocks', 'type': 'string'}, 'channel': {'description': 'Channel containing the message to be updated.', 'title': 'Channel', 'type': 'string'}, 'link_names': {'default': None, 'description': 'Find and link channel names and usernames. Defaults to `none`. If you do not specify a value for this field, the original value set for the message will be overwritten with the default, `none`. ', 'title': 'Link Names', 'type': 'string'}, 'parse': {'default': None, 'description': 'Change how messages are treated. Defaults to `client`, unlike `chat.postMessage`. Accepts either `none` or `full`. If you do not specify a value for this field, the original value set for the message will be overwritten with the default, `client`. ', 'title': 'Parse', 'type': 'string'}, 'text': {'default': None, 'description': 'New text for the message, using the [default formatting rules](https://slack.dev). It\"s not required when presenting `blocks` or `attachments`. ', 'title': 'Text', 'type': 'string'}, 'ts': {'description': 'Timestamp of the message to be updated.', 'title': 'Ts', 'type': 'string'}}, title='UpdatesASlackMessageRequest', type='object', required=['channel', 'ts']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='UpdatesASlackMessageResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['chat', 'important'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Updates A Message.'), ActionModel(name='SLACK_SEARCH_FOR_MESSAGES_WITH_QUERY', display_name='Search for messages with query', parameters=ActionParametersModel(properties={'count': {'default': None, 'description': 'Pass the number of results you want per \"page\". Maximum of `100`.', 'title': 'Count', 'type': 'integer'}, 'highlight': {'default': None, 'description': 'Pass a value of `true` to enable query highlight markers (see below).', 'title': 'Highlight', 'type': 'boolean'}, 'page': {'default': None, 'description': 'Page', 'title': 'Page', 'type': 'integer'}, 'query': {'description': 'Search query.', 'title': 'Query', 'type': 'string'}, 'sort': {'default': None, 'description': 'Return matches sorted by either `score` or `timestamp`.', 'title': 'Sort', 'type': 'string'}, 'sort_dir': {'default': None, 'description': 'Change sort direction to ascending (`asc`) or descending (`desc`).', 'title': 'Sort Dir', 'type': 'string'}}, title='SearchForMessagesWithQueryRequest', type='object', required=['query']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='SearchForMessagesWithQueryResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['search', 'important'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Searches For Messages Matching A Query.'), ActionModel(name='SLACK_TRIGGER_USER_PERMISSIONS_MODAL', display_name='Trigger user permissions modal', parameters=ActionParametersModel(properties={'scopes': {'description': 'A comma separated list of user scopes to request for', 'title': 'Scopes', 'type': 'string'}, 'trigger_id': {'description': 'Token used to trigger the request', 'title': 'Trigger Id', 'type': 'string'}, 'user': {'description': 'The user this scope is being requested for', 'title': 'User', 'type': 'string'}}, title='TriggerUserPermissionsModalRequest', type='object', required=['scopes', 'trigger_id', 'user']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='TriggerUserPermissionsModalResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['apps.permissions.users', 'apps'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Enables An App To Trigger A Permissions Modal To Grant An App Access To A User Access Scope.'), ActionModel(name='SLACK_PROMOTE_USER_TO_ADMIN_STATUS', display_name='Promote user to admin status', parameters=ActionParametersModel(properties={'team_id': {'description': 'The ID (`T1234`) of the workspace.', 'title': 'Team Id', 'type': 'string'}, 'user_id': {'description': 'The ID of the user to designate as an admin.', 'title': 'User Id', 'type': 'string'}}, title='PromoteUserToAdminStatusRequest', type='object', required=['team_id', 'user_id']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='PromoteUserToAdminStatusResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['admin.users', 'admin'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Set An Existing Guest, Regular User, Or Owner To Be An Admin User.'), ActionModel(name='SLACK_START_REAL_TIME_MESSAGING_SESSION', display_name='Start real time messaging session', parameters=ActionParametersModel(properties={'batch_presence_aware': {'default': None, 'description': 'Batch presence deliveries via subscription. Enabling changes the shape of `presence_change` events. See [batch presence](https://slack.dev). ', 'title': 'Batch Presence Aware', 'type': 'boolean'}, 'presence_sub': {'default': None, 'description': 'Only deliver presence events when requested by subscription. See [presence subscriptions](https://slack.dev). ', 'title': 'Presence Sub', 'type': 'boolean'}}, title='StartRealTimeMessagingSessionRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='StartRealTimeMessagingSessionResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['rtm'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Starts A Real Time Messaging Session.'), ActionModel(name='SLACK_REVERSE_A_CONVERSATION_S_ARCHIVAL_STATUS', display_name='Reverse a conversation s archival status', parameters=ActionParametersModel(properties={'channel': {'default': None, 'description': 'ID of conversation to unarchive', 'title': 'Channel', 'type': 'string'}}, title='ReverseAConversationSArchivalStatusRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='ReverseAConversationSArchivalStatusResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['conversations'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Reverses Conversation Archival.'), ActionModel(name='SLACK_REMOVE_A_REMOTE_FILE', display_name='Remove a remote file', parameters=ActionParametersModel(properties={'external_id': {'default': None, 'description': 'Creator defined GUID for the file.', 'title': 'External Id', 'type': 'string'}, 'file': {'default': None, 'description': 'Specify a file by providing its ID.', 'title': 'File', 'type': 'string'}, 'token': {'default': None, 'description': 'Authentication token. Requires scope: `remote_files:write`', 'title': 'Token', 'type': 'string'}}, title='RemoveARemoteFileRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='RemoveARemoteFileResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['files.remote', 'files'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Remove A Remote File.'), ActionModel(name='SLACK_DELETE_A_SLACK_REMINDER', display_name='Delete a slack reminder', parameters=ActionParametersModel(properties={'reminder': {'default': None, 'description': 'The ID of the reminder', 'title': 'Reminder', 'type': 'string'}}, title='DeleteASlackReminderRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='DeleteASlackReminderResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['reminders'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Deletes A Reminder.'), ActionModel(name='SLACK_APPROVE_WORKSPACE_INVITE_REQUEST', display_name='Approve workspace invite request', parameters=ActionParametersModel(properties={'invite_request_id': {'description': 'ID of the request to invite.', 'title': 'Invite Request Id', 'type': 'string'}, 'team_id': {'default': None, 'description': 'ID for the workspace where the invite request was made.', 'title': 'Team Id', 'type': 'string'}}, title='ApproveWorkspaceInviteRequestRequest', type='object', required=['invite_request_id']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='ApproveWorkspaceInviteRequestResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['admin.inviteRequests', 'admin'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Approve A Workspace Invite Request.'), ActionModel(name='SLACK_GET_USER_PRESENCE_INFO', display_name='Get user presence info', parameters=ActionParametersModel(properties={'user': {'default': None, 'description': 'User to get presence info on. Defaults to the authed user.', 'title': 'User', 'type': 'string'}}, title='GetUserPresenceInfoRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='GetUserPresenceInfoResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['users'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Gets User Presence Information.'), ActionModel(name='SLACK_LIST_USER_REACTIONS', display_name='List user reactions', parameters=ActionParametersModel(properties={'user': {'default': None, 'description': 'Show reactions made by this user. Defaults to the authed user.', 'title': 'User', 'type': 'string'}, 'full': {'default': None, 'description': 'If true always return the complete reaction list.', 'title': 'Full', 'type': 'boolean'}, 'count': {'default': None, 'description': 'Count', 'title': 'Count', 'type': 'integer'}, 'page': {'default': None, 'description': 'Page', 'title': 'Page', 'type': 'integer'}, 'cursor': {'default': None, 'description': 'Parameter for pagination. Set `cursor` equal to the `next_cursor` attribute returned by the previous request\"s `response_metadata`. This parameter is optional, but pagination is mandatory: the default value simply fetches the first \"page\" of the collection. See [pagination](https://slack.dev) for more details. ', 'title': 'Cursor', 'type': 'string'}, 'limit': {'default': None, 'description': 'The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the list hasn\"t been reached. ', 'title': 'Limit', 'type': 'integer'}}, title='ListUserReactionsRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='ListUserReactionsResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['reactions'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Lists Reactions Made By A User.'), ActionModel(name='SLACK_UPDATE_AN_EXISTING_SLACK_USER_GROUP', display_name='Update an existing slack user group', parameters=ActionParametersModel(properties={'description': {'default': None, 'description': 'A short description of the User Group.', 'title': 'Description', 'type': 'string'}, 'channels': {'default': None, 'description': 'A comma separated string of encoded channel IDs for which the User Group uses as a default. ', 'title': 'Channels', 'type': 'string'}, 'handle': {'default': None, 'description': 'A mention handle. Must be unique among channels, users and User Groups.', 'title': 'Handle', 'type': 'string'}, 'include_count': {'default': None, 'description': 'Include the number of users in the User Group.', 'title': 'Include Count', 'type': 'boolean'}, 'name': {'default': None, 'description': 'A name for the User Group. Must be unique among User Groups.', 'title': 'Name', 'type': 'string'}, 'usergroup': {'description': 'The encoded ID of the User Group to update.', 'title': 'Usergroup', 'type': 'string'}}, title='UpdateAnExistingSlackUserGroupRequest', type='object', required=['usergroup']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='UpdateAnExistingSlackUserGroupResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['usergroups'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Update An Existing User Group'), ActionModel(name='SLACK_LIST_RESTRICTED_APPS_FOR_AN_ORG_OR_WORKSPACE', display_name='List restricted apps for an org or workspace', parameters=ActionParametersModel(properties={'limit': {'default': None, 'description': 'The maximum number of items to return. Must be between 1 - 1000 both inclusive. ', 'title': 'Limit', 'type': 'integer'}, 'cursor': {'default': None, 'description': 'Set `cursor` to `next_cursor` returned by the previous call to list items in the next page ', 'title': 'Cursor', 'type': 'string'}, 'team_id': {'default': None, 'description': 'Team Id', 'title': 'Team Id', 'type': 'string'}, 'enterprise_id': {'default': None, 'description': 'Enterprise Id', 'title': 'Enterprise Id', 'type': 'string'}}, title='ListRestrictedAppsForAnOrgOrWorkspaceRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='ListRestrictedAppsForAnOrgOrWorkspaceResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['admin.apps.restricted', 'admin'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='List Restricted Apps For An Org Or Workspace.'), ActionModel(name='SLACK_UNINSTALL_APP_FROM_WORKSPACE', display_name='Uninstall app from workspace', parameters=ActionParametersModel(properties={'client_id': {'default': None, 'description': 'Issued when you created your application.', 'title': 'Client Id', 'type': 'string'}, 'client_secret': {'default': None, 'description': 'Issued when you created your application.', 'title': 'Client Secret', 'type': 'string'}}, title='UninstallAppFromWorkspaceRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='UninstallAppFromWorkspaceResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['apps'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Uninstalls Your App From A Workspace.'), ActionModel(name='SLACK_RETRIEVE_CALL_INFORMATION', display_name='Retrieve call information', parameters=ActionParametersModel(properties={'id': {'description': '`id` of the Call returned by the [`calls.add`](https://slack.dev) method. ', 'title': 'Id', 'type': 'string'}}, title='RetrieveCallInformationRequest', type='object', required=['id']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='RetrieveCallInformationResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['calls'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Returns Information About A Call.'), ActionModel(name='SLACK_DELETE_A_COMMENT_ON_A_FILE', display_name='Delete a comment on a file', parameters=ActionParametersModel(properties={'file': {'default': None, 'description': 'File to delete a comment from.', 'title': 'File', 'type': 'string'}, 'id': {'default': None, 'description': 'The comment to delete.', 'title': 'Id', 'type': 'string'}}, title='DeleteACommentOnAFileRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='DeleteACommentOnAFileResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['files.comments', 'files'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Deletes An Existing Comment On A File.'), ActionModel(name='SLACK_LIST_WORKSPACE_USERS', display_name='List workspace users', parameters=ActionParametersModel(properties={'team_id': {'description': 'The ID (`T1234`) of the workspace.', 'title': 'Team Id', 'type': 'string'}, 'cursor': {'default': None, 'description': 'Set `cursor` to `next_cursor` returned by the previous call to list items in the next page. ', 'title': 'Cursor', 'type': 'string'}, 'limit': {'default': None, 'description': 'Limit for how many users to be retrieved per page', 'title': 'Limit', 'type': 'integer'}}, title='ListWorkspaceUsersRequest', type='object', required=['team_id']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='ListWorkspaceUsersResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['admin.users', 'admin'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='List Users On A Workspace'), ActionModel(name='SLACK_CREATE_A_REMINDER', display_name='Create a reminder', parameters=ActionParametersModel(properties={'text': {'description': 'The content of the reminder', 'title': 'Text', 'type': 'string'}, 'time': {'description': 'When this reminder should happen: the Unix timestamp (up to five years from now), the number of seconds until the reminder (if within 24 hours), or a natural language description (Ex. \"in 15 minutes,\" or \"every Thursday\") ', 'title': 'Time', 'type': 'string'}, 'user': {'default': None, 'description': 'The user who will receive the reminder. If no user is specified, the reminder will go to user who created it. ', 'title': 'User', 'type': 'string'}}, title='CreateAReminderRequest', type='object', required=['text', 'time']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='CreateAReminderResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['reminders', 'important'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Creates A Reminder.'), ActionModel(name='SLACK_LIST_ENTERPRISE_GRID_ORGANIZATION_EMOJIS', display_name='List enterprise grid organization emojis', parameters=ActionParametersModel(properties={'cursor': {'default': None, 'description': 'Set `cursor` to `next_cursor` returned by the previous call to list items in the next page ', 'title': 'Cursor', 'type': 'string'}, 'limit': {'default': None, 'description': 'The maximum number of items to return. Must be between 1 - 1000 both inclusive. ', 'title': 'Limit', 'type': 'integer'}}, title='ListEnterpriseGridOrganizationEmojisRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='ListEnterpriseGridOrganizationEmojisResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['admin.emoji', 'admin'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='List Emoji For An Enterprise Grid Organization.'), ActionModel(name='SLACK_FETCH_WORKSPACE_SETTINGS_INFORMATION', display_name='Fetch workspace settings information', parameters=ActionParametersModel(properties={'team_id': {'description': 'Team Id', 'title': 'Team Id', 'type': 'string'}}, title='FetchWorkspaceSettingsInformationRequest', type='object', required=['team_id']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='FetchWorkspaceSettingsInformationResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['admin.teams.settings', 'admin'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Fetch Information About Settings In A Workspace'), ActionModel(name='SLACK_GET_REMINDER_INFORMATION', display_name='Get reminder information', parameters=ActionParametersModel(properties={'reminder': {'default': None, 'description': 'The ID of the reminder', 'title': 'Reminder', 'type': 'string'}}, title='GetReminderInformationRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='GetReminderInformationResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['reminders'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Gets Information About A Reminder.'), ActionModel(name='SLACK_LIST_APP_USER_GRANTS_AND_SCOPES_ON_TEAM', display_name='List app user grants and scopes on team', parameters=ActionParametersModel(properties={'cursor': {'default': None, 'description': 'Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request\"s `response_metadata`. Default value fetches the first \"page\" of the collection. See [pagination](https://slack.dev) for more detail. ', 'title': 'Cursor', 'type': 'string'}, 'limit': {'default': None, 'description': 'The maximum number of items to return.', 'title': 'Limit', 'type': 'integer'}}, title='ListAppUserGrantsAndScopesOnTeamRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='ListAppUserGrantsAndScopesOnTeamResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['apps.permissions.users', 'apps'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Returns List Of User Grants And Corresponding Scopes This App Has On A Team.'), ActionModel(name='SLACK_REGISTER_CALL_PARTICIPANTS_REMOVAL', display_name='Register call participants removal', parameters=ActionParametersModel(properties={'id': {'description': '`id` returned by the [`calls.add`](https://slack.dev) method.', 'title': 'Id', 'type': 'string'}, 'users': {'description': 'The list of users to remove as participants in the Call. [Read more on how to specify users here](https://slack.dev). ', 'title': 'Users', 'type': 'string'}}, title='RegisterCallParticipantsRemovalRequest', type='object', required=['id', 'users']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='RegisterCallParticipantsRemovalResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['calls.participants', 'calls'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Registers Participants Removed From A Call.'), ActionModel(name='SLACK_ENABLE_A_SPECIFIED_USER_GROUP', display_name='Enable a specified user group', parameters=ActionParametersModel(properties={'include_count': {'default': None, 'description': 'Include the number of users in the User Group.', 'title': 'Include Count', 'type': 'boolean'}, 'usergroup': {'description': 'The encoded ID of the User Group to enable.', 'title': 'Usergroup', 'type': 'string'}}, title='EnableASpecifiedUserGroupRequest', type='object', required=['usergroup']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='EnableASpecifiedUserGroupResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['usergroups'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Enable A User Group'), ActionModel(name='SLACK_LIST_EVENT_AUTHORIZATIONS_FOR_APPS', display_name='List event authorizations for apps', parameters=ActionParametersModel(properties={'event_context': {'description': 'Event Context', 'title': 'Event Context', 'type': 'string'}, 'cursor': {'default': None, 'description': 'Cursor', 'title': 'Cursor', 'type': 'string'}, 'limit': {'default': None, 'description': 'Limit', 'title': 'Limit', 'type': 'integer'}}, title='ListEventAuthorizationsForAppsRequest', type='object', required=['event_context']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='ListEventAuthorizationsForAppsResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['apps.event.authorizations', 'apps'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Get A List Of Authorizations For The Given Event Context. Each Authorization Represents An App Installation That The Event Is Visible To.'), ActionModel(name='SLACK_REVOKE_PUBLIC_SHARING_ACCESS_FOR_A_FILE', display_name='Revoke public sharing access for a file', parameters=ActionParametersModel(properties={'file': {'default': None, 'description': 'File to revoke', 'title': 'File', 'type': 'string'}}, title='RevokePublicSharingAccessForAFileRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='RevokePublicSharingAccessForAFileResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['files'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Revokes Public/External Sharing Access For A File'), ActionModel(name='SLACK_GET_BILLABLE_TEAM_USER_INFO', display_name='Get billable team user info', parameters=ActionParametersModel(properties={'user': {'default': None, 'description': 'A user to retrieve the billable information for. Defaults to all users.', 'title': 'User', 'type': 'string'}}, title='GetBillableTeamUserInfoRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='GetBillableTeamUserInfoResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['team'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Gets Billable Users Information For The Current Team.'), ActionModel(name='SLACK_REMOVE_USER_FROM_WORKSPACE', display_name='Remove user from workspace', parameters=ActionParametersModel(properties={'team_id': {'description': 'The ID (`T1234`) of the workspace.', 'title': 'Team Id', 'type': 'string'}, 'user_id': {'description': 'The ID of the user to remove.', 'title': 'User Id', 'type': 'string'}}, title='RemoveUserFromWorkspaceRequest', type='object', required=['team_id', 'user_id']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='RemoveUserFromWorkspaceResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['admin.users', 'admin'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Remove A User From A Workspace.'), ActionModel(name='SLACK_DISCONNECT_CHANNEL_FROM_WORKSPACES', display_name='Disconnect channel from workspaces', parameters=ActionParametersModel(properties={'channel_id': {'description': 'The channel to be disconnected from some workspaces.', 'title': 'Channel Id', 'type': 'string'}, 'leaving_team_ids': {'default': None, 'description': 'The team to be removed from the channel. Currently only a single team id can be specified. ', 'title': 'Leaving Team Ids', 'type': 'string'}}, title='DisconnectChannelFromWorkspacesRequest', type='object', required=['channel_id']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='DisconnectChannelFromWorkspacesResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['admin.conversations', 'admin'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Disconnect A Connected Channel From One Or More Workspaces.'), ActionModel(name='SLACK_EXCHANGE_OAUTH_CODE_FOR_ACCESS_TOKEN', display_name='Exchange oauth code for access token', parameters=ActionParametersModel(properties={'client_id': {'default': None, 'description': 'Issued when you created your application.', 'title': 'Client Id', 'type': 'string'}, 'client_secret': {'default': None, 'description': 'Issued when you created your application.', 'title': 'Client Secret', 'type': 'string'}, 'code': {'default': None, 'description': 'The `code` param returned via the OAuth callback.', 'title': 'Code', 'type': 'string'}, 'redirect_uri': {'default': None, 'description': 'This must match the originally submitted URI (if one was sent).', 'title': 'Redirect Uri', 'type': 'string'}, 'single_channel': {'default': None, 'description': 'Request the user to add your app only to a single channel. Only valid with a [legacy workspace app](https://api.slack.com/legacy-workspace-apps). ', 'title': 'Single Channel', 'type': 'boolean'}}, title='ExchangeOauthCodeForAccessTokenRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='ExchangeOauthCodeForAccessTokenResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['oauth'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Exchanges A Temporary O Auth Verifier Code For An Access Token.'), ActionModel(name='SLACK_RENAME_AN_EMOJI', display_name='Rename an emoji', parameters=ActionParametersModel(properties={'name': {'description': 'The name of the emoji to be renamed. Colons (`:myemoji:`) around the value are not required, although they may be included. ', 'title': 'Name', 'type': 'string'}, 'new_name': {'description': 'The new name of the emoji.', 'title': 'New Name', 'type': 'string'}, 'token': {'description': 'Authentication token. Requires scope: `admin.teams:write`', 'title': 'Token', 'type': 'string'}}, title='RenameAnEmojiRequest', type='object', required=['name', 'new_name', 'token']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='RenameAnEmojiResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['admin.emoji', 'admin'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Rename An Emoji.'), ActionModel(name='SLACK_LIST_APP_PERMISSIONS_ON_A_TEAM', display_name='List app permissions on a team', parameters=ActionParametersModel(properties={}, title='ListAppPermissionsOnATeamRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='ListAppPermissionsOnATeamResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['apps.permissions', 'apps'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Returns List Of Permissions This App Has On A Team.'), ActionModel(name='SLACK_LIST_IDP_GROUPS_LINKED_TO_A_CHANNEL', display_name='List idp groups linked to a channel', parameters=ActionParametersModel(properties={'channel_id': {'description': 'Channel Id', 'title': 'Channel Id', 'type': 'string'}, 'team_id': {'default': None, 'description': 'The workspace where the channel exists. This argument is required for channels only tied to one workspace, and optional for channels that are shared across an organization. ', 'title': 'Team Id', 'type': 'string'}}, title='ListIdpGroupsLinkedToAChannelRequest', type='object', required=['channel_id']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='ListIdpGroupsLinkedToAChannelResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['admin.conversations.restrictAccess', 'admin'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='List All Idp Groups Linked To A Channel'), ActionModel(name='SLACK_SET_THE_TOPIC_OF_A_CONVERSATION', display_name='Set the topic of a conversation', parameters=ActionParametersModel(properties={'channel': {'default': None, 'description': 'Conversation to set the topic of', 'title': 'Channel', 'type': 'string'}, 'topic': {'default': None, 'description': 'The new topic string. Does not support formatting or linkification.', 'title': 'Topic', 'type': 'string'}}, title='SetTheTopicOfAConversationRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='SetTheTopicOfAConversationResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['conversations'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Sets The Topic For A Conversation.'), ActionModel(name='SLACK_DELETE_A_PUBLIC_OR_PRIVATE_CHANNEL', display_name='Delete a public or private channel', parameters=ActionParametersModel(properties={'channel_id': {'description': 'The channel to delete.', 'title': 'Channel Id', 'type': 'string'}}, title='DeleteAPublicOrPrivateChannelRequest', type='object', required=['channel_id']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='DeleteAPublicOrPrivateChannelResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['admin.conversations', 'admin'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Delete A Public Or Private Channel.'), ActionModel(name='SLACK_RETRIEVE_USER_PROFILE_INFORMATION', display_name='Retrieve user profile information', parameters=ActionParametersModel(properties={'include_labels': {'default': None, 'description': 'Include labels for each ID in custom profile fields', 'title': 'Include Labels', 'type': 'boolean'}, 'user': {'default': None, 'description': 'User to retrieve profile info for', 'title': 'User', 'type': 'string'}}, title='RetrieveUserProfileInformationRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='RetrieveUserProfileInformationResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['users.profile', 'users'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description=\"Retrieves A User's Profile Information.\"), ActionModel(name='SLACK_SET_USER_PROFILE_PHOTO_WITH_CROPPING_OPTIONS', display_name='Set user profile photo with cropping options', parameters=ActionParametersModel(properties={'crop_w': {'default': None, 'description': 'Width/height of crop box (always square)', 'title': 'Crop W', 'type': 'string'}, 'crop_x': {'default': None, 'description': 'X coordinate of top-left corner of crop box', 'title': 'Crop X', 'type': 'string'}, 'crop_y': {'default': None, 'description': 'Y coordinate of top-left corner of crop box', 'title': 'Crop Y', 'type': 'string'}, 'image': {'default': None, 'description': 'File contents via `multipart/form-data`.', 'title': 'Image', 'type': 'string'}, 'token': {'description': 'Authentication token. Requires scope: `users.profile:write`', 'title': 'Token', 'type': 'string'}}, title='SetUserProfilePhotoWithCroppingOptionsRequest', type='object', required=['token']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='SetUserProfilePhotoWithCroppingOptionsResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['users'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Set The User Profile Photo'), ActionModel(name='SLACK_REQUEST_ADDITIONAL_APP_PERMISSIONS', display_name='Request additional app permissions', parameters=ActionParametersModel(properties={'scopes': {'description': 'A comma separated list of scopes to request for', 'title': 'Scopes', 'type': 'string'}, 'trigger_id': {'description': 'Token used to trigger the permissions API', 'title': 'Trigger Id', 'type': 'string'}}, title='RequestAdditionalAppPermissionsRequest', type='object', required=['scopes', 'trigger_id']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='RequestAdditionalAppPermissionsResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['apps.permissions', 'apps'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Allows An App To Request Additional Scopes'), ActionModel(name='SLACK_ASSOCIATE_DEFAULT_WORKSPACES_WITH_IDP_GROUP', display_name='Associate default workspaces with idp group', parameters=ActionParametersModel(properties={'auto_provision': {'default': None, 'description': 'When `true`, this method automatically creates new workspace accounts for the IDP group members. ', 'title': 'Auto Provision', 'type': 'boolean'}, 'team_ids': {'description': 'A comma separated list of encoded team (workspace) IDs. Each workspace *MUST* belong to the organization associated with the token. ', 'title': 'Team Ids', 'type': 'string'}, 'usergroup_id': {'description': 'An encoded usergroup (IDP Group) ID.', 'title': 'Usergroup Id', 'type': 'string'}}, title='AssociateDefaultWorkspacesWithIdpGroupRequest', type='object', required=['team_ids', 'usergroup_id']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='AssociateDefaultWorkspacesWithIdpGroupResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['admin.usergroups', 'admin'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Associate One Or More Default Workspaces With An Organization Wide Idp Group.'), ActionModel(name='SLACK_LIST_ORG_LEVEL_IDP_GROUP_CHANNELS', display_name='List org level idp group channels', parameters=ActionParametersModel(properties={'usergroup_id': {'description': 'ID of the IDP group to list default channels for.', 'title': 'Usergroup Id', 'type': 'string'}, 'team_id': {'default': None, 'description': 'ID of the the workspace.', 'title': 'Team Id', 'type': 'string'}, 'include_num_members': {'default': None, 'description': 'Flag to include or exclude the count of members per channel.', 'title': 'Include Num Members', 'type': 'boolean'}}, title='ListOrgLevelIdpGroupChannelsRequest', type='object', required=['usergroup_id']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='ListOrgLevelIdpGroupChannelsResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['admin.usergroups', 'admin'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='List The Channels Linked To An Org Level Idp Group (User Group).'), ActionModel(name='SLACK_LIST_ALL_SLACK_TEAM_CHANNELS_WITH_VARIOUS_FILTERS', display_name='List all slack team channels with various filters', parameters=ActionParametersModel(properties={'exclude_archived': {'default': None, 'description': 'Set to `true` to exclude archived channels from the list', 'title': 'Exclude Archived', 'type': 'boolean'}, 'types': {'default': None, 'description': 'Mix and match channel types by providing a comma-separated list of any combination of `public_channel`, `private_channel`, `mpim`, `im` ', 'title': 'Types', 'type': 'string'}, 'limit': {'default': None, 'description': 'The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the list hasn\"t been reached. Must be an integer no larger than 1000. ', 'title': 'Limit', 'type': 'integer'}, 'cursor': {'default': None, 'description': 'Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request\"s `response_metadata`. Default value fetches the first \"page\" of the collection. See [pagination](https://slack.dev) for more detail. ', 'title': 'Cursor', 'type': 'string'}}, title='ListAllSlackTeamChannelsWithVariousFiltersRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='ListAllSlackTeamChannelsWithVariousFiltersResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['conversations', 'important'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Lists All Channels In A Slack Team.'), ActionModel(name='SLACK_CREATE_A_SLACK_USER_GROUP', display_name='Create a slack user group', parameters=ActionParametersModel(properties={'description': {'default': None, 'description': 'A short description of the User Group.', 'title': 'Description', 'type': 'string'}, 'channels': {'default': None, 'description': 'A comma separated string of encoded channel IDs for which the User Group uses as a default. ', 'title': 'Channels', 'type': 'string'}, 'handle': {'default': None, 'description': 'A mention handle. Must be unique among channels, users and User Groups.', 'title': 'Handle', 'type': 'string'}, 'include_count': {'default': None, 'description': 'Include the number of users in each User Group.', 'title': 'Include Count', 'type': 'boolean'}, 'name': {'description': 'A name for the User Group. Must be unique among User Groups.', 'title': 'Name', 'type': 'string'}}, title='CreateASlackUserGroupRequest', type='object', required=['name']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='CreateASlackUserGroupResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['usergroups'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Create A User Group'), ActionModel(name='SLACK_DELETE_A_SCHEDULED_MESSAGE_IN_A_CHAT', display_name='Delete a scheduled message in a chat', parameters=ActionParametersModel(properties={'as_user': {'default': None, 'description': 'Pass true to delete the message as the authed user with `chat:write:user` scope. [Bot users](https://slack.dev) in this context are considered authed users. If unused or false, the message will be deleted with `chat:write:bot` scope. ', 'title': 'As User', 'type': 'boolean'}, 'channel': {'description': 'The channel the scheduled_message is posting to', 'title': 'Channel', 'type': 'string'}, 'scheduled_message_id': {'description': '`scheduled_message_id` returned from call to chat.scheduleMessage', 'title': 'Scheduled Message Id', 'type': 'string'}}, title='DeleteAScheduledMessageInAChatRequest', type='object', required=['channel', 'scheduled_message_id']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='DeleteAScheduledMessageInAChatResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['chat'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Deletes A Pending Scheduled Message From The Queue.'), ActionModel(name='SLACK_END_USER_SNOOZE_MODE_IMMEDIATELY', display_name='End user snooze mode immediately', parameters=ActionParametersModel(properties={}, title='EndUserSnoozeModeImmediatelyRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='EndUserSnoozeModeImmediatelyResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['dnd'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description=\"Ends The Current User's Snooze Mode Immediately.\"), ActionModel(name='SLACK_UPDATE_USER_GROUP_MEMBERS', display_name='Update user group members', parameters=ActionParametersModel(properties={'include_count': {'default': None, 'description': 'Include the number of users in the User Group.', 'title': 'Include Count', 'type': 'boolean'}, 'usergroup': {'description': 'The encoded ID of the User Group to update.', 'title': 'Usergroup', 'type': 'string'}, 'users': {'description': 'A comma separated string of encoded user IDs that represent the entire list of users for the User Group. ', 'title': 'Users', 'type': 'string'}}, title='UpdateUserGroupMembersRequest', type='object', required=['usergroup', 'users']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='UpdateUserGroupMembersResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['usergroups.users', 'usergroups'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Update The List Of Users For A User Group'), ActionModel(name='SLACK_LIST_DENIED_WORKSPACE_INVITE_REQUESTS', display_name='List denied workspace invite requests', parameters=ActionParametersModel(properties={'team_id': {'default': None, 'description': 'ID for the workspace where the invite requests were made.', 'title': 'Team Id', 'type': 'string'}, 'cursor': {'default': None, 'description': 'Value of the `next_cursor` field sent as part of the previous api response ', 'title': 'Cursor', 'type': 'string'}, 'limit': {'default': None, 'description': 'The number of results that will be returned by the API on each invocation. Must be between 1 - 1000 both inclusive ', 'title': 'Limit', 'type': 'integer'}}, title='ListDeniedWorkspaceInviteRequestsRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='ListDeniedWorkspaceInviteRequestsResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['admin.inviteRequests.denied', 'admin'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='List All Denied Workspace Invite Requests.'), ActionModel(name='SLACK_MARK_WORKFLOW_STEP_AS_COMPLETED', display_name='Mark workflow step as completed', parameters=ActionParametersModel(properties={'workflow_step_execute_id': {'description': 'Context identifier that maps to the correct workflow step execution.', 'title': 'Workflow Step Execute Id', 'type': 'string'}, 'outputs': {'default': None, 'description': 'Key-value object of outputs from your step. Keys of this object reflect the configured `key` properties of your [`outputs`](https://slack.dev) array from your `workflow_step` object. ', 'title': 'Outputs', 'type': 'string'}}, title='MarkWorkflowStepAsCompletedRequest', type='object', required=['workflow_step_execute_id']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='MarkWorkflowStepAsCompletedResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['workflows'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description=\"Indicate That An App's Step In A Workflow Completed Execution.\"), ActionModel(name='SLACK_ADD_A_REMOTE_FILE_FROM_A_SERVICE', display_name='Add a remote file from a service', parameters=ActionParametersModel(properties={'title': {'default': None, 'description': 'Title of the file being shared.', 'title': 'Title', 'type': 'string'}, 'external_id': {'default': None, 'description': 'Creator defined GUID for the file.', 'title': 'External Id', 'type': 'string'}, 'external_url': {'default': None, 'description': 'URL of the remote file.', 'title': 'External Url', 'type': 'string'}, 'filetype': {'default': None, 'description': 'type of file', 'title': 'Filetype', 'type': 'string'}, 'indexable_file_contents': {'default': None, 'description': 'A text file (txt, pdf, doc, etc.) containing textual search terms that are used to improve discovery of the remote file. ', 'title': 'Indexable File Contents', 'type': 'string'}, 'preview_image': {'default': None, 'description': 'Preview of the document via `multipart/form-data`.', 'title': 'Preview Image', 'type': 'string'}, 'token': {'default': None, 'description': 'Authentication token. Requires scope: `remote_files:write`', 'title': 'Token', 'type': 'string'}}, title='AddARemoteFileFromAServiceRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='AddARemoteFileFromAServiceResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['files.remote', 'files'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Adds A File From A Remote Service'), ActionModel(name='SLACK_SET_A_CONVERSATION_S_PURPOSE', display_name='Set a conversation s purpose', parameters=ActionParametersModel(properties={'channel': {'default': None, 'description': 'Conversation to set the purpose of', 'title': 'Channel', 'type': 'string'}, 'purpose': {'default': None, 'description': 'A new, specialer purpose', 'title': 'Purpose', 'type': 'string'}}, title='SetAConversationSPurposeRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='SetAConversationSPurposeResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['conversations'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Sets The Purpose For A Conversation.'), ActionModel(name='SLACK_FETCH_DND_STATUS_FOR_MULTIPLE_TEAM_MEMBERS', display_name='Fetch dnd status for multiple team members', parameters=ActionParametersModel(properties={'users': {'default': None, 'description': 'Comma-separated list of users to fetch Do Not Disturb status for', 'title': 'Users', 'type': 'string'}}, title='FetchDndStatusForMultipleTeamMembersRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='FetchDndStatusForMultipleTeamMembersResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['dnd'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Retrieves The Do Not Disturb Status For Up To 50 Users On A Team.'), ActionModel(name='SLACK_SENDS_A_MESSAGE_TO_A_SLACK_CHANNEL', display_name='Sends a message to a slack channel', parameters=ActionParametersModel(properties={'as_user': {'default': None, 'description': 'Pass true to post the message as the authed user, instead of as a bot. Defaults to false. See [authorship](https://slack.dev) below. ', 'title': 'As User', 'type': 'boolean'}, 'attachments': {'default': None, 'description': 'A JSON-based array of structured attachments, presented as a URL-encoded string. ', 'title': 'Attachments', 'type': 'string'}, 'blocks': {'default': None, 'description': 'A JSON-based array of structured blocks, presented as a URL-encoded string. ', 'title': 'Blocks', 'type': 'string'}, 'channel': {'description': 'Channel, private group, or IM channel to send message to. Can be an encoded ID, or a name. See [below](https://slack.dev) for more details. ', 'title': 'Channel', 'type': 'string'}, 'icon_emoji': {'default': None, 'description': 'Emoji to use as the icon for this message. Overrides `icon_url`. Must be used in conjunction with `as_user` set to `false`, otherwise ignored. See [authorship](https://slack.dev) below. ', 'title': 'Icon Emoji', 'type': 'string'}, 'icon_url': {'default': None, 'description': 'URL to an image to use as the icon for this message. Must be used in conjunction with `as_user` set to false, otherwise ignored. See [authorship](https://slack.dev) below. ', 'title': 'Icon Url', 'type': 'string'}, 'link_names': {'default': None, 'description': 'Find and link channel names and usernames.', 'title': 'Link Names', 'type': 'boolean'}, 'mrkdwn': {'default': None, 'description': 'Disable Slack markup parsing by setting to `false`. Enabled by default.', 'title': 'Mrkdwn', 'type': 'boolean'}, 'parse': {'default': None, 'description': 'Change how messages are treated. Defaults to `none`. See [below](https://slack.dev). ', 'title': 'Parse', 'type': 'string'}, 'reply_broadcast': {'default': None, 'description': 'Used in conjunction with `thread_ts` and indicates whether reply should be made visible to everyone in the channel or conversation. Defaults to `false`. ', 'title': 'Reply Broadcast', 'type': 'boolean'}, 'text': {'default': None, 'description': 'How this field works and whether it is required depends on other fields you use in your API call. [See below](https://slack.dev) for more detail. ', 'title': 'Text', 'type': 'string'}, 'thread_ts': {'default': None, 'description': 'Provide another message\"s `ts` value to make this message a reply. Avoid using a reply\"s `ts` value; use its parent instead. ', 'title': 'Thread Ts', 'type': 'string'}, 'unfurl_links': {'default': None, 'description': 'Pass true to enable unfurling of primarily text-based content.', 'title': 'Unfurl Links', 'type': 'boolean'}, 'unfurl_media': {'default': None, 'description': 'Pass false to disable unfurling of media content.', 'title': 'Unfurl Media', 'type': 'boolean'}, 'username': {'default': None, 'description': 'Set your bot\"s user name. Must be used in conjunction with `as_user` set to false, otherwise ignored. See [authorship](https://slack.dev) below. ', 'title': 'Username', 'type': 'string'}}, title='SendsAMessageToASlackChannelRequest', type='object', required=['channel']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='SendsAMessageToASlackChannelResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['chat', 'important'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Sends A Message To A Channel.'), ActionModel(name='SLACK_SCHEDULES_A_MESSAGE_TO_A_CHANNEL_AT_A_SPECIFIED_TIME', display_name='Schedules a message to a channel at a specified time', parameters=ActionParametersModel(properties={'as_user': {'default': None, 'description': 'Pass true to post the message as the authed user, instead of as a bot. Defaults to false. See [chat.postMessage](chat.postMessage#authorship). ', 'title': 'As User', 'type': 'boolean'}, 'attachments': {'default': None, 'description': 'A JSON-based array of structured attachments, presented as a URL-encoded string. ', 'title': 'Attachments', 'type': 'string'}, 'blocks': {'default': None, 'description': 'A JSON-based array of structured blocks, presented as a URL-encoded string. ', 'title': 'Blocks', 'type': 'string'}, 'channel': {'default': None, 'description': 'Channel, private group, or DM channel to send message to. Can be an encoded ID, or a name. See [below](https://slack.dev) for more details. ', 'title': 'Channel', 'type': 'string'}, 'link_names': {'default': None, 'description': 'Find and link channel names and usernames.', 'title': 'Link Names', 'type': 'boolean'}, 'parse': {'default': None, 'description': 'Change how messages are treated. Defaults to `none`. See [chat.postMessage](chat.postMessage#formatting). ', 'title': 'Parse', 'type': 'string'}, 'post_at': {'default': None, 'description': 'Unix EPOCH timestamp of time in future to send the message.', 'title': 'Post At', 'type': 'string'}, 'reply_broadcast': {'default': None, 'description': 'Used in conjunction with `thread_ts` and indicates whether reply should be made visible to everyone in the channel or conversation. Defaults to `false`. ', 'title': 'Reply Broadcast', 'type': 'boolean'}, 'text': {'default': None, 'description': 'How this field works and whether it is required depends on other fields you use in your API call. [See below](https://slack.dev) for more detail. ', 'title': 'Text', 'type': 'string'}, 'thread_ts': {'default': None, 'description': 'Provide another message\"s `ts` value to make this message a reply. Avoid using a reply\"s `ts` value; use its parent instead. ', 'title': 'Thread Ts', 'type': 'integer'}, 'unfurl_links': {'default': None, 'description': 'Pass true to enable unfurling of primarily text-based content.', 'title': 'Unfurl Links', 'type': 'boolean'}, 'unfurl_media': {'default': None, 'description': 'Pass false to disable unfurling of media content.', 'title': 'Unfurl Media', 'type': 'boolean'}}, title='SchedulesAMessageToAChannelAtASpecifiedTimeRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='SchedulesAMessageToAChannelAtASpecifiedTimeResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['chat', 'important'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Schedules A Message To Be Sent To A Channel.'), ActionModel(name='SLACK_END_A_CALL_WITH_DURATION_AND_ID', display_name='End a call with duration and id', parameters=ActionParametersModel(properties={'duration': {'default': None, 'description': 'Call duration in seconds', 'title': 'Duration', 'type': 'integer'}, 'id': {'description': '`id` returned when registering the call using the [`calls.add`](https://slack.dev) method. ', 'title': 'Id', 'type': 'string'}}, title='EndACallWithDurationAndIdRequest', type='object', required=['id']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='EndACallWithDurationAndIdResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['calls'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Ends A Call.'), ActionModel(name='SLACK_INITIATES_CHANNEL_BASED_CONVERSATIONS', display_name='Initiates channel based conversations', parameters=ActionParametersModel(properties={'is_private': {'default': None, 'description': 'Create a private channel instead of a public one', 'title': 'Is Private', 'type': 'boolean'}, 'name': {'default': None, 'description': 'Name of the public or private channel to create', 'title': 'Name', 'type': 'string'}}, title='InitiatesChannelBasedConversationsRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='InitiatesChannelBasedConversationsResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['conversations'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Initiates A Public Or Private Channel Based Conversation'), ActionModel(name='SLACK_ARCHIVE_A_SLACK_CONVERSATION', display_name='Archive a slack conversation', parameters=ActionParametersModel(properties={'channel': {'default': None, 'description': 'ID of conversation to archive', 'title': 'Channel', 'type': 'string'}}, title='ArchiveASlackConversationRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='ArchiveASlackConversationResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['conversations'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Archives A Conversation.'), ActionModel(name='SLACK_LIST_TEAM_CUSTOM_EMOJIS', display_name='List team custom emojis', parameters=ActionParametersModel(properties={}, title='ListTeamCustomEmojisRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='ListTeamCustomEmojisResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['emoji'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Lists Custom Emoji For A Team.'), ActionModel(name='SLACK_REVOKES_A_TOKEN_WITH_OPTIONAL_TEST_MODE', display_name='Revokes a token with optional test mode', parameters=ActionParametersModel(properties={'test': {'default': None, 'description': 'Setting this parameter to `1` triggers a _testing mode_ where the specified token will not actually be revoked. ', 'title': 'Test', 'type': 'boolean'}}, title='RevokesATokenWithOptionalTestModeRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='RevokesATokenWithOptionalTestModeResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['auth'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Revokes A Token.'), ActionModel(name='SLACK_LIST_APPROVED_APPS_FOR_ORG_OR_WORKSPACE', display_name='List approved apps for org or workspace', parameters=ActionParametersModel(properties={'limit': {'default': None, 'description': 'The maximum number of items to return. Must be between 1 - 1000 both inclusive. ', 'title': 'Limit', 'type': 'integer'}, 'cursor': {'default': None, 'description': 'Set `cursor` to `next_cursor` returned by the previous call to list items in the next page ', 'title': 'Cursor', 'type': 'string'}, 'team_id': {'default': None, 'description': 'Team Id', 'title': 'Team Id', 'type': 'string'}, 'enterprise_id': {'default': None, 'description': 'Enterprise Id', 'title': 'Enterprise Id', 'type': 'string'}}, title='ListApprovedAppsForOrgOrWorkspaceRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='ListApprovedAppsForOrgOrWorkspaceResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['admin.apps.approved', 'admin'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='List Approved Apps For An Org Or Workspace.'), ActionModel(name='SLACK_SET_WORKSPACE_CONNECTIONS_FOR_A_CHANNEL', display_name='Set workspace connections for a channel', parameters=ActionParametersModel(properties={'channel_id': {'description': 'The encoded `channel_id` to add or remove to workspaces.', 'title': 'Channel Id', 'type': 'string'}, 'org_channel': {'default': None, 'description': 'True if channel has to be converted to an org channel', 'title': 'Org Channel', 'type': 'boolean'}, 'target_team_ids': {'default': None, 'description': 'A comma-separated list of workspaces to which the channel should be shared. Not required if the channel is being shared org-wide. ', 'title': 'Target Team Ids', 'type': 'string'}, 'team_id': {'default': None, 'description': 'The workspace to which the channel belongs. Omit this argument if the channel is a cross-workspace shared channel. ', 'title': 'Team Id', 'type': 'string'}}, title='SetWorkspaceConnectionsForAChannelRequest', type='object', required=['channel_id']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='SetWorkspaceConnectionsForAChannelResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['admin.conversations', 'admin'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Set The Workspaces In An Enterprise Grid Org That Connect To A Public Or Private Channel.'), ActionModel(name='SLACK_SET_READ_CURSOR_IN_A_CONVERSATION', display_name='Set read cursor in a conversation', parameters=ActionParametersModel(properties={'channel': {'default': None, 'description': 'Channel or conversation to set the read cursor for.', 'title': 'Channel', 'type': 'string'}, 'ts': {'default': None, 'description': 'Unique identifier of message you want marked as most recently seen in this conversation. ', 'title': 'Ts', 'type': 'integer'}}, title='SetReadCursorInAConversationRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='SetReadCursorInAConversationResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['conversations'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Sets The Read Cursor In A Channel.'), ActionModel(name='SLACK_LIST_PENDING_WORKSPACE_INVITE_REQUESTS', display_name='List pending workspace invite requests', parameters=ActionParametersModel(properties={'team_id': {'default': None, 'description': 'ID for the workspace where the invite requests were made.', 'title': 'Team Id', 'type': 'string'}, 'cursor': {'default': None, 'description': 'Value of the `next_cursor` field sent as part of the previous API response ', 'title': 'Cursor', 'type': 'string'}, 'limit': {'default': None, 'description': 'The number of results that will be returned by the API on each invocation. Must be between 1 - 1000, both inclusive ', 'title': 'Limit', 'type': 'integer'}}, title='ListPendingWorkspaceInviteRequestsRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='ListPendingWorkspaceInviteRequestsResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['admin.inviteRequests', 'admin'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='List All Pending Workspace Invite Requests.'), ActionModel(name='SLACK_REGISTERS_A_NEW_CALL_WITH_PARTICIPANTS', display_name='Registers a new call with participants', parameters=ActionParametersModel(properties={'title': {'default': None, 'description': 'The name of the Call.', 'title': 'Title', 'type': 'string'}, 'created_by': {'default': None, 'description': 'The valid Slack user ID of the user who created this Call. When this method is called with a user token, the `created_by` field is optional and defaults to the authed user of the token. Otherwise, the field is required. ', 'title': 'Created By', 'type': 'string'}, 'date_start': {'default': None, 'description': 'Call start time in UTC UNIX timestamp format', 'title': 'Date Start', 'type': 'integer'}, 'desktop_app_join_url': {'default': None, 'description': 'When supplied, available Slack clients will attempt to directly launch the 3rd-party Call with this URL. ', 'title': 'Desktop App Join Url', 'type': 'string'}, 'external_display_id': {'default': None, 'description': 'An optional, human-readable ID supplied by the 3rd-party Call provider. If supplied, this ID will be displayed in the Call object. ', 'title': 'External Display Id', 'type': 'string'}, 'external_unique_id': {'description': 'An ID supplied by the 3rd-party Call provider. It must be unique across all Calls from that service. ', 'title': 'External Unique Id', 'type': 'string'}, 'join_url': {'description': 'The URL required for a client to join the Call.', 'title': 'Join Url', 'type': 'string'}, 'users': {'default': None, 'description': 'The list of users to register as participants in the Call. [Read more on how to specify users here](https://slack.dev). ', 'title': 'Users', 'type': 'string'}}, title='RegistersANewCallWithParticipantsRequest', type='object', required=['external_unique_id', 'join_url']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='RegistersANewCallWithParticipantsResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['calls'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Registers A New Call.'), ActionModel(name='SLACK_SEARCH_CHANNELS_IN_AN_ENTERPRISE_ORGANIZATION', display_name='Search channels in an enterprise organization', parameters=ActionParametersModel(properties={'team_ids': {'default': None, 'description': 'Comma separated string of team IDs, signifying the workspaces to search through. ', 'title': 'Team Ids', 'type': 'string'}, 'query': {'default': None, 'description': 'Name of the the channel to query by.', 'title': 'Query', 'type': 'string'}, 'limit': {'default': None, 'description': 'Maximum number of items to be returned. Must be between 1 - 20 both inclusive. Default is 10. ', 'title': 'Limit', 'type': 'integer'}, 'cursor': {'default': None, 'description': 'Set `cursor` to `next_cursor` returned by the previous call to list items in the next page. ', 'title': 'Cursor', 'type': 'string'}, 'search_channel_types': {'default': None, 'description': 'The type of channel to include or exclude in the search. For example `private` will search private channels, while `private_exclude` will exclude them. For a full list of types, check the [Types section](https://slack.dev). ', 'title': 'Search Channel Types', 'type': 'string'}, 'sort': {'default': None, 'description': 'Possible values are `relevant` (search ranking based on what we think is closest), `name` (alphabetical), `member_count` (number of users in the channel), and `created` (date channel was created). You can optionally pair this with the `sort_dir` arg to change how it is sorted  ', 'title': 'Sort', 'type': 'string'}, 'sort_dir': {'default': None, 'description': 'Sort direction. Possible values are `asc` for ascending order like (1, 2, 3) or (a, b, c), and `desc` for descending order like (3, 2, 1) or (c, b, a) ', 'title': 'Sort Dir', 'type': 'string'}}, title='SearchChannelsInAnEnterpriseOrganizationRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='SearchChannelsInAnEnterpriseOrganizationResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['admin.conversations', 'admin'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Search For Public Or Private Channels In An Enterprise Organization.'), ActionModel(name='SLACK_DELETE_USER_PROFILE_PHOTO', display_name='Delete user profile photo', parameters=ActionParametersModel(properties={'token': {'description': 'Authentication token. Requires scope: `users.profile:write`', 'title': 'Token', 'type': 'string'}}, title='DeleteUserProfilePhotoRequest', type='object', required=['token']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='DeleteUserProfilePhotoResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['users'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Delete The User Profile Photo'), ActionModel(name='SLACK_INVALIDATE_A_USER_SESSION_BY_ID', display_name='Invalidate a user session by id', parameters=ActionParametersModel(properties={'session_id': {'description': 'Session Id', 'title': 'Session Id', 'type': 'integer'}, 'team_id': {'description': 'ID of the team that the session belongs to', 'title': 'Team Id', 'type': 'string'}}, title='InvalidateAUserSessionByIdRequest', type='object', required=['session_id', 'team_id']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='InvalidateAUserSessionByIdResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['admin.users.session', 'admin'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Invalidate A Single Session For A User By Session'), ActionModel(name='SLACK_LISTS_USER_S_STARRED_ITEMS_WITH_PAGINATION', display_name='Lists user s starred items with pagination', parameters=ActionParametersModel(properties={'count': {'default': None, 'description': 'Count', 'title': 'Count', 'type': 'string'}, 'page': {'default': None, 'description': 'Page', 'title': 'Page', 'type': 'string'}, 'cursor': {'default': None, 'description': 'Parameter for pagination. Set `cursor` equal to the `next_cursor` attribute returned by the previous request\"s `response_metadata`. This parameter is optional, but pagination is mandatory: the default value simply fetches the first \"page\" of the collection. See [pagination](https://slack.dev) for more details. ', 'title': 'Cursor', 'type': 'string'}, 'limit': {'default': None, 'description': 'The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the list hasn\"t been reached. ', 'title': 'Limit', 'type': 'integer'}}, title='ListsUserSStarredItemsWithPaginationRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='ListsUserSStarredItemsWithPaginationResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['stars'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Lists Stars For A User.'), ActionModel(name='SLACK_JOIN_AN_EXISTING_CONVERSATION', display_name='Join an existing conversation', parameters=ActionParametersModel(properties={'channel': {'default': None, 'description': 'ID of conversation to join', 'title': 'Channel', 'type': 'string'}}, title='JoinAnExistingConversationRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='JoinAnExistingConversationResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['conversations'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Joins An Existing Conversation.'), ActionModel(name='SLACK_RETRIEVE_MESSAGE_PERMALINK_URL', display_name='Retrieve message permalink url', parameters=ActionParametersModel(properties={'channel': {'description': 'The ID of the conversation or channel containing the message', 'title': 'Channel', 'type': 'string'}, 'message_ts': {'description': 'A message\"s `ts` value, uniquely identifying it within a channel', 'title': 'Message Ts', 'type': 'string'}}, title='RetrieveMessagePermalinkUrlRequest', type='object', required=['channel', 'message_ts']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='RetrieveMessagePermalinkUrlResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['chat'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Retrieve A Permalink Url For A Specific Extant Message'), ActionModel(name='SLACK_RETRIEVE_CURRENT_USER_DND_STATUS', display_name='Retrieve current user dnd status', parameters=ActionParametersModel(properties={'user': {'default': None, 'description': 'User to fetch status for (defaults to current user)', 'title': 'User', 'type': 'string'}}, title='RetrieveCurrentUserDndStatusRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='RetrieveCurrentUserDndStatusResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['dnd'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description=\"Retrieves A User's Current Do Not Disturb Status.\"), ActionModel(name='SLACK_REMOVE_IDP_GROUP_FROM_PRIVATE_CHANNEL', display_name='Remove idp group from private channel', parameters=ActionParametersModel(properties={'channel_id': {'description': 'The channel to remove the linked group from.', 'title': 'Channel Id', 'type': 'string'}, 'group_id': {'description': 'The [IDP Group](https://slack.com/help/articles/115001435788-Connect-identity-provider-groups-to-your-Enterprise-Grid-org) ID to remove from the private channel. ', 'title': 'Group Id', 'type': 'string'}, 'team_id': {'description': 'The workspace where the channel exists. This argument is required for channels only tied to one workspace, and optional for channels that are shared across an organization. ', 'title': 'Team Id', 'type': 'string'}, 'token': {'description': 'Authentication token. Requires scope: `admin.conversations:write`', 'title': 'Token', 'type': 'string'}}, title='RemoveIdpGroupFromPrivateChannelRequest', type='object', required=['channel_id', 'group_id', 'team_id', 'token']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='RemoveIdpGroupFromPrivateChannelResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['admin.conversations.restrictAccess', 'admin'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Remove A Linked Idp Group Linked From A Private Channel'), ActionModel(name='SLACK_UPDATE_WORKFLOW_EXTENSION_STEP_CONFIGURATION', display_name='Update workflow extension step configuration', parameters=ActionParametersModel(properties={'workflow_step_edit_id': {'description': 'A context identifier provided with `view_submission` payloads used to call back to `workflows.updateStep`. ', 'title': 'Workflow Step Edit Id', 'type': 'string'}, 'inputs': {'default': None, 'description': 'A JSON key-value map of inputs required from a user during configuration. This is the data your app expects to receive when the workflow step starts. **Please note**: the embedded variable format is set and replaced by the workflow system. You cannot create custom variables that will be replaced at runtime. [Read more about variables in workflow steps here](https://slack.dev). ', 'title': 'Inputs', 'type': 'string'}, 'outputs': {'default': None, 'description': 'An JSON array of output objects used during step execution. This is the data your app agrees to provide when your workflow step was executed. ', 'title': 'Outputs', 'type': 'string'}, 'step_name': {'default': None, 'description': 'An optional field that can be used to override the step name that is shown in the Workflow Builder. ', 'title': 'Step Name', 'type': 'string'}, 'step_image_url': {'default': None, 'description': 'An optional field that can be used to override app image that is shown in the Workflow Builder. ', 'title': 'Step Image Url', 'type': 'string'}}, title='UpdateWorkflowExtensionStepConfigurationRequest', type='object', required=['workflow_step_edit_id']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='UpdateWorkflowExtensionStepConfigurationResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['workflows'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Update The Configuration For A Workflow Extension Step.'), ActionModel(name='SLACK_LIST_FILES_WITH_FILTERS_IN_SLACK', display_name='List files with filters in slack', parameters=ActionParametersModel(properties={'user': {'default': None, 'description': 'Filter files created by a single user.', 'title': 'User', 'type': 'string'}, 'channel': {'default': None, 'description': 'Filter files appearing in a specific channel, indicated by its ID.', 'title': 'Channel', 'type': 'string'}, 'ts_from': {'default': None, 'description': 'Filter files created after this timestamp (inclusive).', 'title': 'Ts From', 'type': 'integer'}, 'ts_to': {'default': None, 'description': 'Filter files created before this timestamp (inclusive).', 'title': 'Ts To', 'type': 'integer'}, 'types': {'default': None, 'description': 'Filter files by type ([see below](https://slack.dev)). You can pass multiple values in the types argument, like `types=spaces,snippets`.The default value is `all`, which does not filter the list. ', 'title': 'Types', 'type': 'string'}, 'count': {'default': None, 'description': 'Count', 'title': 'Count', 'type': 'string'}, 'page': {'default': None, 'description': 'Page', 'title': 'Page', 'type': 'string'}, 'show_files_hidden_by_limit': {'default': None, 'description': 'Show truncated file info for files hidden due to being too old, and the team who owns the file being over the file limit. ', 'title': 'Show Files Hidden By Limit', 'type': 'boolean'}}, title='ListFilesWithFiltersInSlackRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='ListFilesWithFiltersInSlackResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['files'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='List For A Team, In A Channel, Or From A User With Applied Filters.'), ActionModel(name='SLACK_ADD_A_STAR_TO_AN_ITEM', display_name='Add a star to an item', parameters=ActionParametersModel(properties={'channel': {'default': None, 'description': 'Channel to add star to, or channel where the message to add star to was posted (used with `timestamp`). ', 'title': 'Channel', 'type': 'string'}, 'file': {'default': None, 'description': 'File to add star to.', 'title': 'File', 'type': 'string'}, 'file_comment': {'default': None, 'description': 'File comment to add star to.', 'title': 'File Comment', 'type': 'string'}, 'timestamp': {'default': None, 'description': 'Timestamp of the message to add star to.', 'title': 'Timestamp', 'type': 'string'}}, title='AddAStarToAnItemRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='AddAStarToAnItemResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['stars'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Adds A Star To An Item.'), ActionModel(name='SLACK_OPEN_OR_RESUME_DIRECT_OR_MULTI_PERSON_MESSAGES', display_name='Open or resume direct or multi person messages', parameters=ActionParametersModel(properties={'channel': {'default': None, 'description': 'Resume a conversation by supplying an `im` or `mpim`\"s ID. Or provide the `users` field instead. ', 'title': 'Channel', 'type': 'string'}, 'return_im': {'default': None, 'description': 'Boolean, indicates you want the full IM channel definition in the response. ', 'title': 'Return Im', 'type': 'boolean'}, 'users': {'default': None, 'description': 'Comma separated lists of users. If only one user is included, this creates a 1:1 DM.  The ordering of the users is preserved whenever a multi-person direct message is returned. Supply a `channel` when not supplying `users`. ', 'title': 'Users', 'type': 'string'}}, title='OpenOrResumeDirectOrMultiPersonMessagesRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='OpenOrResumeDirectOrMultiPersonMessagesResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['conversations'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Opens Or Resumes A Direct Message Or Multi Person Direct Message.'), ActionModel(name='SLACK_LIST_APP_RESOURCE_GRANTS_ON_A_TEAM', display_name='List app resource grants on a team', parameters=ActionParametersModel(properties={'cursor': {'default': None, 'description': 'Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request\"s `response_metadata`. Default value fetches the first \"page\" of the collection. See [pagination](https://slack.dev) for more detail. ', 'title': 'Cursor', 'type': 'string'}, 'limit': {'default': None, 'description': 'The maximum number of items to return.', 'title': 'Limit', 'type': 'integer'}}, title='ListAppResourceGrantsOnATeamRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='ListAppResourceGrantsOnATeamResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['apps.permissions.resources', 'apps'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Returns List Of Resource Grants This App Has On A Team.'), ActionModel(name='SLACK_LIST_ALL_TEAMS_IN_AN_ENTERPRISE_ORGANIZATION', display_name='List all teams in an enterprise organization', parameters=ActionParametersModel(properties={'limit': {'default': None, 'description': 'The maximum number of items to return. Must be between 1 - 100 both inclusive. ', 'title': 'Limit', 'type': 'integer'}, 'cursor': {'default': None, 'description': 'Set `cursor` to `next_cursor` returned by the previous call to list items in the next page. ', 'title': 'Cursor', 'type': 'string'}}, title='ListAllTeamsInAnEnterpriseOrganizationRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='ListAllTeamsInAnEnterpriseOrganizationResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['admin.teams', 'admin'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='List All Teams On An Enterprise Organization'), ActionModel(name='SLACK_LIST_SCHEDULED_MESSAGES_IN_A_CHANNEL', display_name='List scheduled messages in a channel', parameters=ActionParametersModel(properties={'channel': {'default': None, 'description': 'The channel of the scheduled messages', 'title': 'Channel', 'type': 'string'}, 'latest': {'default': None, 'description': 'A UNIX timestamp of the latest value in the time range', 'title': 'Latest', 'type': 'integer'}, 'oldest': {'default': None, 'description': 'A UNIX timestamp of the oldest value in the time range', 'title': 'Oldest', 'type': 'integer'}, 'limit': {'default': None, 'description': 'Maximum number of original entries to return.', 'title': 'Limit', 'type': 'integer'}, 'cursor': {'default': None, 'description': 'For pagination purposes, this is the `cursor` value returned from a previous call to `chat.scheduledmessages.list` indicating where you want to start this call from. ', 'title': 'Cursor', 'type': 'string'}}, title='ListScheduledMessagesInAChannelRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='ListScheduledMessagesInAChannelResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['chat.scheduledMessages', 'chat'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Returns A List Of Scheduled Messages.'), ActionModel(name='SLACK_ARCHIVE_A_PUBLIC_OR_PRIVATE_CHANNEL', display_name='Archive a public or private channel', parameters=ActionParametersModel(properties={'channel_id': {'description': 'The channel to archive.', 'title': 'Channel Id', 'type': 'string'}}, title='ArchiveAPublicOrPrivateChannelRequest', type='object', required=['channel_id']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='ArchiveAPublicOrPrivateChannelResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['admin.conversations', 'admin'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Archive A Public Or Private Channel.'), ActionModel(name='SLACK_RENAME_A_SLACK_CHANNEL', display_name='Rename a slack channel', parameters=ActionParametersModel(properties={'channel_id': {'description': 'The channel to rename.', 'title': 'Channel Id', 'type': 'string'}, 'name': {'description': 'Name', 'title': 'Name', 'type': 'string'}}, title='RenameASlackChannelRequest', type='object', required=['channel_id', 'name']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='RenameASlackChannelResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['admin.conversations', 'admin'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Rename A Public Or Private Channel.'), ActionModel(name='SLACK_LEAVE_A_CONVERSATION', display_name='Leave a conversation', parameters=ActionParametersModel(properties={'channel': {'default': None, 'description': 'Conversation to leave', 'title': 'Channel', 'type': 'string'}}, title='LeaveAConversationRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='LeaveAConversationResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['conversations'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Leaves A Conversation.'), ActionModel(name='SLACK_UPDATES_AN_EXISTING_REMOTE_FILE', display_name='Updates an existing remote file', parameters=ActionParametersModel(properties={'title': {'default': None, 'description': 'Title of the file being shared.', 'title': 'Title', 'type': 'string'}, 'external_id': {'default': None, 'description': 'Creator defined GUID for the file.', 'title': 'External Id', 'type': 'string'}, 'external_url': {'default': None, 'description': 'URL of the remote file.', 'title': 'External Url', 'type': 'string'}, 'file': {'default': None, 'description': 'Specify a file by providing its ID.', 'title': 'File', 'type': 'string'}, 'filetype': {'default': None, 'description': 'type of file', 'title': 'Filetype', 'type': 'string'}, 'indexable_file_contents': {'default': None, 'description': 'File containing contents that can be used to improve searchability for the remote file. ', 'title': 'Indexable File Contents', 'type': 'string'}, 'preview_image': {'default': None, 'description': 'Preview of the document via `multipart/form-data`.', 'title': 'Preview Image', 'type': 'string'}, 'token': {'default': None, 'description': 'Authentication token. Requires scope: `remote_files:write`', 'title': 'Token', 'type': 'string'}}, title='UpdatesAnExistingRemoteFileRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='UpdatesAnExistingRemoteFileResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['files.remote', 'files'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Updates An Existing Remote File.'), ActionModel(name='SLACK_SET_WORKSPACE_ICON', display_name='Set workspace icon', parameters=ActionParametersModel(properties={'image_url': {'description': 'Image URL for the icon', 'title': 'Image Url', 'type': 'string'}, 'team_id': {'description': 'ID for the workspace to set the icon for.', 'title': 'Team Id', 'type': 'string'}, 'token': {'description': 'Authentication token. Requires scope: `admin.teams:write`', 'title': 'Token', 'type': 'string'}}, title='SetWorkspaceIconRequest', type='object', required=['image_url', 'team_id', 'token']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='SetWorkspaceIconResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['admin.teams.settings', 'admin'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Sets The Icon Of A Workspace.'), ActionModel(name='SLACK_SET_SLACK_USER_PROFILE_INFORMATION', display_name='Set slack user profile information', parameters=ActionParametersModel(properties={'name': {'default': None, 'description': 'Name of a single key to set. Usable only if `profile` is not passed.', 'title': 'Name', 'type': 'string'}, 'profile': {'default': None, 'description': 'Collection of key:value pairs presented as a URL-encoded JSON hash. At most 50 fields may be set. Each field name is limited to 255 characters. ', 'title': 'Profile', 'type': 'string'}, 'user': {'default': None, 'description': 'ID of user to change. This argument may only be specified by team admins on paid teams. ', 'title': 'User', 'type': 'string'}, 'value': {'default': None, 'description': 'Value to set a single key to. Usable only if `profile` is not passed.', 'title': 'Value', 'type': 'string'}}, title='SetSlackUserProfileInformationRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='SetSlackUserProfileInformationResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['users.profile', 'users'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Set The Profile Information For A User.'), ActionModel(name='SLACK_INVITE_USER_TO_CHANNEL', display_name='Invite user to channel', parameters=ActionParametersModel(properties={'channel_id': {'description': 'The channel that the users will be invited to.', 'title': 'Channel Id', 'type': 'string'}, 'user_ids': {'description': 'The users to invite.', 'title': 'User Ids', 'type': 'string'}}, title='InviteUserToChannelRequest', type='object', required=['channel_id', 'user_ids']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='InviteUserToChannelResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['admin.conversations', 'admin'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Invite A User To A Public Or Private Channel.'), ActionModel(name='SLACK_REMOVE_A_USER_FROM_A_CONVERSATION', display_name='Remove a user from a conversation', parameters=ActionParametersModel(properties={'channel': {'default': None, 'description': 'ID of conversation to remove user from.', 'title': 'Channel', 'type': 'string'}, 'user': {'default': None, 'description': 'User ID to be removed.', 'title': 'User', 'type': 'string'}}, title='RemoveAUserFromAConversationRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='RemoveAUserFromAConversationResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['conversations'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Removes A User From A Conversation.'), ActionModel(name='SLACK_INVITE_USERS_TO_A_SLACK_CHANNEL', display_name='Invite users to a slack channel', parameters=ActionParametersModel(properties={'channel': {'default': None, 'description': 'The ID of the public or private channel to invite user(s) to.', 'title': 'Channel', 'type': 'string'}, 'users': {'default': None, 'description': 'A comma separated list of user IDs. Up to 1000 users may be listed.', 'title': 'Users', 'type': 'string'}}, title='InviteUsersToASlackChannelRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='InviteUsersToASlackChannelResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['conversations'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Invites Users To A Channel.'), ActionModel(name='SLACK_MARK_A_USER_AS_ACTIVE_DEPRECATED', display_name='Mark a user as active  deprecated', parameters=ActionParametersModel(properties={}, title='MarkAUserAsActiveDeprecatedRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='MarkAUserAsActiveDeprecatedResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['users'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Marked A User As Active. Deprecated And Non Functional.'), ActionModel(name='SLACK_LIST_APPROVED_WORKSPACE_INVITE_REQUESTS', display_name='List approved workspace invite requests', parameters=ActionParametersModel(properties={'team_id': {'default': None, 'description': 'ID for the workspace where the invite requests were made.', 'title': 'Team Id', 'type': 'string'}, 'cursor': {'default': None, 'description': 'Value of the `next_cursor` field sent as part of the previous API response ', 'title': 'Cursor', 'type': 'string'}, 'limit': {'default': None, 'description': 'The number of results that will be returned by the API on each invocation. Must be between 1 - 1000, both inclusive ', 'title': 'Limit', 'type': 'integer'}}, title='ListApprovedWorkspaceInviteRequestsRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='ListApprovedWorkspaceInviteRequestsResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['admin.inviteRequests.approved', 'admin'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='List All Approved Workspace Invite Requests.'), ActionModel(name='SLACK_OPEN_A_VIEW_FOR_A_SLACK_USER', display_name='Open a view for a slack user', parameters=ActionParametersModel(properties={'trigger_id': {'description': 'Exchange a trigger to post to the user.', 'title': 'Trigger Id', 'type': 'string'}, 'view': {'description': 'A [view payload](https://slack.dev). This must be a JSON-encoded string.', 'title': 'View', 'type': 'string'}}, title='OpenAViewForASlackUserRequest', type='object', required=['trigger_id', 'view']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='OpenAViewForASlackUserResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['views'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Open A View For A User.'), ActionModel(name='SLACK_PINS_AN_ITEM_TO_A_CHANNEL', display_name='Pins an item to a channel', parameters=ActionParametersModel(properties={'channel': {'description': 'Channel to pin the item in.', 'title': 'Channel', 'type': 'string'}, 'timestamp': {'default': None, 'description': 'Timestamp of the message to pin.', 'title': 'Timestamp', 'type': 'string'}}, title='PinsAnItemToAChannelRequest', type='object', required=['channel']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='PinsAnItemToAChannelResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['pins'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Pins An Item To A Channel.'), ActionModel(name='SLACK_REMOVE_CHANNELS_FROM_IDP_GROUP', display_name='Remove channels from idp group', parameters=ActionParametersModel(properties={'channel_ids': {'description': 'Comma-separated string of channel IDs', 'title': 'Channel Ids', 'type': 'string'}, 'usergroup_id': {'description': 'ID of the IDP Group', 'title': 'Usergroup Id', 'type': 'string'}}, title='RemoveChannelsFromIdpGroupRequest', type='object', required=['channel_ids', 'usergroup_id']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='RemoveChannelsFromIdpGroupResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['admin.usergroups', 'admin'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Remove One Or More Default Channels From An Org Level Idp Group (User Group).'), ActionModel(name='SLACK_DISABLE_AN_EXISTING_SLACK_USER_GROUP', display_name='Disable an existing slack user group', parameters=ActionParametersModel(properties={'include_count': {'default': None, 'description': 'Include the number of users in the User Group.', 'title': 'Include Count', 'type': 'boolean'}, 'usergroup': {'description': 'The encoded ID of the User Group to disable.', 'title': 'Usergroup', 'type': 'string'}}, title='DisableAnExistingSlackUserGroupRequest', type='object', required=['usergroup']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='DisableAnExistingSlackUserGroupResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['usergroups'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Disable An Existing User Group'), ActionModel(name='SLACK_CREATE_CHANNEL_BASED_CONVERSATION', display_name='Create channel based conversation', parameters=ActionParametersModel(properties={'description': {'default': None, 'description': 'Description of the public or private channel to create.', 'title': 'Description', 'type': 'string'}, 'is_private': {'description': 'When `true`, creates a private channel instead of a public channel', 'title': 'Is Private', 'type': 'boolean'}, 'name': {'description': 'Name of the public or private channel to create.', 'title': 'Name', 'type': 'string'}, 'org_wide': {'default': None, 'description': 'When `true`, the channel will be available org-wide. Note: if the channel is not `org_wide=true`, you must specify a `team_id` for this channel ', 'title': 'Org Wide', 'type': 'boolean'}, 'team_id': {'default': None, 'description': 'The workspace to create the channel in. Note: this argument is required unless you set `org_wide=true`. ', 'title': 'Team Id', 'type': 'string'}}, title='CreateChannelBasedConversationRequest', type='object', required=['is_private', 'name']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='CreateChannelBasedConversationResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['admin.conversations', 'admin'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Create A Public Or Private Channel Based Conversation.'), ActionModel(name='SLACK_RETRIEVE_CONVERSATION_INFORMATION', display_name='Retrieve conversation information', parameters=ActionParametersModel(properties={'channel': {'default': None, 'description': 'Conversation ID to learn more about', 'title': 'Channel', 'type': 'string'}, 'include_locale': {'default': None, 'description': 'Set this to `true` to receive the locale for this conversation. Defaults to `false` ', 'title': 'Include Locale', 'type': 'boolean'}, 'include_num_members': {'default': None, 'description': 'Set to `true` to include the member count for the specified conversation. Defaults to `false` ', 'title': 'Include Num Members', 'type': 'boolean'}}, title='RetrieveConversationInformationRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='RetrieveConversationInformationResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['conversations'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Retrieve Information About A Conversation.'), ActionModel(name='SLACK_REMINDERS_ADD', display_name='Create a reminder', parameters=ActionParametersModel(properties={'text': {'description': 'The content of the reminder', 'title': 'Text', 'type': 'string'}, 'time': {'description': 'When this reminder should happen: the Unix timestamp (up to five years from now), the number of seconds until the reminder (if within 24 hours), or a natural language description (Ex. \"in 15 minutes,\" or \"every Thursday\") ', 'title': 'Time', 'type': 'string'}, 'user': {'default': None, 'description': 'The user who will receive the reminder. If no user is specified, the reminder will go to user who created it. ', 'title': 'User', 'type': 'string'}}, title='CreateAReminderRequest', type='object', required=['text', 'time']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='CreateAReminderResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=[], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Creates A Reminder.<<DEPRECATED use create_a_reminder>>'), ActionModel(name='SLACK_CONVERT_PUBLIC_CHANNEL_TO_PRIVATE', display_name='Convert public channel to private', parameters=ActionParametersModel(properties={'channel_id': {'description': 'The channel to convert to private.', 'title': 'Channel Id', 'type': 'string'}}, title='ConvertPublicChannelToPrivateRequest', type='object', required=['channel_id']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='ConvertPublicChannelToPrivateResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['admin.conversations', 'admin'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Convert A Public Channel To A Private Channel.'), ActionModel(name='SLACK_USERS_LOOKUP_BY_EMAIL', display_name='Find user by email address', parameters=ActionParametersModel(properties={'email': {'description': 'An email address belonging to a user in the workspace', 'title': 'Email', 'type': 'string'}}, title='FindUserByEmailAddressRequest', type='object', required=['email']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='FindUserByEmailAddressResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=[], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Find A User With An Email Address.<<DEPRECATED use find_user_by_email_address>>'), ActionModel(name='SLACK_LIST_ACCESSIBLE_CONVERSATIONS_FOR_A_USER', display_name='List accessible conversations for a user', parameters=ActionParametersModel(properties={'user': {'default': None, 'description': 'Browse conversations by a specific user ID\"s membership. Non-public channels are restricted to those where the calling user shares membership. ', 'title': 'User', 'type': 'string'}, 'types': {'default': None, 'description': 'Mix and match channel types by providing a comma-separated list of any combination of `public_channel`, `private_channel`, `mpim`, `im` ', 'title': 'Types', 'type': 'string'}, 'exclude_archived': {'default': None, 'description': 'Set to `true` to exclude archived channels from the list', 'title': 'Exclude Archived', 'type': 'boolean'}, 'limit': {'default': None, 'description': 'The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the list hasn\"t been reached. Must be an integer no larger than 1000. ', 'title': 'Limit', 'type': 'integer'}, 'cursor': {'default': None, 'description': 'Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request\"s `response_metadata`. Default value fetches the first \"page\" of the collection. See [pagination](https://slack.dev) for more detail. ', 'title': 'Cursor', 'type': 'string'}}, title='ListAccessibleConversationsForAUserRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='ListAccessibleConversationsForAUserResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['users'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='List Conversations The Calling User May Access.'), ActionModel(name='SLACK_FETCH_CURRENT_TEAM_INFO_WITH_OPTIONAL_TEAM_SCOPE', display_name='Fetch current team info with optional team scope', parameters=ActionParametersModel(properties={'team': {'default': None, 'description': 'Team to get info on, if omitted, will return information about the current team. Will only return team that the authenticated token is allowed to see through external shared channels ', 'title': 'Team', 'type': 'string'}}, title='FetchCurrentTeamInfoWithOptionalTeamScopeRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='FetchCurrentTeamInfoWithOptionalTeamScopeResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['team'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Gets Information About The Current Team.'), ActionModel(name='SLACK_SET_WORKSPACE_DESCRIPTION', display_name='Set workspace description', parameters=ActionParametersModel(properties={'description': {'description': 'The new description for the workspace.', 'title': 'Description', 'type': 'string'}, 'team_id': {'description': 'ID for the workspace to set the description for.', 'title': 'Team Id', 'type': 'string'}}, title='SetWorkspaceDescriptionRequest', type='object', required=['description', 'team_id']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='SetWorkspaceDescriptionResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['admin.teams.settings', 'admin'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Set The Description Of A Given Workspace.'), ActionModel(name='SLACK_ADD_REACTION_TO_AN_ITEM', display_name='Add reaction to an item', parameters=ActionParametersModel(properties={'channel': {'description': 'Channel where the message to add reaction to was posted.', 'title': 'Channel', 'type': 'string'}, 'name': {'description': 'Reaction (emoji) name.', 'title': 'Name', 'type': 'string'}, 'timestamp': {'description': 'Timestamp of the message to add reaction to.', 'title': 'Timestamp', 'type': 'string'}}, title='AddReactionToAnItemRequest', type='object', required=['channel', 'name', 'timestamp']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='AddReactionToAnItemResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['reactions', 'important'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Adds A Reaction To An Item.'), ActionModel(name='SLACK_EXCHANGE_OAUTH_VERIFIER_FOR_ACCESS_TOKEN', display_name='Exchange oauth verifier for access token', parameters=ActionParametersModel(properties={'client_id': {'default': None, 'description': 'Issued when you created your application.', 'title': 'Client Id', 'type': 'string'}, 'client_secret': {'default': None, 'description': 'Issued when you created your application.', 'title': 'Client Secret', 'type': 'string'}, 'code': {'description': 'The `code` param returned via the OAuth callback.', 'title': 'Code', 'type': 'string'}, 'redirect_uri': {'default': None, 'description': 'This must match the originally submitted URI (if one was sent).', 'title': 'Redirect Uri', 'type': 'string'}}, title='ExchangeOauthVerifierForAccessTokenRequest', type='object', required=['code']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='ExchangeOauthVerifierForAccessTokenResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['oauth.v2', 'oauth'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Exchanges A Temporary O Auth Verifier Code For An Access Token.'), ActionModel(name='SLACK_REGISTERS_NEW_CALL_PARTICIPANTS', display_name='Registers new call participants', parameters=ActionParametersModel(properties={'id': {'description': '`id` returned by the [`calls.add`](https://slack.dev) method.', 'title': 'Id', 'type': 'string'}, 'users': {'description': 'The list of users to add as participants in the Call. [Read more on how to specify users here](https://slack.dev). ', 'title': 'Users', 'type': 'string'}}, title='RegistersNewCallParticipantsRequest', type='object', required=['id', 'users']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='RegistersNewCallParticipantsResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['calls.participants', 'calls'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Registers New Participants Added To A Call.'), ActionModel(name='SLACK_CUSTOMIZE_URL_UNFURLING_IN_MESSAGES', display_name='Customize url unfurling in messages', parameters=ActionParametersModel(properties={'channel': {'description': 'Channel ID of the message', 'title': 'Channel', 'type': 'string'}, 'ts': {'description': 'Timestamp of the message to add unfurl behavior to.', 'title': 'Ts', 'type': 'string'}, 'unfurls': {'default': None, 'description': 'URL-encoded JSON map with keys set to URLs featured in the the message, pointing to their unfurl blocks or message attachments. ', 'title': 'Unfurls', 'type': 'string'}, 'user_auth_message': {'default': None, 'description': 'Provide a simply-formatted string to send as an ephemeral message to the user as invitation to authenticate further and enable full unfurling behavior ', 'title': 'User Auth Message', 'type': 'string'}, 'user_auth_required': {'default': None, 'description': 'Set to `true` or `1` to indicate the user must install your Slack app to trigger unfurls for this domain ', 'title': 'User Auth Required', 'type': 'boolean'}, 'user_auth_url': {'default': None, 'description': 'Send users to this custom URL where they will complete authentication in your app to fully trigger unfurling. Value should be properly URL-encoded. ', 'title': 'User Auth Url', 'type': 'string'}}, title='CustomizeUrlUnfurlingInMessagesRequest', type='object', required=['channel', 'ts']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='CustomizeUrlUnfurlingInMessagesResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['chat'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Provide Custom Unfurl Behavior For User Posted Ur Ls'), ActionModel(name='SLACK_PUBLISH_STATIC_VIEW_FOR_USER', display_name='Publish static view for user', parameters=ActionParametersModel(properties={'user_id': {'description': '`id` of the user you want publish a view to.', 'title': 'User Id', 'type': 'string'}, 'view': {'description': 'A [view payload](https://slack.dev). This must be a JSON-encoded string.', 'title': 'View', 'type': 'string'}, 'hash': {'default': None, 'description': 'A string that represents view state to protect against possible race conditions. ', 'title': 'Hash', 'type': 'string'}}, title='PublishStaticViewForUserRequest', type='object', required=['user_id', 'view']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='PublishStaticViewForUserResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['views'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Publish A Static View For A User.'), ActionModel(name='SLACK_MAP_USER_IDS_FOR_ENTERPRISE_GRID_WORKSPACES', display_name='Map user ids for enterprise grid workspaces', parameters=ActionParametersModel(properties={'users': {'description': 'A comma-separated list of user ids, up to 400 per request', 'title': 'Users', 'type': 'string'}, 'team_id': {'default': None, 'description': 'Specify team_id starts with `T` in case of Org Token', 'title': 'Team Id', 'type': 'string'}, 'to_old': {'default': None, 'description': 'Specify `true` to convert `W` global user IDs to workspace-specific `U` IDs. Defaults to `false`. ', 'title': 'To Old', 'type': 'boolean'}}, title='MapUserIdsForEnterpriseGridWorkspacesRequest', type='object', required=['users']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='MapUserIdsForEnterpriseGridWorkspacesResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['migration'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='For Enterprise Grid Workspaces, Map Local User I Ds To Global User I Ds'), ActionModel(name='SLACK_SHARE_A_ME_MESSAGE_IN_A_CHANNEL', display_name='Share a me message in a channel', parameters=ActionParametersModel(properties={'channel': {'default': None, 'description': 'Channel to send message to. Can be a public channel, private group or IM channel. Can be an encoded ID, or a name. ', 'title': 'Channel', 'type': 'string'}, 'text': {'default': None, 'description': 'Text of the message to send.', 'title': 'Text', 'type': 'string'}}, title='ShareAMeMessageInAChannelRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='ShareAMeMessageInAChannelResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['chat'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Share A Me Message Into A Channel.'), ActionModel(name='SLACK_APPS_PERMISSIONS_SCOPES_GET_LIST', display_name='List app permissions scopes on a team', parameters=ActionParametersModel(properties={}, title='ListAppPermissionsScopesOnATeamRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='ListAppPermissionsScopesOnATeamResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=[], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Returns List Of Scopes This App Has On A Team.<<DEPRECATED use list_app_permissions_scopes_on_a_team>>'), ActionModel(name='SLACK_CREATE_AN_ENTERPRISE_TEAM', display_name='Create an enterprise team', parameters=ActionParametersModel(properties={'team_description': {'default': None, 'description': 'Description for the team.', 'title': 'Team Description', 'type': 'string'}, 'team_discoverability': {'default': None, 'description': 'Who can join the team. A team\"s discoverability can be `open`, `closed`, `invite_only`, or `unlisted`. ', 'title': 'Team Discoverability', 'type': 'string'}, 'team_domain': {'description': 'Team domain (for example, slacksoftballteam).', 'title': 'Team Domain', 'type': 'string'}, 'team_name': {'description': 'Team name (for example, Slack Softball Team).', 'title': 'Team Name', 'type': 'string'}}, title='CreateAnEnterpriseTeamRequest', type='object', required=['team_domain', 'team_name']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='CreateAnEnterpriseTeamResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['admin.teams', 'admin'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Create An Enterprise Team.'), ActionModel(name='SLACK_APPS_PERMISSIONS_LIST_PERMISSIONS', display_name='List app permissions on a team', parameters=ActionParametersModel(properties={}, title='ListAppPermissionsOnATeamRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='ListAppPermissionsOnATeamResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=[], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Returns List Of Permissions This App Has On A Team.<<DEPRECATED use list_app_permissions_on_a_team>>'), ActionModel(name='SLACK_GET_CHANNEL_S_CONNECTED_WORKSPACES_IN_ENTERPRISE', display_name='Get channel s connected workspaces in enterprise', parameters=ActionParametersModel(properties={'channel_id': {'description': 'The channel to determine connected workspaces within the organization for. ', 'title': 'Channel Id', 'type': 'string'}, 'cursor': {'default': None, 'description': 'Set `cursor` to `next_cursor` returned by the previous call to list items in the next page ', 'title': 'Cursor', 'type': 'string'}, 'limit': {'default': None, 'description': 'The maximum number of items to return. Must be between 1 - 1000 both inclusive. ', 'title': 'Limit', 'type': 'integer'}}, title='GetChannelSConnectedWorkspacesInEnterpriseRequest', type='object', required=['channel_id']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='GetChannelSConnectedWorkspacesInEnterpriseResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['admin.conversations', 'admin'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Get All The Workspaces A Given Public Or Private Channel Is Connected To Within This Enterprise Org.'), ActionModel(name='SLACK_INVITE_USER_TO_WORKSPACE_WITH_OPTIONAL_CHANNEL_INVITES', display_name='Invite user to workspace with optional channel invites', parameters=ActionParametersModel(properties={'channel_ids': {'description': 'A comma-separated list of `channel_id`s for this user to join. At least one channel is required. ', 'title': 'Channel Ids', 'type': 'string'}, 'custom_message': {'default': None, 'description': 'An optional message to send to the user in the invite email.', 'title': 'Custom Message', 'type': 'string'}, 'email': {'description': 'The email address of the person to invite.', 'title': 'Email', 'type': 'string'}, 'guest_expiration_ts': {'default': None, 'description': 'Timestamp when guest account should be disabled. Only include this timestamp if you are inviting a guest user and you want their account to expire on a certain date. ', 'title': 'Guest Expiration Ts', 'type': 'string'}, 'is_restricted': {'default': None, 'description': 'Is this user a multi-channel guest user? (default: false)', 'title': 'Is Restricted', 'type': 'boolean'}, 'is_ultra_restricted': {'default': None, 'description': 'Is this user a single channel guest user? (default: false)', 'title': 'Is Ultra Restricted', 'type': 'boolean'}, 'real_name': {'default': None, 'description': 'Full name of the user.', 'title': 'Real Name', 'type': 'string'}, 'resend': {'default': None, 'description': 'Allow this invite to be resent in the future if a user has not signed up yet. (default: false) ', 'title': 'Resend', 'type': 'boolean'}, 'team_id': {'description': 'The ID (`T1234`) of the workspace.', 'title': 'Team Id', 'type': 'string'}}, title='InviteUserToWorkspaceWithOptionalChannelInvitesRequest', type='object', required=['channel_ids', 'email', 'team_id']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='InviteUserToWorkspaceWithOptionalChannelInvitesResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['admin.users', 'admin'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Invite A User To A Workspace.'), ActionModel(name='SLACK_USERS_PROFILE_GET_PROFILE_INFO', display_name='Retrieve user profile information', parameters=ActionParametersModel(properties={'include_labels': {'default': None, 'description': 'Include labels for each ID in custom profile fields', 'title': 'Include Labels', 'type': 'boolean'}, 'user': {'default': None, 'description': 'User to retrieve profile info for', 'title': 'User', 'type': 'string'}}, title='RetrieveUserProfileInformationRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='RetrieveUserProfileInformationResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=[], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description=\"Retrieves A User's Profile Information.<<DEPRECATED use retrieve_user_profile_information>>\"), ActionModel(name='SLACK_SET_USER_TO_REGULAR_STATUS', display_name='Set user to regular status', parameters=ActionParametersModel(properties={'team_id': {'description': 'The ID (`T1234`) of the workspace.', 'title': 'Team Id', 'type': 'string'}, 'user_id': {'description': 'The ID of the user to designate as a regular user.', 'title': 'User Id', 'type': 'string'}}, title='SetUserToRegularStatusRequest', type='object', required=['team_id', 'user_id']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='SetUserToRegularStatusResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['admin.users', 'admin'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Set An Existing Guest User, Admin User, Or Owner To Be A Regular User.'), ActionModel(name='SLACK_RETRIEVE_A_USER_S_IDENTITY_DETAILS', display_name='Retrieve a user s identity details', parameters=ActionParametersModel(properties={}, title='RetrieveAUserSIdentityDetailsRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='RetrieveAUserSIdentityDetailsResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['users'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description=\"Get A User's Identity.\"), ActionModel(name='SLACK_GET_CURRENT_TEAM_INTEGRATION_LOGS', display_name='Get current team integration logs', parameters=ActionParametersModel(properties={'app_id': {'default': None, 'description': 'Filter logs to this Slack app. Defaults to all logs.', 'title': 'App Id', 'type': 'string'}, 'change_type': {'default': None, 'description': 'Filter logs with this change type. Defaults to all logs.', 'title': 'Change Type', 'type': 'string'}, 'count': {'default': None, 'description': 'Count', 'title': 'Count', 'type': 'string'}, 'page': {'default': None, 'description': 'Page', 'title': 'Page', 'type': 'string'}, 'service_id': {'default': None, 'description': 'Filter logs to this service. Defaults to all logs.', 'title': 'Service Id', 'type': 'string'}, 'user': {'default': None, 'description': 'Filter logs generated by this user\u2019s actions. Defaults to all logs.', 'title': 'User', 'type': 'string'}}, title='GetCurrentTeamIntegrationLogsRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='GetCurrentTeamIntegrationLogsResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['team'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Gets The Integration Logs For The Current Team.'), ActionModel(name='SLACK_LIST_ALL_USERS_IN_A_USER_GROUP', display_name='List all users in a user group', parameters=ActionParametersModel(properties={'include_disabled': {'default': None, 'description': 'Allow results that involve disabled User Groups.', 'title': 'Include Disabled', 'type': 'boolean'}, 'usergroup': {'description': 'The encoded ID of the User Group to update.', 'title': 'Usergroup', 'type': 'string'}}, title='ListAllUsersInAUserGroupRequest', type='object', required=['usergroup']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='ListAllUsersInAUserGroupResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['usergroups.users', 'usergroups'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='List All Users In A User Group'), ActionModel(name='SLACK_DENY_WORKSPACE_INVITE_REQUEST', display_name='Deny workspace invite request', parameters=ActionParametersModel(properties={'invite_request_id': {'description': 'ID of the request to invite.', 'title': 'Invite Request Id', 'type': 'string'}, 'team_id': {'default': None, 'description': 'ID for the workspace where the invite request was made.', 'title': 'Team Id', 'type': 'string'}}, title='DenyWorkspaceInviteRequestRequest', type='object', required=['invite_request_id']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='DenyWorkspaceInviteRequestResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['admin.inviteRequests', 'admin'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Deny A Workspace Invite Request.'), ActionModel(name='SLACK_ENABLE_PUBLIC_SHARING_OF_A_FILE', display_name='Enable public sharing of a file', parameters=ActionParametersModel(properties={'file': {'default': None, 'description': 'File to share', 'title': 'File', 'type': 'string'}}, title='EnablePublicSharingOfAFileRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='EnablePublicSharingOfAFileResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['files'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Enables A File For Public/External Sharing.'), ActionModel(name='SLACK_WIPE_USER_SESSIONS_ACROSS_DEVICES', display_name='Wipe user sessions across devices', parameters=ActionParametersModel(properties={'mobile_only': {'default': None, 'description': 'Only expire mobile sessions (default: false)', 'title': 'Mobile Only', 'type': 'boolean'}, 'user_id': {'description': 'The ID of the user to wipe sessions for', 'title': 'User Id', 'type': 'string'}, 'web_only': {'default': None, 'description': 'Only expire web sessions (default: false)', 'title': 'Web Only', 'type': 'boolean'}}, title='WipeUserSessionsAcrossDevicesRequest', type='object', required=['user_id']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='WipeUserSessionsAcrossDevicesResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['admin.users.session', 'admin'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Wipes All Valid Sessions On All Devices For A Given User'), ActionModel(name='SLACK_CONVERSATIONS_HISTORY', display_name='Fetch conversation history', parameters=ActionParametersModel(properties={'channel': {'default': None, 'description': 'Conversation ID to fetch history for.', 'title': 'Channel', 'type': 'string'}, 'latest': {'default': None, 'description': 'End of time range of messages to include in results.', 'title': 'Latest', 'type': 'integer'}, 'oldest': {'default': None, 'description': 'Start of time range of messages to include in results.', 'title': 'Oldest', 'type': 'integer'}, 'inclusive': {'default': None, 'description': 'Include messages with latest or oldest timestamp in results only when either timestamp is specified. ', 'title': 'Inclusive', 'type': 'boolean'}, 'limit': {'default': None, 'description': 'The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the users list hasn\"t been reached. ', 'title': 'Limit', 'type': 'integer'}, 'cursor': {'default': None, 'description': 'Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request\"s `response_metadata`. Default value fetches the first \"page\" of the collection. See [pagination](https://slack.dev) for more detail. ', 'title': 'Cursor', 'type': 'string'}}, title='FetchConversationHistoryRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='FetchConversationHistoryResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=[], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description=\"Fetches A Conversation's History Of Messages And Events.<<DEPRECATED use fetch_conversation_history>>\"), ActionModel(name='SLACK_INDICATE_WORKFLOW_STEP_FAILURE', display_name='Indicate workflow step failure', parameters=ActionParametersModel(properties={'workflow_step_execute_id': {'description': 'Context identifier that maps to the correct workflow step execution.', 'title': 'Workflow Step Execute Id', 'type': 'string'}, 'error': {'description': 'A JSON-based object with a `message` property that should contain a human readable error message. ', 'title': 'Error', 'type': 'string'}}, title='IndicateWorkflowStepFailureRequest', type='object', required=['workflow_step_execute_id', 'error']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='IndicateWorkflowStepFailureResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['workflows'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description=\"Indicate That An App's Step In A Workflow Failed To Execute.\"), ActionModel(name='SLACK_RETRIEVE_TEAM_PROFILE_DETAILS', display_name='Retrieve team profile details', parameters=ActionParametersModel(properties={'visibility': {'default': None, 'description': 'Filter by visibility.', 'title': 'Visibility', 'type': 'string'}}, title='RetrieveTeamProfileDetailsRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='RetrieveTeamProfileDetailsResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['team.profile', 'team'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description=\"Retrieve A Team's Profile.\"), ActionModel(name='SLACK_PROMOTE_USER_TO_WORKSPACE_OWNER', display_name='Promote user to workspace owner', parameters=ActionParametersModel(properties={'team_id': {'description': 'The ID (`T1234`) of the workspace.', 'title': 'Team Id', 'type': 'string'}, 'user_id': {'description': 'Id of the user to promote to owner.', 'title': 'User Id', 'type': 'string'}}, title='PromoteUserToWorkspaceOwnerRequest', type='object', required=['team_id', 'user_id']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='PromoteUserToWorkspaceOwnerResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['admin.users', 'admin'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Set An Existing Guest, Regular User, Or Admin User To Be A Workspace Owner.'), ActionModel(name='SLACK_UNARCHIVE_A_PUBLIC_OR_PRIVATE_CHANNEL', display_name='Unarchive a public or private channel', parameters=ActionParametersModel(properties={'channel_id': {'description': 'The channel to unarchive.', 'title': 'Channel Id', 'type': 'string'}}, title='UnarchiveAPublicOrPrivateChannelRequest', type='object', required=['channel_id']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='UnarchiveAPublicOrPrivateChannelResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['admin.conversations', 'admin'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Unarchive A Public Or Private Channel.'), ActionModel(name='SLACK_USERS_INFO', display_name='Retrieve detailed user information', parameters=ActionParametersModel(properties={'include_locale': {'default': None, 'description': 'Set this to `true` to receive the locale for this user. Defaults to `false` ', 'title': 'Include Locale', 'type': 'boolean'}, 'user': {'default': None, 'description': 'User to get info on', 'title': 'User', 'type': 'string'}}, title='RetrieveDetailedUserInformationRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='RetrieveDetailedUserInformationResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=[], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Gets Information About A User.<<DEPRECATED use retrieve_detailed_user_information>>'), ActionModel(name='SLACK_FETCH_ITEM_REACTIONS', display_name='Fetch item reactions', parameters=ActionParametersModel(properties={'channel': {'default': None, 'description': 'Channel where the message to get reactions for was posted.', 'title': 'Channel', 'type': 'string'}, 'file': {'default': None, 'description': 'File to get reactions for.', 'title': 'File', 'type': 'string'}, 'file_comment': {'default': None, 'description': 'File comment to get reactions for.', 'title': 'File Comment', 'type': 'string'}, 'full': {'default': None, 'description': 'If true always return the complete reaction list.', 'title': 'Full', 'type': 'boolean'}, 'timestamp': {'default': None, 'description': 'Timestamp of the message to get reactions for.', 'title': 'Timestamp', 'type': 'string'}}, title='FetchItemReactionsRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='FetchItemReactionsResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['reactions'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Gets Reactions For An Item.'), ActionModel(name='SLACK_LIST_DISCONNECTED_CHANNELS_WITH_ORIGINAL_IDS_FOR_EKM', display_name='List disconnected channels with original ids for ekm', parameters=ActionParametersModel(properties={'channel_ids': {'default': None, 'description': 'A comma-separated list of channels to filter to.', 'title': 'Channel Ids', 'type': 'string'}, 'team_ids': {'default': None, 'description': 'A comma-separated list of the workspaces to which the channels you would like returned belong. ', 'title': 'Team Ids', 'type': 'string'}, 'limit': {'default': None, 'description': 'The maximum number of items to return. Must be between 1 - 1000 both inclusive. ', 'title': 'Limit', 'type': 'integer'}, 'cursor': {'default': None, 'description': 'Set `cursor` to `next_cursor` returned by the previous call to list items in the next page. ', 'title': 'Cursor', 'type': 'string'}}, title='ListDisconnectedChannelsWithOriginalIdsForEkmRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='ListDisconnectedChannelsWithOriginalIdsForEkmResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['admin.conversations.ekm', 'admin'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='List All Disconnected Channels\u2014I.E., Channels That Were Once Connected To Other Workspaces And Then Disconnected\u2014And The Corresponding Original Channel I Ds For Key Revocation With Ekm.'), ActionModel(name='SLACK_CHECKS_API_CALL_AND_RETURNS_SUCCESS_OR_ERROR', display_name='Checks api call and returns success or error', parameters=ActionParametersModel(properties={'error': {'default': None, 'description': 'Error response to return', 'title': 'Error', 'type': 'string'}, 'foo': {'default': None, 'description': 'example property to return', 'title': 'Foo', 'type': 'string'}}, title='ChecksApiCallAndReturnsSuccessOrErrorRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='ChecksApiCallAndReturnsSuccessOrErrorResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['api'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Checks Api Calling Code.'), ActionModel(name='SLACK_GET_CURRENT_TEAM_S_ACCESS_LOGS', display_name='Get current team s access logs', parameters=ActionParametersModel(properties={'before': {'default': None, 'description': 'End of time range of logs to include in results (inclusive).', 'title': 'Before', 'type': 'string'}, 'count': {'default': None, 'description': 'Count', 'title': 'Count', 'type': 'string'}, 'page': {'default': None, 'description': 'Page', 'title': 'Page', 'type': 'string'}}, title='GetCurrentTeamSAccessLogsRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='GetCurrentTeamSAccessLogsResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['team'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Gets The Access Logs For The Current Team.'), ActionModel(name='SLACK_APPROVE_AN_APP_INSTALLATION_IN_A_WORKSPACE', display_name='Approve an app installation in a workspace', parameters=ActionParametersModel(properties={'app_id': {'default': None, 'description': 'The id of the app to approve.', 'title': 'App Id', 'type': 'string'}, 'request_id': {'default': None, 'description': 'The id of the request to approve.', 'title': 'Request Id', 'type': 'string'}, 'team_id': {'default': None, 'description': 'Team Id', 'title': 'Team Id', 'type': 'string'}}, title='ApproveAnAppInstallationInAWorkspaceRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='ApproveAnAppInstallationInAWorkspaceResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['admin.apps', 'admin'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Approve An App For Installation On A Workspace.'), ActionModel(name='SLACK_SHARE_REMOTE_FILE_IN_CHANNELS', display_name='Share remote file in channels', parameters=ActionParametersModel(properties={'file': {'default': None, 'description': 'Specify a file registered with Slack by providing its ID. Either this field or `external_id` or both are required. ', 'title': 'File', 'type': 'string'}, 'external_id': {'default': None, 'description': 'The globally unique identifier (GUID) for the file, as set by the app registering the file with Slack.  Either this field or `file` or both are required. ', 'title': 'External Id', 'type': 'string'}, 'channels': {'default': None, 'description': 'Comma-separated list of channel IDs where the file will be shared.', 'title': 'Channels', 'type': 'string'}}, title='ShareRemoteFileInChannelsRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='ShareRemoteFileInChannelsResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['files.remote', 'files'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Share A Remote File Into A Channel.'), ActionModel(name='SLACK_FETCH_BOT_USER_INFORMATION', display_name='Fetch bot user information', parameters=ActionParametersModel(properties={'bot': {'default': None, 'description': 'Bot user to get info on', 'title': 'Bot', 'type': 'string'}}, title='FetchBotUserInformationRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='FetchBotUserInformationResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['bots'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Gets Information About A Bot User.'), ActionModel(name='SLACK_ADD_A_CUSTOM_EMOJI_TO_A_SLACK_TEAM', display_name='Add a custom emoji to a slack team', parameters=ActionParametersModel(properties={'name': {'description': 'The name of the emoji to be removed. Colons (`:myemoji:`) around the value are not required, although they may be included. ', 'title': 'Name', 'type': 'string'}, 'token': {'description': 'Authentication token. Requires scope: `admin.teams:write`', 'title': 'Token', 'type': 'string'}, 'url': {'description': 'The URL of a file to use as an image for the emoji. Square images under 128KB and with transparent backgrounds work best. ', 'title': 'Url', 'type': 'string'}}, title='AddACustomEmojiToASlackTeamRequest', type='object', required=['name', 'token', 'url']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='AddACustomEmojiToASlackTeamResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['admin.emoji', 'admin'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Add An Emoji.'), ActionModel(name='SLACK_PUSH_VIEW_TO_ROOT_VIEW_STACK', display_name='Push view to root view stack', parameters=ActionParametersModel(properties={'trigger_id': {'description': 'Exchange a trigger to post to the user.', 'title': 'Trigger Id', 'type': 'string'}, 'view': {'description': 'A [view payload](https://slack.dev). This must be a JSON-encoded string.', 'title': 'View', 'type': 'string'}}, title='PushViewToRootViewStackRequest', type='object', required=['trigger_id', 'view']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='PushViewToRootViewStackResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['views'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Push A View Onto The Stack Of A Root View.'), ActionModel(name='SLACK_RESTRICT_APP_INSTALLATION_ON_WORKSPACE', display_name='Restrict app installation on workspace', parameters=ActionParametersModel(properties={'app_id': {'default': None, 'description': 'The id of the app to restrict.', 'title': 'App Id', 'type': 'string'}, 'request_id': {'default': None, 'description': 'The id of the request to restrict.', 'title': 'Request Id', 'type': 'string'}, 'team_id': {'default': None, 'description': 'Team Id', 'title': 'Team Id', 'type': 'string'}}, title='RestrictAppInstallationOnWorkspaceRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='RestrictAppInstallationOnWorkspaceResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['admin.apps', 'admin'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Restrict An App For Installation On A Workspace.'), ActionModel(name='SLACK_REMOVE_REACTION_FROM_ITEM', display_name='Remove reaction from item', parameters=ActionParametersModel(properties={'channel': {'default': None, 'description': 'Channel where the message to remove reaction from was posted.', 'title': 'Channel', 'type': 'string'}, 'file': {'default': None, 'description': 'File to remove reaction from.', 'title': 'File', 'type': 'string'}, 'file_comment': {'default': None, 'description': 'File comment to remove reaction from.', 'title': 'File Comment', 'type': 'string'}, 'name': {'description': 'Reaction (emoji) name.', 'title': 'Name', 'type': 'string'}, 'timestamp': {'default': None, 'description': 'Timestamp of the message to remove reaction from.', 'title': 'Timestamp', 'type': 'string'}}, title='RemoveReactionFromItemRequest', type='object', required=['name']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='RemoveReactionFromItemResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['reactions', 'important'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Removes A Reaction From An Item.'), ActionModel(name='SLACK_REMOVE_A_STAR_FROM_AN_ITEM', display_name='Remove a star from an item', parameters=ActionParametersModel(properties={'channel': {'default': None, 'description': 'Channel to remove star from, or channel where the message to remove star from was posted (used with `timestamp`). ', 'title': 'Channel', 'type': 'string'}, 'file': {'default': None, 'description': 'File to remove star from.', 'title': 'File', 'type': 'string'}, 'file_comment': {'default': None, 'description': 'File comment to remove star from.', 'title': 'File Comment', 'type': 'string'}, 'timestamp': {'default': None, 'description': 'Timestamp of the message to remove star from.', 'title': 'Timestamp', 'type': 'string'}}, title='RemoveAStarFromAnItemRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='RemoveAStarFromAnItemResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['stars'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Removes A Star From An Item.'), ActionModel(name='SLACK_REMOVE_ENTERPRISE_GRID_ORG_EMOJI', display_name='Remove enterprise grid org emoji', parameters=ActionParametersModel(properties={'name': {'description': 'The name of the emoji to be removed. Colons (`:myemoji:`) around the value are not required, although they may be included. ', 'title': 'Name', 'type': 'string'}, 'token': {'description': 'Authentication token. Requires scope: `admin.teams:write`', 'title': 'Token', 'type': 'string'}}, title='RemoveEnterpriseGridOrgEmojiRequest', type='object', required=['name', 'token']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='RemoveEnterpriseGridOrgEmojiResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['admin.emoji', 'admin'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Remove An Emoji Across An Enterprise Grid Organization'), ActionModel(name='SLACK_LIST_APP_PERMISSIONS_SCOPES_ON_A_TEAM', display_name='List app permissions scopes on a team', parameters=ActionParametersModel(properties={}, title='ListAppPermissionsScopesOnATeamRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='ListAppPermissionsScopesOnATeamResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['apps.permissions.scopes', 'apps'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Returns List Of Scopes This App Has On A Team.'), ActionModel(name='SLACK_SET_WORKSPACE_DISCOVERABILITY_SETTINGS', display_name='Set workspace discoverability settings', parameters=ActionParametersModel(properties={'discoverability': {'description': 'This workspace\"s discovery setting. It must be set to one of `open`, `invite_only`, `closed`, or `unlisted`. ', 'title': 'Discoverability', 'type': 'string'}, 'team_id': {'description': 'The ID of the workspace to set discoverability on.', 'title': 'Team Id', 'type': 'string'}}, title='SetWorkspaceDiscoverabilitySettingsRequest', type='object', required=['discoverability', 'team_id']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='SetWorkspaceDiscoverabilitySettingsResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['admin.teams.settings', 'admin'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='An Api Method That Allows Admins To Set The Discoverability Of A Given Workspace'), ActionModel(name='SLACK_UNPIN_ITEM_FROM_CHANNEL', display_name='Unpin item from channel', parameters=ActionParametersModel(properties={'channel': {'description': 'Channel where the item is pinned to.', 'title': 'Channel', 'type': 'string'}, 'timestamp': {'default': None, 'description': 'Timestamp of the message to un-pin.', 'title': 'Timestamp', 'type': 'string'}}, title='UnpinItemFromChannelRequest', type='object', required=['channel']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='UnpinItemFromChannelResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['pins'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Un Pins An Item From A Channel.'), ActionModel(name='SLACK_ADD_AN_EMOJI_ALIAS_IN_SLACK', display_name='Add an emoji alias in slack', parameters=ActionParametersModel(properties={'alias_for': {'description': 'The alias of the emoji.', 'title': 'Alias For', 'type': 'string'}, 'name': {'description': 'The name of the emoji to be aliased. Colons (`:myemoji:`) around the value are not required, although they may be included. ', 'title': 'Name', 'type': 'string'}, 'token': {'description': 'Authentication token. Requires scope: `admin.teams:write`', 'title': 'Token', 'type': 'string'}}, title='AddAnEmojiAliasInSlackRequest', type='object', required=['alias_for', 'name', 'token']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='AddAnEmojiAliasInSlackResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['admin.emoji', 'admin'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Add An Emoji Alias.'), ActionModel(name='SLACK_MANUALLY_SET_USER_PRESENCE', display_name='Manually set user presence', parameters=ActionParametersModel(properties={'presence': {'description': 'Either `auto` or `away`', 'title': 'Presence', 'type': 'string'}}, title='ManuallySetUserPresenceRequest', type='object', required=['presence']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='ManuallySetUserPresenceResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['users'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Manually Sets User Presence.'), ActionModel(name='SLACK_END_USER_DO_NOT_DISTURB_SESSION', display_name='End user do not disturb session', parameters=ActionParametersModel(properties={}, title='EndUserDoNotDisturbSessionRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='EndUserDoNotDisturbSessionResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['dnd'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description=\"Ends The Current User's Do Not Disturb Session Immediately.\"), ActionModel(name='SLACK_RENAME_A_CONVERSATION', display_name='Rename a conversation', parameters=ActionParametersModel(properties={'channel': {'default': None, 'description': 'ID of conversation to rename', 'title': 'Channel', 'type': 'string'}, 'name': {'default': None, 'description': 'New name for conversation.', 'title': 'Name', 'type': 'string'}}, title='RenameAConversationRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='RenameAConversationResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['conversations'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Renames A Conversation.'), ActionModel(name='SLACK_UPLOAD_OR_CREATE_A_FILE_IN_SLACK', display_name='Upload or create a file in slack', parameters=ActionParametersModel(properties={'title': {'default': None, 'description': 'Title of file.', 'title': 'Title', 'type': 'string'}, 'channels': {'default': None, 'description': 'Comma-separated list of channel names or IDs where the file will be shared. ', 'title': 'Channels', 'type': 'string'}, 'content': {'default': None, 'description': 'File contents via a POST variable. If omitting this parameter, you must provide a `file`. ', 'title': 'Content', 'type': 'string'}, 'file': {'default': None, 'description': 'File contents via `multipart/form-data`. If omitting this parameter, you must submit `content`. ', 'title': 'File', 'type': 'string'}, 'filename': {'default': None, 'description': 'Filename of file.', 'title': 'Filename', 'type': 'string'}, 'filetype': {'default': None, 'description': 'A [file type](https://slack.dev) identifier.', 'title': 'Filetype', 'type': 'string'}, 'initial_comment': {'default': None, 'description': 'The message text introducing the file in specified `channels`.', 'title': 'Initial Comment', 'type': 'string'}, 'thread_ts': {'default': None, 'description': 'Provide another message\"s `ts` value to upload this file as a reply. Never use a reply\"s `ts` value; use its parent instead. ', 'title': 'Thread Ts', 'type': 'integer'}, 'token': {'default': None, 'description': 'Authentication token. Requires scope: `files:write:user`', 'title': 'Token', 'type': 'string'}}, title='UploadOrCreateAFileInSlackRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='UploadOrCreateAFileInSlackResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['files'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Uploads Or Creates A File.'), ActionModel(name='SLACK_SET_WORKSPACE_NAME', display_name='Set workspace name', parameters=ActionParametersModel(properties={'name': {'description': 'The new name of the workspace.', 'title': 'Name', 'type': 'string'}, 'team_id': {'description': 'ID for the workspace to set the name for.', 'title': 'Team Id', 'type': 'string'}}, title='SetWorkspaceNameRequest', type='object', required=['name', 'team_id']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='SetWorkspaceNameResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['admin.teams.settings', 'admin'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Set The Name Of A Given Workspace.'), ActionModel(name='SLACK_CHAT_POST_MESSAGE', display_name='Sends a message to a slack channel', parameters=ActionParametersModel(properties={'as_user': {'default': None, 'description': 'Pass true to post the message as the authed user, instead of as a bot. Defaults to false. See [authorship](https://slack.dev) below. ', 'title': 'As User', 'type': 'boolean'}, 'attachments': {'default': None, 'description': 'A JSON-based array of structured attachments, presented as a URL-encoded string. ', 'title': 'Attachments', 'type': 'string'}, 'blocks': {'default': None, 'description': 'A JSON-based array of structured blocks, presented as a URL-encoded string. ', 'title': 'Blocks', 'type': 'string'}, 'channel': {'description': 'Channel, private group, or IM channel to send message to. Can be an encoded ID, or a name. See [below](https://slack.dev) for more details. ', 'title': 'Channel', 'type': 'string'}, 'icon_emoji': {'default': None, 'description': 'Emoji to use as the icon for this message. Overrides `icon_url`. Must be used in conjunction with `as_user` set to `false`, otherwise ignored. See [authorship](https://slack.dev) below. ', 'title': 'Icon Emoji', 'type': 'string'}, 'icon_url': {'default': None, 'description': 'URL to an image to use as the icon for this message. Must be used in conjunction with `as_user` set to false, otherwise ignored. See [authorship](https://slack.dev) below. ', 'title': 'Icon Url', 'type': 'string'}, 'link_names': {'default': None, 'description': 'Find and link channel names and usernames.', 'title': 'Link Names', 'type': 'boolean'}, 'mrkdwn': {'default': None, 'description': 'Disable Slack markup parsing by setting to `false`. Enabled by default.', 'title': 'Mrkdwn', 'type': 'boolean'}, 'parse': {'default': None, 'description': 'Change how messages are treated. Defaults to `none`. See [below](https://slack.dev). ', 'title': 'Parse', 'type': 'string'}, 'reply_broadcast': {'default': None, 'description': 'Used in conjunction with `thread_ts` and indicates whether reply should be made visible to everyone in the channel or conversation. Defaults to `false`. ', 'title': 'Reply Broadcast', 'type': 'boolean'}, 'text': {'default': None, 'description': 'How this field works and whether it is required depends on other fields you use in your API call. [See below](https://slack.dev) for more detail. ', 'title': 'Text', 'type': 'string'}, 'thread_ts': {'default': None, 'description': 'Provide another message\"s `ts` value to make this message a reply. Avoid using a reply\"s `ts` value; use its parent instead. ', 'title': 'Thread Ts', 'type': 'string'}, 'unfurl_links': {'default': None, 'description': 'Pass true to enable unfurling of primarily text-based content.', 'title': 'Unfurl Links', 'type': 'boolean'}, 'unfurl_media': {'default': None, 'description': 'Pass false to disable unfurling of media content.', 'title': 'Unfurl Media', 'type': 'boolean'}, 'username': {'default': None, 'description': 'Set your bot\"s user name. Must be used in conjunction with `as_user` set to false, otherwise ignored. See [authorship](https://slack.dev) below. ', 'title': 'Username', 'type': 'string'}}, title='SendsAMessageToASlackChannelRequest', type='object', required=['channel']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='SendsAMessageToASlackChannelResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=[], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Sends A Message To A Channel.<<DEPRECATED use sends_a_message_to_a_slack_channel>>'), ActionModel(name='SLACK_SET_CHANNEL_POSTING_PERMISSIONS', display_name='Set channel posting permissions', parameters=ActionParametersModel(properties={'channel_id': {'description': 'The channel to set the prefs for', 'title': 'Channel Id', 'type': 'string'}, 'prefs': {'description': 'The prefs for this channel in a stringified JSON format.', 'title': 'Prefs', 'type': 'string'}}, title='SetChannelPostingPermissionsRequest', type='object', required=['channel_id', 'prefs']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='SetChannelPostingPermissionsResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['admin.conversations', 'admin'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Set The Posting Permissions For A Public Or Private Channel.'), ActionModel(name='SLACK_USERS_LIST', display_name='List all slack team users with pagination', parameters=ActionParametersModel(properties={'limit': {'default': None, 'description': 'The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the users list hasn\"t been reached. Providing no `limit` value will result in Slack attempting to deliver you the entire result set. If the collection is too large you may experience `limit_required` or HTTP 500 errors. ', 'title': 'Limit', 'type': 'integer'}, 'cursor': {'default': None, 'description': 'Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request\"s `response_metadata`. Default value fetches the first \"page\" of the collection. See [pagination](https://slack.dev) for more detail. ', 'title': 'Cursor', 'type': 'string'}, 'include_locale': {'default': None, 'description': 'Set this to `true` to receive the locale for users. Defaults to `false`', 'title': 'Include Locale', 'type': 'boolean'}}, title='ListAllSlackTeamUsersWithPaginationRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='ListAllSlackTeamUsersWithPaginationResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=[], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Lists All Users In A Slack Team.<<DEPRECATED use list_all_slack_team_users_with_pagination>>'), ActionModel(name='SLACK_UPDATE_AN_EXISTING_SLACK_VIEW', display_name='Update an existing slack view', parameters=ActionParametersModel(properties={'view_id': {'default': None, 'description': 'A unique identifier of the view to be updated. Either `view_id` or `external_id` is required. ', 'title': 'View Id', 'type': 'string'}, 'external_id': {'default': None, 'description': 'A unique identifier of the view set by the developer. Must be unique for all views on a team. Max length of 255 characters. Either `view_id` or `external_id` is required. ', 'title': 'External Id', 'type': 'string'}, 'view': {'default': None, 'description': 'A [view object](https://slack.dev). This must be a JSON-encoded string.', 'title': 'View', 'type': 'string'}, 'hash': {'default': None, 'description': 'A string that represents view state to protect against possible race conditions. ', 'title': 'Hash', 'type': 'string'}}, title='UpdateAnExistingSlackViewRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='UpdateAnExistingSlackViewResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['views'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Update An Existing View.'), ActionModel(name='SLACK_LISTS_PINNED_ITEMS_IN_A_CHANNEL', display_name='Lists pinned items in a channel', parameters=ActionParametersModel(properties={'channel': {'description': 'Channel to get pinned items for.', 'title': 'Channel', 'type': 'string'}}, title='ListsPinnedItemsInAChannelRequest', type='object', required=['channel']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='ListsPinnedItemsInAChannelResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['pins'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Lists Items Pinned To A Channel.'), ActionModel(name='SLACK_FETCH_CONVERSATION_HISTORY', display_name='Fetch conversation history', parameters=ActionParametersModel(properties={'channel': {'default': None, 'description': 'Conversation ID to fetch history for.', 'title': 'Channel', 'type': 'string'}, 'latest': {'default': None, 'description': 'End of time range of messages to include in results.', 'title': 'Latest', 'type': 'integer'}, 'oldest': {'default': None, 'description': 'Start of time range of messages to include in results.', 'title': 'Oldest', 'type': 'integer'}, 'inclusive': {'default': None, 'description': 'Include messages with latest or oldest timestamp in results only when either timestamp is specified. ', 'title': 'Inclusive', 'type': 'boolean'}, 'limit': {'default': None, 'description': 'The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the users list hasn\"t been reached. ', 'title': 'Limit', 'type': 'integer'}, 'cursor': {'default': None, 'description': 'Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request\"s `response_metadata`. Default value fetches the first \"page\" of the collection. See [pagination](https://slack.dev) for more detail. ', 'title': 'Cursor', 'type': 'string'}}, title='FetchConversationHistoryRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='FetchConversationHistoryResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['conversations', 'important'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description=\"Fetches A Conversation's History Of Messages And Events.\"), ActionModel(name='SLACK_LIST_USER_REMINDERS_WITH_DETAILS', display_name='List user reminders with details', parameters=ActionParametersModel(properties={}, title='ListUserRemindersWithDetailsRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='ListUserRemindersWithDetailsResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['reminders'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Lists All Reminders Created By Or For A Given User.'), ActionModel(name='SLACK_GET_CHANNEL_CONVERSATION_PREFERENCES', display_name='Get channel conversation preferences', parameters=ActionParametersModel(properties={'channel_id': {'description': 'The channel to get preferences for.', 'title': 'Channel Id', 'type': 'string'}}, title='GetChannelConversationPreferencesRequest', type='object', required=['channel_id']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='GetChannelConversationPreferencesResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['admin.conversations', 'admin'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Get Conversation Preferences For A Public Or Private Channel.'), ActionModel(name='SLACK_LIST_WORKSPACE_OWNERS', display_name='List workspace owners', parameters=ActionParametersModel(properties={'team_id': {'description': 'Team Id', 'title': 'Team Id', 'type': 'string'}, 'limit': {'default': None, 'description': 'The maximum number of items to return. Must be between 1 - 1000 both inclusive. ', 'title': 'Limit', 'type': 'integer'}, 'cursor': {'default': None, 'description': 'Set `cursor` to `next_cursor` returned by the previous call to list items in the next page. ', 'title': 'Cursor', 'type': 'string'}}, title='ListWorkspaceOwnersRequest', type='object', required=['team_id']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='ListWorkspaceOwnersResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['admin.teams.owners', 'admin'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='List All Of The Owners On A Given Workspace.'), ActionModel(name='SLACK_LIST_ALL_SLACK_TEAM_USERS_WITH_PAGINATION', display_name='List all slack team users with pagination', parameters=ActionParametersModel(properties={'limit': {'default': None, 'description': 'The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the users list hasn\"t been reached. Providing no `limit` value will result in Slack attempting to deliver you the entire result set. If the collection is too large you may experience `limit_required` or HTTP 500 errors. ', 'title': 'Limit', 'type': 'integer'}, 'cursor': {'default': None, 'description': 'Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request\"s `response_metadata`. Default value fetches the first \"page\" of the collection. See [pagination](https://slack.dev) for more detail. ', 'title': 'Cursor', 'type': 'string'}, 'include_locale': {'default': None, 'description': 'Set this to `true` to receive the locale for users. Defaults to `false`', 'title': 'Include Locale', 'type': 'boolean'}}, title='ListAllSlackTeamUsersWithPaginationRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='ListAllSlackTeamUsersWithPaginationResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['users', 'important'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Lists All Users In A Slack Team.'), ActionModel(name='SLACK_DELETE_A_FILE_BY_ID', display_name='Delete a file by id', parameters=ActionParametersModel(properties={'file': {'default': None, 'description': 'ID of file to delete.', 'title': 'File', 'type': 'string'}}, title='DeleteAFileByIdRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='DeleteAFileByIdResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['files'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Deletes A File.'), ActionModel(name='SLACK_EXCHANGE_OAUTH_CODE_FOR_WORKSPACE_TOKEN', display_name='Exchange oauth code for workspace token', parameters=ActionParametersModel(properties={'client_id': {'default': None, 'description': 'Issued when you created your application.', 'title': 'Client Id', 'type': 'string'}, 'client_secret': {'default': None, 'description': 'Issued when you created your application.', 'title': 'Client Secret', 'type': 'string'}, 'code': {'default': None, 'description': 'The `code` param returned via the OAuth callback.', 'title': 'Code', 'type': 'string'}, 'redirect_uri': {'default': None, 'description': 'This must match the originally submitted URI (if one was sent).', 'title': 'Redirect Uri', 'type': 'string'}, 'single_channel': {'default': None, 'description': 'Request the user to add your app only to a single channel.', 'title': 'Single Channel', 'type': 'boolean'}}, title='ExchangeOauthCodeForWorkspaceTokenRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='ExchangeOauthCodeForWorkspaceTokenResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['oauth'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Exchanges A Temporary O Auth Verifier Code For A Workspace Token.'), ActionModel(name='SLACK_CONVERSATIONS_LIST', display_name='List all slack team channels with various filters', parameters=ActionParametersModel(properties={'exclude_archived': {'default': None, 'description': 'Set to `true` to exclude archived channels from the list', 'title': 'Exclude Archived', 'type': 'boolean'}, 'types': {'default': None, 'description': 'Mix and match channel types by providing a comma-separated list of any combination of `public_channel`, `private_channel`, `mpim`, `im` ', 'title': 'Types', 'type': 'string'}, 'limit': {'default': None, 'description': 'The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the list hasn\"t been reached. Must be an integer no larger than 1000. ', 'title': 'Limit', 'type': 'integer'}, 'cursor': {'default': None, 'description': 'Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request\"s `response_metadata`. Default value fetches the first \"page\" of the collection. See [pagination](https://slack.dev) for more detail. ', 'title': 'Cursor', 'type': 'string'}}, title='ListAllSlackTeamChannelsWithVariousFiltersRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='ListAllSlackTeamChannelsWithVariousFiltersResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=[], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Lists All Channels In A Slack Team.<<DEPRECATED use list_all_slack_team_channels_with_various_filters>>'), ActionModel(name='SLACK_LIST_TEAM_WORKSPACE_APP_REQUESTS', display_name='List team workspace app requests', parameters=ActionParametersModel(properties={'limit': {'default': None, 'description': 'The maximum number of items to return. Must be between 1 - 1000 both inclusive. ', 'title': 'Limit', 'type': 'integer'}, 'cursor': {'default': None, 'description': 'Set `cursor` to `next_cursor` returned by the previous call to list items in the next page ', 'title': 'Cursor', 'type': 'string'}, 'team_id': {'default': None, 'description': 'Team Id', 'title': 'Team Id', 'type': 'string'}}, title='ListTeamWorkspaceAppRequestsRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='ListTeamWorkspaceAppRequestsResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['admin.apps.requests', 'admin'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='List App Requests For A Team/Workspace.'), ActionModel(name='SLACK_FETCH_MESSAGE_THREAD_FROM_A_CONVERSATION', display_name='Fetch message thread from a conversation', parameters=ActionParametersModel(properties={'channel': {'default': None, 'description': 'Conversation ID to fetch thread from.', 'title': 'Channel', 'type': 'string'}, 'ts': {'default': None, 'description': 'Unique identifier of a thread\"s parent message. `ts` must be the timestamp of an existing message with 0 or more replies. If there are no replies then just the single message referenced by `ts` will return - it is just an ordinary, unthreaded message. ', 'title': 'Ts', 'type': 'integer'}, 'latest': {'default': None, 'description': 'End of time range of messages to include in results.', 'title': 'Latest', 'type': 'integer'}, 'oldest': {'default': None, 'description': 'Start of time range of messages to include in results.', 'title': 'Oldest', 'type': 'integer'}, 'inclusive': {'default': None, 'description': 'Include messages with latest or oldest timestamp in results only when either timestamp is specified. ', 'title': 'Inclusive', 'type': 'boolean'}, 'limit': {'default': None, 'description': 'The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the users list hasn\"t been reached. ', 'title': 'Limit', 'type': 'integer'}, 'cursor': {'default': None, 'description': 'Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request\"s `response_metadata`. Default value fetches the first \"page\" of the collection. See [pagination](https://slack.dev) for more detail. ', 'title': 'Cursor', 'type': 'string'}}, title='FetchMessageThreadFromAConversationRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='FetchMessageThreadFromAConversationResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['conversations'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Retrieve A Thread Of Messages Posted To A Conversation'), ActionModel(name='SLACK_DELETES_A_MESSAGE_FROM_A_CHAT', display_name='Deletes a message from a chat', parameters=ActionParametersModel(properties={'as_user': {'default': None, 'description': 'Pass true to delete the message as the authed user with `chat:write:user` scope. [Bot users](https://slack.dev) in this context are considered authed users. If unused or false, the message will be deleted with `chat:write:bot` scope. ', 'title': 'As User', 'type': 'boolean'}, 'channel': {'default': None, 'description': 'Channel containing the message to be deleted.', 'title': 'Channel', 'type': 'string'}, 'ts': {'default': None, 'description': 'Timestamp of the message to be deleted.', 'title': 'Ts', 'type': 'integer'}}, title='DeletesAMessageFromAChatRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='DeletesAMessageFromAChatResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['chat'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Deletes A Message.'), ActionModel(name='SLACK_OPEN_USER_DIALOG_WITH_JSON_DEFINED_UI', display_name='Open user dialog with json defined ui', parameters=ActionParametersModel(properties={'dialog': {'description': 'The dialog definition. This must be a JSON-encoded string.', 'title': 'Dialog', 'type': 'string'}, 'trigger_id': {'description': 'Exchange a trigger to post to the user.', 'title': 'Trigger Id', 'type': 'string'}}, title='OpenUserDialogWithJsonDefinedUiRequest', type='object', required=['dialog', 'trigger_id']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='OpenUserDialogWithJsonDefinedUiResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['dialog'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Open A Dialog With A User'), ActionModel(name='SLACK_RETRIEVE_CONVERSATION_MEMBERS_LIST', display_name='Retrieve conversation members list', parameters=ActionParametersModel(properties={'channel': {'default': None, 'description': 'ID of the conversation to retrieve members for', 'title': 'Channel', 'type': 'string'}, 'limit': {'default': None, 'description': 'The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the users list hasn\"t been reached. ', 'title': 'Limit', 'type': 'integer'}, 'cursor': {'default': None, 'description': 'Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request\"s `response_metadata`. Default value fetches the first \"page\" of the collection. See [pagination](https://slack.dev) for more detail. ', 'title': 'Cursor', 'type': 'string'}}, title='RetrieveConversationMembersListRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='RetrieveConversationMembersListResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['conversations'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Retrieve Members Of A Conversation.'), ActionModel(name='SLACK_FIND_USER_BY_EMAIL_ADDRESS', display_name='Find user by email address', parameters=ActionParametersModel(properties={'email': {'description': 'An email address belonging to a user in the workspace', 'title': 'Email', 'type': 'string'}}, title='FindUserByEmailAddressRequest', type='object', required=['email']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='FindUserByEmailAddressResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['users'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Find A User With An Email Address.')]\n\nFor the following request, determine:\n1. Which specific actions from slack's registry are needed (if any)\n2. What each action's purpose would be in the workflow\n3. If this app's actions alone aren't sufficient for its part in the workflow, explain why\n\nRemember: Focus only on slack's capabilities - ignore requirements for other apps."}, {"role": "user", "content": "Automate checking CPA against target in Google Sheets and send Slack alert if exceeded."}], "model": "deepseek-ai/DeepSeek-R1-Distill-Qwen-32B", "n": 1, "parallel_tool_calls": true, "stream": false, "tool_choice": "required", "tools": [{"type": "function", "function": {"name": "final_result", "description": "The final response which ends this conversation", "parameters": {"$defs": {"ActionRequirement": {"properties": {"app_id": {"description": "ID of the required application", "title": "App Id", "type": "string"}, "action_name": {"description": "Name of the required action", "title": "Action Name", "type": "string"}, "purpose": {"description": "Why this action is needed in the workflow", "title": "Purpose", "type": "string"}}, "required": ["app_id", "action_name", "purpose"], "title": "ActionRequirement", "type": "object"}}, "properties": {"feasible": {"description": "Whether request can be implemented with available actions", "title": "Feasible", "type": "boolean"}, "required_actions": {"anyOf": [{"items": {"$ref": "#/$defs/ActionRequirement"}, "type": "array"}, {"type": "null"}], "default": null, "description": "List of required actions if feasible", "title": "Required Actions"}, "infeasible_reason": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "description": "Detailed explanation if request is not feasible", "title": "Infeasible Reason"}}, "required": ["feasible"], "title": "ActionFeasibilityResult", "type": "object"}}}]}
{"messages": [{"role": "system", "content": "You are a workflow analysis agent that evaluates automation requests.\nYour task is to analyze what actions from ONE SPECIFIC APP (slack) are needed for this workflow.\n\nFocus ONLY on analyzing which actions from this app's registry are required. \nDo NOT consider actions needed from other apps - that will be handled separately.\n\nAvailable Actions for slack:\n[ActionModel(name='SLACK_UPDATE_SLACK_CALL_INFORMATION', display_name='Update slack call information', parameters=ActionParametersModel(properties={'title': {'default': None, 'description': 'The name of the Call.', 'title': 'Title', 'type': 'string'}, 'desktop_app_join_url': {'default': None, 'description': 'When supplied, available Slack clients will attempt to directly launch the 3rd-party Call with this URL. ', 'title': 'Desktop App Join Url', 'type': 'string'}, 'id': {'description': '`id` returned by the [`calls.add`](https://slack.dev) method.', 'title': 'Id', 'type': 'string'}, 'join_url': {'default': None, 'description': 'The URL required for a client to join the Call.', 'title': 'Join Url', 'type': 'string'}}, title='UpdateSlackCallInformationRequest', type='object', required=['id']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='UpdateSlackCallInformationResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['calls'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Updates Information About A Call.'), ActionModel(name='SLACK_SET_WORKSPACE_DEFAULT_CHANNELS', display_name='Set workspace default channels', parameters=ActionParametersModel(properties={'channel_ids': {'description': 'An array of channel IDs.', 'title': 'Channel Ids', 'type': 'string'}, 'team_id': {'description': 'ID for the workspace to set the default channel for.', 'title': 'Team Id', 'type': 'string'}, 'token': {'description': 'Authentication token. Requires scope: `admin.teams:write`', 'title': 'Token', 'type': 'string'}}, title='SetWorkspaceDefaultChannelsRequest', type='object', required=['channel_ids', 'team_id', 'token']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='SetWorkspaceDefaultChannelsResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['admin.teams.settings', 'admin'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Set The Default Channels Of A Workspace.'), ActionModel(name='SLACK_CHECKS_AUTHENTICATION_AND_IDENTITY', display_name='Checks authentication and identity', parameters=ActionParametersModel(properties={}, title='ChecksAuthenticationAndIdentityRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='ChecksAuthenticationAndIdentityResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['auth'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Checks Authentication & Identity.'), ActionModel(name='SLACK_SENDS_EPHEMERAL_MESSAGES_TO_CHANNEL_USERS', display_name='Sends ephemeral messages to channel users', parameters=ActionParametersModel(properties={'as_user': {'default': None, 'description': 'Pass true to post the message as the authed user. Defaults to true if the chat:write:bot scope is not included. Otherwise, defaults to false. ', 'title': 'As User', 'type': 'boolean'}, 'attachments': {'default': None, 'description': 'A JSON-based array of structured attachments, presented as a URL-encoded string. ', 'title': 'Attachments', 'type': 'string'}, 'blocks': {'default': None, 'description': 'A JSON-based array of structured blocks, presented as a URL-encoded string. ', 'title': 'Blocks', 'type': 'string'}, 'channel': {'description': 'Channel, private group, or IM channel to send message to. Can be an encoded ID, or a name. ', 'title': 'Channel', 'type': 'string'}, 'icon_emoji': {'default': None, 'description': 'Emoji to use as the icon for this message. Overrides `icon_url`. Must be used in conjunction with `as_user` set to `false`, otherwise ignored. See [authorship](https://slack.dev) below. ', 'title': 'Icon Emoji', 'type': 'string'}, 'icon_url': {'default': None, 'description': 'URL to an image to use as the icon for this message. Must be used in conjunction with `as_user` set to false, otherwise ignored. See [authorship](https://slack.dev) below. ', 'title': 'Icon Url', 'type': 'string'}, 'link_names': {'default': None, 'description': 'Find and link channel names and usernames.', 'title': 'Link Names', 'type': 'boolean'}, 'parse': {'default': None, 'description': 'Change how messages are treated. Defaults to `none`. See [below](https://slack.dev). ', 'title': 'Parse', 'type': 'string'}, 'text': {'default': None, 'description': 'How this field works and whether it is required depends on other fields you use in your API call. [See below](https://slack.dev) for more detail. ', 'title': 'Text', 'type': 'string'}, 'thread_ts': {'default': None, 'description': 'Provide another message\"s `ts` value to post this message in a thread. Avoid using a reply\"s `ts` value; use its parent\"s value instead. Ephemeral messages in threads are only shown if there is already an active thread. ', 'title': 'Thread Ts', 'type': 'string'}, 'user': {'description': '`id` of the user who will receive the ephemeral message. The user should be in the channel specified by the `channel` argument. ', 'title': 'User', 'type': 'string'}, 'username': {'default': None, 'description': 'Set your bot\"s user name. Must be used in conjunction with `as_user` set to false, otherwise ignored. See [authorship](https://slack.dev) below. ', 'title': 'Username', 'type': 'string'}}, title='SendsEphemeralMessagesToChannelUsersRequest', type='object', required=['channel', 'user']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='SendsEphemeralMessagesToChannelUsersResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['chat'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Sends An Ephemeral Message To A User In A Channel.'), ActionModel(name='SLACK_ADD_IDP_GROUP_ALLOWLIST_TO_CHANNEL', display_name='Add idp group allowlist to channel', parameters=ActionParametersModel(properties={'channel_id': {'description': 'The channel to link this group to.', 'title': 'Channel Id', 'type': 'string'}, 'group_id': {'description': 'The [IDP Group](https://slack.com/help/articles/115001435788-Connect-identity-provider-groups-to-your-Enterprise-Grid-org) ID to be an allowlist for the private channel. ', 'title': 'Group Id', 'type': 'string'}, 'team_id': {'default': None, 'description': 'The workspace where the channel exists. This argument is required for channels only tied to one workspace, and optional for channels that are shared across an organization. ', 'title': 'Team Id', 'type': 'string'}, 'token': {'description': 'Authentication token. Requires scope: `admin.conversations:write`', 'title': 'Token', 'type': 'string'}}, title='AddIdpGroupAllowlistToChannelRequest', type='object', required=['channel_id', 'group_id', 'token']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='AddIdpGroupAllowlistToChannelResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['admin.conversations.restrictAccess', 'admin'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Add An Allowlist Of Idp Groups For Accessing A Channel'), ActionModel(name='SLACK_MARK_REMINDER_AS_COMPLETE', display_name='Mark reminder as complete', parameters=ActionParametersModel(properties={'reminder': {'default': None, 'description': 'The ID of the reminder to be marked as complete', 'title': 'Reminder', 'type': 'string'}}, title='MarkReminderAsCompleteRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='MarkReminderAsCompleteResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['reminders'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Marks A Reminder As Complete.'), ActionModel(name='SLACK_SET_EXPIRATION_FOR_A_GUEST_USER', display_name='Set expiration for a guest user', parameters=ActionParametersModel(properties={'expiration_ts': {'description': 'Timestamp when guest account should be disabled.', 'title': 'Expiration Ts', 'type': 'integer'}, 'team_id': {'description': 'The ID (`T1234`) of the workspace.', 'title': 'Team Id', 'type': 'string'}, 'user_id': {'description': 'The ID of the user to set an expiration for.', 'title': 'User Id', 'type': 'string'}}, title='SetExpirationForAGuestUserRequest', type='object', required=['expiration_ts', 'team_id', 'user_id']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='SetExpirationForAGuestUserResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['admin.users', 'admin'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Set An Expiration For A Guest User'), ActionModel(name='SLACK_CONVERSATIONS_INFO', display_name='Retrieve conversation information', parameters=ActionParametersModel(properties={'channel': {'default': None, 'description': 'Conversation ID to learn more about', 'title': 'Channel', 'type': 'string'}, 'include_locale': {'default': None, 'description': 'Set this to `true` to receive the locale for this conversation. Defaults to `false` ', 'title': 'Include Locale', 'type': 'boolean'}, 'include_num_members': {'default': None, 'description': 'Set to `true` to include the member count for the specified conversation. Defaults to `false` ', 'title': 'Include Num Members', 'type': 'boolean'}}, title='RetrieveConversationInformationRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='RetrieveConversationInformationResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=[], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Retrieve Information About A Conversation.<<DEPRECATED use retrieve_conversation_information>>'), ActionModel(name='SLACK_LIST_USER_GROUPS_FOR_TEAM_WITH_OPTIONS', display_name='List user groups for team with options', parameters=ActionParametersModel(properties={'include_users': {'default': None, 'description': 'Include the list of users for each User Group.', 'title': 'Include Users', 'type': 'boolean'}, 'include_count': {'default': None, 'description': 'Include the number of users in each User Group.', 'title': 'Include Count', 'type': 'boolean'}, 'include_disabled': {'default': None, 'description': 'Include disabled User Groups.', 'title': 'Include Disabled', 'type': 'boolean'}}, title='ListUserGroupsForTeamWithOptionsRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='ListUserGroupsForTeamWithOptionsResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['usergroups'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='List All User Groups For A Team'), ActionModel(name='SLACK_ADD_ENTERPRISE_USER_TO_WORKSPACE', display_name='Add enterprise user to workspace', parameters=ActionParametersModel(properties={'channel_ids': {'default': None, 'description': 'Comma separated values of channel IDs to add user in the new workspace.', 'title': 'Channel Ids', 'type': 'string'}, 'is_restricted': {'default': None, 'description': 'True if user should be added to the workspace as a guest.', 'title': 'Is Restricted', 'type': 'boolean'}, 'is_ultra_restricted': {'default': None, 'description': 'True if user should be added to the workspace as a single-channel guest.', 'title': 'Is Ultra Restricted', 'type': 'boolean'}, 'team_id': {'description': 'The ID (`T1234`) of the workspace.', 'title': 'Team Id', 'type': 'string'}, 'user_id': {'description': 'The ID of the user to add to the workspace.', 'title': 'User Id', 'type': 'string'}}, title='AddEnterpriseUserToWorkspaceRequest', type='object', required=['team_id', 'user_id']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='AddEnterpriseUserToWorkspaceResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['admin.users', 'admin'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Add An Enterprise User To A Workspace.'), ActionModel(name='SLACK_RETRIEVE_DETAILED_USER_INFORMATION', display_name='Retrieve detailed user information', parameters=ActionParametersModel(properties={'include_locale': {'default': None, 'description': 'Set this to `true` to receive the locale for this user. Defaults to `false` ', 'title': 'Include Locale', 'type': 'boolean'}, 'user': {'default': None, 'description': 'User to get info on', 'title': 'User', 'type': 'string'}}, title='RetrieveDetailedUserInformationRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='RetrieveDetailedUserInformationResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['users'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Gets Information About A User.'), ActionModel(name='SLACK_LIST_SLACK_S_REMOTE_FILES_WITH_FILTERS', display_name='List slack s remote files with filters', parameters=ActionParametersModel(properties={'channel': {'default': None, 'description': 'Filter files appearing in a specific channel, indicated by its ID.', 'title': 'Channel', 'type': 'string'}, 'ts_from': {'default': None, 'description': 'Filter files created after this timestamp (inclusive).', 'title': 'Ts From', 'type': 'integer'}, 'ts_to': {'default': None, 'description': 'Filter files created before this timestamp (inclusive).', 'title': 'Ts To', 'type': 'integer'}, 'limit': {'default': None, 'description': 'The maximum number of items to return.', 'title': 'Limit', 'type': 'integer'}, 'cursor': {'default': None, 'description': 'Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request\"s `response_metadata`. Default value fetches the first \"page\" of the collection. See [pagination](https://slack.dev) for more detail. ', 'title': 'Cursor', 'type': 'string'}}, title='ListSlackSRemoteFilesWithFiltersRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='ListSlackSRemoteFilesWithFiltersResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['files.remote', 'files'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Retrieve Information About A Remote File Added To Slack'), ActionModel(name='SLACK_LIST_WORKSPACE_ADMINS', display_name='List workspace admins', parameters=ActionParametersModel(properties={'limit': {'default': None, 'description': 'The maximum number of items to return.', 'title': 'Limit', 'type': 'integer'}, 'cursor': {'default': None, 'description': 'Set `cursor` to `next_cursor` returned by the previous call to list items in the next page. ', 'title': 'Cursor', 'type': 'string'}, 'team_id': {'description': 'Team Id', 'title': 'Team Id', 'type': 'string'}}, title='ListWorkspaceAdminsRequest', type='object', required=['team_id']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='ListWorkspaceAdminsResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['admin.teams.admins', 'admin'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='List All Of The Admins On A Given Workspace.'), ActionModel(name='SLACK_ACTIVATE_OR_MODIFY_DO_NOT_DISTURB_DURATION', display_name='Activate or modify do not disturb duration', parameters=ActionParametersModel(properties={'num_minutes': {'description': 'Number of minutes, from now, to snooze until.', 'title': 'Num Minutes', 'type': 'string'}, 'token': {'description': 'Authentication token. Requires scope: `dnd:write`', 'title': 'Token', 'type': 'string'}}, title='ActivateOrModifyDoNotDisturbDurationRequest', type='object', required=['num_minutes', 'token']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='ActivateOrModifyDoNotDisturbDurationResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['dnd'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Turns On Do Not Disturb Mode For The Current User, Or Changes Its Duration.'), ActionModel(name='SLACK_RETRIEVE_DETAILED_INFORMATION_ABOUT_A_FILE', display_name='Retrieve detailed information about a file', parameters=ActionParametersModel(properties={'file': {'default': None, 'description': 'Specify a file by providing its ID.', 'title': 'File', 'type': 'string'}, 'count': {'default': None, 'description': 'Count', 'title': 'Count', 'type': 'string'}, 'page': {'default': None, 'description': 'Page', 'title': 'Page', 'type': 'string'}, 'limit': {'default': None, 'description': 'The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the list hasn\"t been reached. ', 'title': 'Limit', 'type': 'integer'}, 'cursor': {'default': None, 'description': 'Parameter for pagination. File comments are paginated for a single file. Set `cursor` equal to the `next_cursor` attribute returned by the previous request\"s `response_metadata`. This parameter is optional, but pagination is mandatory: the default value simply fetches the first \"page\" of the collection of comments. See [pagination](https://slack.dev) for more details. ', 'title': 'Cursor', 'type': 'string'}}, title='RetrieveDetailedInformationAboutAFileRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='RetrieveDetailedInformationAboutAFileResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['files'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Gets Information About A File.'), ActionModel(name='SLACK_CLOSE_DM_OR_MULTI_PERSON_DM', display_name='Close dm or multi person dm', parameters=ActionParametersModel(properties={'channel': {'default': None, 'description': 'Conversation to close.', 'title': 'Channel', 'type': 'string'}}, title='CloseDmOrMultiPersonDmRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='CloseDmOrMultiPersonDmResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['conversations'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Closes A Direct Message Or Multi Person Direct Message.'), ActionModel(name='SLACK_SEARCH_MESSAGES', display_name='Search for messages with query', parameters=ActionParametersModel(properties={'count': {'default': None, 'description': 'Pass the number of results you want per \"page\". Maximum of `100`.', 'title': 'Count', 'type': 'integer'}, 'highlight': {'default': None, 'description': 'Pass a value of `true` to enable query highlight markers (see below).', 'title': 'Highlight', 'type': 'boolean'}, 'page': {'default': None, 'description': 'Page', 'title': 'Page', 'type': 'integer'}, 'query': {'description': 'Search query.', 'title': 'Query', 'type': 'string'}, 'sort': {'default': None, 'description': 'Return matches sorted by either `score` or `timestamp`.', 'title': 'Sort', 'type': 'string'}, 'sort_dir': {'default': None, 'description': 'Change sort direction to ascending (`asc`) or descending (`desc`).', 'title': 'Sort Dir', 'type': 'string'}}, title='SearchForMessagesWithQueryRequest', type='object', required=['query']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='SearchForMessagesWithQueryResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=[], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Searches For Messages Matching A Query.<<DEPRECATED use search_for_messages_with_query>>'), ActionModel(name='SLACK_ADD_DEFAULT_CHANNELS_TO_IDP_GROUP', display_name='Add default channels to idp group', parameters=ActionParametersModel(properties={'channel_ids': {'description': 'Comma separated string of channel IDs.', 'title': 'Channel Ids', 'type': 'string'}, 'team_id': {'default': None, 'description': 'The workspace to add default channels in.', 'title': 'Team Id', 'type': 'string'}, 'usergroup_id': {'description': 'ID of the IDP group to add default channels for.', 'title': 'Usergroup Id', 'type': 'string'}}, title='AddDefaultChannelsToIdpGroupRequest', type='object', required=['channel_ids', 'usergroup_id']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='AddDefaultChannelsToIdpGroupResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['admin.usergroups', 'admin'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Add One Or More Default Channels To An Idp Group.'), ActionModel(name='SLACK_RETRIEVE_REMOTE_FILE_INFO_IN_SLACK', display_name='Retrieve remote file info in slack', parameters=ActionParametersModel(properties={'file': {'default': None, 'description': 'Specify a file by providing its ID.', 'title': 'File', 'type': 'string'}, 'external_id': {'default': None, 'description': 'Creator defined GUID for the file.', 'title': 'External Id', 'type': 'string'}}, title='RetrieveRemoteFileInfoInSlackRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='RetrieveRemoteFileInfoInSlackResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['files.remote', 'files'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Retrieve Information About A Remote File Added To Slack'), ActionModel(name='SLACK_UPDATES_A_SLACK_MESSAGE', display_name='Updates a slack message', parameters=ActionParametersModel(properties={'as_user': {'default': None, 'description': 'Pass true to update the message as the authed user. [Bot users](https://slack.dev) in this context are considered authed users. ', 'title': 'As User', 'type': 'string'}, 'attachments': {'default': None, 'description': 'A JSON-based array of structured attachments, presented as a URL-encoded string. This field is required when not presenting `text`. If you don\"t include this field, the message\"s previous `attachments` will be retained. To remove previous `attachments`, include an empty array for this field. ', 'title': 'Attachments', 'type': 'string'}, 'blocks': {'default': None, 'description': 'A JSON-based array of [structured blocks](https://slack.dev), presented as a URL-encoded string. If you don\"t include this field, the message\"s previous `blocks` will be retained. To remove previous `blocks`, include an empty array for this field. ', 'title': 'Blocks', 'type': 'string'}, 'channel': {'description': 'Channel containing the message to be updated.', 'title': 'Channel', 'type': 'string'}, 'link_names': {'default': None, 'description': 'Find and link channel names and usernames. Defaults to `none`. If you do not specify a value for this field, the original value set for the message will be overwritten with the default, `none`. ', 'title': 'Link Names', 'type': 'string'}, 'parse': {'default': None, 'description': 'Change how messages are treated. Defaults to `client`, unlike `chat.postMessage`. Accepts either `none` or `full`. If you do not specify a value for this field, the original value set for the message will be overwritten with the default, `client`. ', 'title': 'Parse', 'type': 'string'}, 'text': {'default': None, 'description': 'New text for the message, using the [default formatting rules](https://slack.dev). It\"s not required when presenting `blocks` or `attachments`. ', 'title': 'Text', 'type': 'string'}, 'ts': {'description': 'Timestamp of the message to be updated.', 'title': 'Ts', 'type': 'string'}}, title='UpdatesASlackMessageRequest', type='object', required=['channel', 'ts']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='UpdatesASlackMessageResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['chat', 'important'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Updates A Message.'), ActionModel(name='SLACK_SEARCH_FOR_MESSAGES_WITH_QUERY', display_name='Search for messages with query', parameters=ActionParametersModel(properties={'count': {'default': None, 'description': 'Pass the number of results you want per \"page\". Maximum of `100`.', 'title': 'Count', 'type': 'integer'}, 'highlight': {'default': None, 'description': 'Pass a value of `true` to enable query highlight markers (see below).', 'title': 'Highlight', 'type': 'boolean'}, 'page': {'default': None, 'description': 'Page', 'title': 'Page', 'type': 'integer'}, 'query': {'description': 'Search query.', 'title': 'Query', 'type': 'string'}, 'sort': {'default': None, 'description': 'Return matches sorted by either `score` or `timestamp`.', 'title': 'Sort', 'type': 'string'}, 'sort_dir': {'default': None, 'description': 'Change sort direction to ascending (`asc`) or descending (`desc`).', 'title': 'Sort Dir', 'type': 'string'}}, title='SearchForMessagesWithQueryRequest', type='object', required=['query']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='SearchForMessagesWithQueryResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['search', 'important'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Searches For Messages Matching A Query.'), ActionModel(name='SLACK_TRIGGER_USER_PERMISSIONS_MODAL', display_name='Trigger user permissions modal', parameters=ActionParametersModel(properties={'scopes': {'description': 'A comma separated list of user scopes to request for', 'title': 'Scopes', 'type': 'string'}, 'trigger_id': {'description': 'Token used to trigger the request', 'title': 'Trigger Id', 'type': 'string'}, 'user': {'description': 'The user this scope is being requested for', 'title': 'User', 'type': 'string'}}, title='TriggerUserPermissionsModalRequest', type='object', required=['scopes', 'trigger_id', 'user']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='TriggerUserPermissionsModalResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['apps.permissions.users', 'apps'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Enables An App To Trigger A Permissions Modal To Grant An App Access To A User Access Scope.'), ActionModel(name='SLACK_PROMOTE_USER_TO_ADMIN_STATUS', display_name='Promote user to admin status', parameters=ActionParametersModel(properties={'team_id': {'description': 'The ID (`T1234`) of the workspace.', 'title': 'Team Id', 'type': 'string'}, 'user_id': {'description': 'The ID of the user to designate as an admin.', 'title': 'User Id', 'type': 'string'}}, title='PromoteUserToAdminStatusRequest', type='object', required=['team_id', 'user_id']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='PromoteUserToAdminStatusResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['admin.users', 'admin'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Set An Existing Guest, Regular User, Or Owner To Be An Admin User.'), ActionModel(name='SLACK_START_REAL_TIME_MESSAGING_SESSION', display_name='Start real time messaging session', parameters=ActionParametersModel(properties={'batch_presence_aware': {'default': None, 'description': 'Batch presence deliveries via subscription. Enabling changes the shape of `presence_change` events. See [batch presence](https://slack.dev). ', 'title': 'Batch Presence Aware', 'type': 'boolean'}, 'presence_sub': {'default': None, 'description': 'Only deliver presence events when requested by subscription. See [presence subscriptions](https://slack.dev). ', 'title': 'Presence Sub', 'type': 'boolean'}}, title='StartRealTimeMessagingSessionRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='StartRealTimeMessagingSessionResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['rtm'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Starts A Real Time Messaging Session.'), ActionModel(name='SLACK_REVERSE_A_CONVERSATION_S_ARCHIVAL_STATUS', display_name='Reverse a conversation s archival status', parameters=ActionParametersModel(properties={'channel': {'default': None, 'description': 'ID of conversation to unarchive', 'title': 'Channel', 'type': 'string'}}, title='ReverseAConversationSArchivalStatusRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='ReverseAConversationSArchivalStatusResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['conversations'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Reverses Conversation Archival.'), ActionModel(name='SLACK_REMOVE_A_REMOTE_FILE', display_name='Remove a remote file', parameters=ActionParametersModel(properties={'external_id': {'default': None, 'description': 'Creator defined GUID for the file.', 'title': 'External Id', 'type': 'string'}, 'file': {'default': None, 'description': 'Specify a file by providing its ID.', 'title': 'File', 'type': 'string'}, 'token': {'default': None, 'description': 'Authentication token. Requires scope: `remote_files:write`', 'title': 'Token', 'type': 'string'}}, title='RemoveARemoteFileRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='RemoveARemoteFileResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['files.remote', 'files'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Remove A Remote File.'), ActionModel(name='SLACK_DELETE_A_SLACK_REMINDER', display_name='Delete a slack reminder', parameters=ActionParametersModel(properties={'reminder': {'default': None, 'description': 'The ID of the reminder', 'title': 'Reminder', 'type': 'string'}}, title='DeleteASlackReminderRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='DeleteASlackReminderResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['reminders'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Deletes A Reminder.'), ActionModel(name='SLACK_APPROVE_WORKSPACE_INVITE_REQUEST', display_name='Approve workspace invite request', parameters=ActionParametersModel(properties={'invite_request_id': {'description': 'ID of the request to invite.', 'title': 'Invite Request Id', 'type': 'string'}, 'team_id': {'default': None, 'description': 'ID for the workspace where the invite request was made.', 'title': 'Team Id', 'type': 'string'}}, title='ApproveWorkspaceInviteRequestRequest', type='object', required=['invite_request_id']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='ApproveWorkspaceInviteRequestResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['admin.inviteRequests', 'admin'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Approve A Workspace Invite Request.'), ActionModel(name='SLACK_GET_USER_PRESENCE_INFO', display_name='Get user presence info', parameters=ActionParametersModel(properties={'user': {'default': None, 'description': 'User to get presence info on. Defaults to the authed user.', 'title': 'User', 'type': 'string'}}, title='GetUserPresenceInfoRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='GetUserPresenceInfoResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['users'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Gets User Presence Information.'), ActionModel(name='SLACK_LIST_USER_REACTIONS', display_name='List user reactions', parameters=ActionParametersModel(properties={'user': {'default': None, 'description': 'Show reactions made by this user. Defaults to the authed user.', 'title': 'User', 'type': 'string'}, 'full': {'default': None, 'description': 'If true always return the complete reaction list.', 'title': 'Full', 'type': 'boolean'}, 'count': {'default': None, 'description': 'Count', 'title': 'Count', 'type': 'integer'}, 'page': {'default': None, 'description': 'Page', 'title': 'Page', 'type': 'integer'}, 'cursor': {'default': None, 'description': 'Parameter for pagination. Set `cursor` equal to the `next_cursor` attribute returned by the previous request\"s `response_metadata`. This parameter is optional, but pagination is mandatory: the default value simply fetches the first \"page\" of the collection. See [pagination](https://slack.dev) for more details. ', 'title': 'Cursor', 'type': 'string'}, 'limit': {'default': None, 'description': 'The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the list hasn\"t been reached. ', 'title': 'Limit', 'type': 'integer'}}, title='ListUserReactionsRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='ListUserReactionsResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['reactions'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Lists Reactions Made By A User.'), ActionModel(name='SLACK_UPDATE_AN_EXISTING_SLACK_USER_GROUP', display_name='Update an existing slack user group', parameters=ActionParametersModel(properties={'description': {'default': None, 'description': 'A short description of the User Group.', 'title': 'Description', 'type': 'string'}, 'channels': {'default': None, 'description': 'A comma separated string of encoded channel IDs for which the User Group uses as a default. ', 'title': 'Channels', 'type': 'string'}, 'handle': {'default': None, 'description': 'A mention handle. Must be unique among channels, users and User Groups.', 'title': 'Handle', 'type': 'string'}, 'include_count': {'default': None, 'description': 'Include the number of users in the User Group.', 'title': 'Include Count', 'type': 'boolean'}, 'name': {'default': None, 'description': 'A name for the User Group. Must be unique among User Groups.', 'title': 'Name', 'type': 'string'}, 'usergroup': {'description': 'The encoded ID of the User Group to update.', 'title': 'Usergroup', 'type': 'string'}}, title='UpdateAnExistingSlackUserGroupRequest', type='object', required=['usergroup']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='UpdateAnExistingSlackUserGroupResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['usergroups'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Update An Existing User Group'), ActionModel(name='SLACK_LIST_RESTRICTED_APPS_FOR_AN_ORG_OR_WORKSPACE', display_name='List restricted apps for an org or workspace', parameters=ActionParametersModel(properties={'limit': {'default': None, 'description': 'The maximum number of items to return. Must be between 1 - 1000 both inclusive. ', 'title': 'Limit', 'type': 'integer'}, 'cursor': {'default': None, 'description': 'Set `cursor` to `next_cursor` returned by the previous call to list items in the next page ', 'title': 'Cursor', 'type': 'string'}, 'team_id': {'default': None, 'description': 'Team Id', 'title': 'Team Id', 'type': 'string'}, 'enterprise_id': {'default': None, 'description': 'Enterprise Id', 'title': 'Enterprise Id', 'type': 'string'}}, title='ListRestrictedAppsForAnOrgOrWorkspaceRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='ListRestrictedAppsForAnOrgOrWorkspaceResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['admin.apps.restricted', 'admin'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='List Restricted Apps For An Org Or Workspace.'), ActionModel(name='SLACK_UNINSTALL_APP_FROM_WORKSPACE', display_name='Uninstall app from workspace', parameters=ActionParametersModel(properties={'client_id': {'default': None, 'description': 'Issued when you created your application.', 'title': 'Client Id', 'type': 'string'}, 'client_secret': {'default': None, 'description': 'Issued when you created your application.', 'title': 'Client Secret', 'type': 'string'}}, title='UninstallAppFromWorkspaceRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='UninstallAppFromWorkspaceResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['apps'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Uninstalls Your App From A Workspace.'), ActionModel(name='SLACK_RETRIEVE_CALL_INFORMATION', display_name='Retrieve call information', parameters=ActionParametersModel(properties={'id': {'description': '`id` of the Call returned by the [`calls.add`](https://slack.dev) method. ', 'title': 'Id', 'type': 'string'}}, title='RetrieveCallInformationRequest', type='object', required=['id']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='RetrieveCallInformationResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['calls'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Returns Information About A Call.'), ActionModel(name='SLACK_DELETE_A_COMMENT_ON_A_FILE', display_name='Delete a comment on a file', parameters=ActionParametersModel(properties={'file': {'default': None, 'description': 'File to delete a comment from.', 'title': 'File', 'type': 'string'}, 'id': {'default': None, 'description': 'The comment to delete.', 'title': 'Id', 'type': 'string'}}, title='DeleteACommentOnAFileRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='DeleteACommentOnAFileResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['files.comments', 'files'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Deletes An Existing Comment On A File.'), ActionModel(name='SLACK_LIST_WORKSPACE_USERS', display_name='List workspace users', parameters=ActionParametersModel(properties={'team_id': {'description': 'The ID (`T1234`) of the workspace.', 'title': 'Team Id', 'type': 'string'}, 'cursor': {'default': None, 'description': 'Set `cursor` to `next_cursor` returned by the previous call to list items in the next page. ', 'title': 'Cursor', 'type': 'string'}, 'limit': {'default': None, 'description': 'Limit for how many users to be retrieved per page', 'title': 'Limit', 'type': 'integer'}}, title='ListWorkspaceUsersRequest', type='object', required=['team_id']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='ListWorkspaceUsersResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['admin.users', 'admin'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='List Users On A Workspace'), ActionModel(name='SLACK_CREATE_A_REMINDER', display_name='Create a reminder', parameters=ActionParametersModel(properties={'text': {'description': 'The content of the reminder', 'title': 'Text', 'type': 'string'}, 'time': {'description': 'When this reminder should happen: the Unix timestamp (up to five years from now), the number of seconds until the reminder (if within 24 hours), or a natural language description (Ex. \"in 15 minutes,\" or \"every Thursday\") ', 'title': 'Time', 'type': 'string'}, 'user': {'default': None, 'description': 'The user who will receive the reminder. If no user is specified, the reminder will go to user who created it. ', 'title': 'User', 'type': 'string'}}, title='CreateAReminderRequest', type='object', required=['text', 'time']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='CreateAReminderResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['reminders', 'important'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Creates A Reminder.'), ActionModel(name='SLACK_LIST_ENTERPRISE_GRID_ORGANIZATION_EMOJIS', display_name='List enterprise grid organization emojis', parameters=ActionParametersModel(properties={'cursor': {'default': None, 'description': 'Set `cursor` to `next_cursor` returned by the previous call to list items in the next page ', 'title': 'Cursor', 'type': 'string'}, 'limit': {'default': None, 'description': 'The maximum number of items to return. Must be between 1 - 1000 both inclusive. ', 'title': 'Limit', 'type': 'integer'}}, title='ListEnterpriseGridOrganizationEmojisRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='ListEnterpriseGridOrganizationEmojisResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['admin.emoji', 'admin'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='List Emoji For An Enterprise Grid Organization.'), ActionModel(name='SLACK_FETCH_WORKSPACE_SETTINGS_INFORMATION', display_name='Fetch workspace settings information', parameters=ActionParametersModel(properties={'team_id': {'description': 'Team Id', 'title': 'Team Id', 'type': 'string'}}, title='FetchWorkspaceSettingsInformationRequest', type='object', required=['team_id']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='FetchWorkspaceSettingsInformationResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['admin.teams.settings', 'admin'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Fetch Information About Settings In A Workspace'), ActionModel(name='SLACK_GET_REMINDER_INFORMATION', display_name='Get reminder information', parameters=ActionParametersModel(properties={'reminder': {'default': None, 'description': 'The ID of the reminder', 'title': 'Reminder', 'type': 'string'}}, title='GetReminderInformationRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='GetReminderInformationResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['reminders'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Gets Information About A Reminder.'), ActionModel(name='SLACK_LIST_APP_USER_GRANTS_AND_SCOPES_ON_TEAM', display_name='List app user grants and scopes on team', parameters=ActionParametersModel(properties={'cursor': {'default': None, 'description': 'Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request\"s `response_metadata`. Default value fetches the first \"page\" of the collection. See [pagination](https://slack.dev) for more detail. ', 'title': 'Cursor', 'type': 'string'}, 'limit': {'default': None, 'description': 'The maximum number of items to return.', 'title': 'Limit', 'type': 'integer'}}, title='ListAppUserGrantsAndScopesOnTeamRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='ListAppUserGrantsAndScopesOnTeamResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['apps.permissions.users', 'apps'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Returns List Of User Grants And Corresponding Scopes This App Has On A Team.'), ActionModel(name='SLACK_REGISTER_CALL_PARTICIPANTS_REMOVAL', display_name='Register call participants removal', parameters=ActionParametersModel(properties={'id': {'description': '`id` returned by the [`calls.add`](https://slack.dev) method.', 'title': 'Id', 'type': 'string'}, 'users': {'description': 'The list of users to remove as participants in the Call. [Read more on how to specify users here](https://slack.dev). ', 'title': 'Users', 'type': 'string'}}, title='RegisterCallParticipantsRemovalRequest', type='object', required=['id', 'users']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='RegisterCallParticipantsRemovalResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['calls.participants', 'calls'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Registers Participants Removed From A Call.'), ActionModel(name='SLACK_ENABLE_A_SPECIFIED_USER_GROUP', display_name='Enable a specified user group', parameters=ActionParametersModel(properties={'include_count': {'default': None, 'description': 'Include the number of users in the User Group.', 'title': 'Include Count', 'type': 'boolean'}, 'usergroup': {'description': 'The encoded ID of the User Group to enable.', 'title': 'Usergroup', 'type': 'string'}}, title='EnableASpecifiedUserGroupRequest', type='object', required=['usergroup']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='EnableASpecifiedUserGroupResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['usergroups'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Enable A User Group'), ActionModel(name='SLACK_LIST_EVENT_AUTHORIZATIONS_FOR_APPS', display_name='List event authorizations for apps', parameters=ActionParametersModel(properties={'event_context': {'description': 'Event Context', 'title': 'Event Context', 'type': 'string'}, 'cursor': {'default': None, 'description': 'Cursor', 'title': 'Cursor', 'type': 'string'}, 'limit': {'default': None, 'description': 'Limit', 'title': 'Limit', 'type': 'integer'}}, title='ListEventAuthorizationsForAppsRequest', type='object', required=['event_context']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='ListEventAuthorizationsForAppsResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['apps.event.authorizations', 'apps'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Get A List Of Authorizations For The Given Event Context. Each Authorization Represents An App Installation That The Event Is Visible To.'), ActionModel(name='SLACK_REVOKE_PUBLIC_SHARING_ACCESS_FOR_A_FILE', display_name='Revoke public sharing access for a file', parameters=ActionParametersModel(properties={'file': {'default': None, 'description': 'File to revoke', 'title': 'File', 'type': 'string'}}, title='RevokePublicSharingAccessForAFileRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='RevokePublicSharingAccessForAFileResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['files'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Revokes Public/External Sharing Access For A File'), ActionModel(name='SLACK_GET_BILLABLE_TEAM_USER_INFO', display_name='Get billable team user info', parameters=ActionParametersModel(properties={'user': {'default': None, 'description': 'A user to retrieve the billable information for. Defaults to all users.', 'title': 'User', 'type': 'string'}}, title='GetBillableTeamUserInfoRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='GetBillableTeamUserInfoResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['team'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Gets Billable Users Information For The Current Team.'), ActionModel(name='SLACK_REMOVE_USER_FROM_WORKSPACE', display_name='Remove user from workspace', parameters=ActionParametersModel(properties={'team_id': {'description': 'The ID (`T1234`) of the workspace.', 'title': 'Team Id', 'type': 'string'}, 'user_id': {'description': 'The ID of the user to remove.', 'title': 'User Id', 'type': 'string'}}, title='RemoveUserFromWorkspaceRequest', type='object', required=['team_id', 'user_id']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='RemoveUserFromWorkspaceResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['admin.users', 'admin'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Remove A User From A Workspace.'), ActionModel(name='SLACK_DISCONNECT_CHANNEL_FROM_WORKSPACES', display_name='Disconnect channel from workspaces', parameters=ActionParametersModel(properties={'channel_id': {'description': 'The channel to be disconnected from some workspaces.', 'title': 'Channel Id', 'type': 'string'}, 'leaving_team_ids': {'default': None, 'description': 'The team to be removed from the channel. Currently only a single team id can be specified. ', 'title': 'Leaving Team Ids', 'type': 'string'}}, title='DisconnectChannelFromWorkspacesRequest', type='object', required=['channel_id']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='DisconnectChannelFromWorkspacesResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['admin.conversations', 'admin'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Disconnect A Connected Channel From One Or More Workspaces.'), ActionModel(name='SLACK_EXCHANGE_OAUTH_CODE_FOR_ACCESS_TOKEN', display_name='Exchange oauth code for access token', parameters=ActionParametersModel(properties={'client_id': {'default': None, 'description': 'Issued when you created your application.', 'title': 'Client Id', 'type': 'string'}, 'client_secret': {'default': None, 'description': 'Issued when you created your application.', 'title': 'Client Secret', 'type': 'string'}, 'code': {'default': None, 'description': 'The `code` param returned via the OAuth callback.', 'title': 'Code', 'type': 'string'}, 'redirect_uri': {'default': None, 'description': 'This must match the originally submitted URI (if one was sent).', 'title': 'Redirect Uri', 'type': 'string'}, 'single_channel': {'default': None, 'description': 'Request the user to add your app only to a single channel. Only valid with a [legacy workspace app](https://api.slack.com/legacy-workspace-apps). ', 'title': 'Single Channel', 'type': 'boolean'}}, title='ExchangeOauthCodeForAccessTokenRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='ExchangeOauthCodeForAccessTokenResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['oauth'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Exchanges A Temporary O Auth Verifier Code For An Access Token.'), ActionModel(name='SLACK_RENAME_AN_EMOJI', display_name='Rename an emoji', parameters=ActionParametersModel(properties={'name': {'description': 'The name of the emoji to be renamed. Colons (`:myemoji:`) around the value are not required, although they may be included. ', 'title': 'Name', 'type': 'string'}, 'new_name': {'description': 'The new name of the emoji.', 'title': 'New Name', 'type': 'string'}, 'token': {'description': 'Authentication token. Requires scope: `admin.teams:write`', 'title': 'Token', 'type': 'string'}}, title='RenameAnEmojiRequest', type='object', required=['name', 'new_name', 'token']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='RenameAnEmojiResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['admin.emoji', 'admin'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Rename An Emoji.'), ActionModel(name='SLACK_LIST_APP_PERMISSIONS_ON_A_TEAM', display_name='List app permissions on a team', parameters=ActionParametersModel(properties={}, title='ListAppPermissionsOnATeamRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='ListAppPermissionsOnATeamResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['apps.permissions', 'apps'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Returns List Of Permissions This App Has On A Team.'), ActionModel(name='SLACK_LIST_IDP_GROUPS_LINKED_TO_A_CHANNEL', display_name='List idp groups linked to a channel', parameters=ActionParametersModel(properties={'channel_id': {'description': 'Channel Id', 'title': 'Channel Id', 'type': 'string'}, 'team_id': {'default': None, 'description': 'The workspace where the channel exists. This argument is required for channels only tied to one workspace, and optional for channels that are shared across an organization. ', 'title': 'Team Id', 'type': 'string'}}, title='ListIdpGroupsLinkedToAChannelRequest', type='object', required=['channel_id']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='ListIdpGroupsLinkedToAChannelResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['admin.conversations.restrictAccess', 'admin'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='List All Idp Groups Linked To A Channel'), ActionModel(name='SLACK_SET_THE_TOPIC_OF_A_CONVERSATION', display_name='Set the topic of a conversation', parameters=ActionParametersModel(properties={'channel': {'default': None, 'description': 'Conversation to set the topic of', 'title': 'Channel', 'type': 'string'}, 'topic': {'default': None, 'description': 'The new topic string. Does not support formatting or linkification.', 'title': 'Topic', 'type': 'string'}}, title='SetTheTopicOfAConversationRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='SetTheTopicOfAConversationResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['conversations'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Sets The Topic For A Conversation.'), ActionModel(name='SLACK_DELETE_A_PUBLIC_OR_PRIVATE_CHANNEL', display_name='Delete a public or private channel', parameters=ActionParametersModel(properties={'channel_id': {'description': 'The channel to delete.', 'title': 'Channel Id', 'type': 'string'}}, title='DeleteAPublicOrPrivateChannelRequest', type='object', required=['channel_id']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='DeleteAPublicOrPrivateChannelResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['admin.conversations', 'admin'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Delete A Public Or Private Channel.'), ActionModel(name='SLACK_RETRIEVE_USER_PROFILE_INFORMATION', display_name='Retrieve user profile information', parameters=ActionParametersModel(properties={'include_labels': {'default': None, 'description': 'Include labels for each ID in custom profile fields', 'title': 'Include Labels', 'type': 'boolean'}, 'user': {'default': None, 'description': 'User to retrieve profile info for', 'title': 'User', 'type': 'string'}}, title='RetrieveUserProfileInformationRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='RetrieveUserProfileInformationResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['users.profile', 'users'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description=\"Retrieves A User's Profile Information.\"), ActionModel(name='SLACK_SET_USER_PROFILE_PHOTO_WITH_CROPPING_OPTIONS', display_name='Set user profile photo with cropping options', parameters=ActionParametersModel(properties={'crop_w': {'default': None, 'description': 'Width/height of crop box (always square)', 'title': 'Crop W', 'type': 'string'}, 'crop_x': {'default': None, 'description': 'X coordinate of top-left corner of crop box', 'title': 'Crop X', 'type': 'string'}, 'crop_y': {'default': None, 'description': 'Y coordinate of top-left corner of crop box', 'title': 'Crop Y', 'type': 'string'}, 'image': {'default': None, 'description': 'File contents via `multipart/form-data`.', 'title': 'Image', 'type': 'string'}, 'token': {'description': 'Authentication token. Requires scope: `users.profile:write`', 'title': 'Token', 'type': 'string'}}, title='SetUserProfilePhotoWithCroppingOptionsRequest', type='object', required=['token']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='SetUserProfilePhotoWithCroppingOptionsResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['users'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Set The User Profile Photo'), ActionModel(name='SLACK_REQUEST_ADDITIONAL_APP_PERMISSIONS', display_name='Request additional app permissions', parameters=ActionParametersModel(properties={'scopes': {'description': 'A comma separated list of scopes to request for', 'title': 'Scopes', 'type': 'string'}, 'trigger_id': {'description': 'Token used to trigger the permissions API', 'title': 'Trigger Id', 'type': 'string'}}, title='RequestAdditionalAppPermissionsRequest', type='object', required=['scopes', 'trigger_id']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='RequestAdditionalAppPermissionsResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['apps.permissions', 'apps'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Allows An App To Request Additional Scopes'), ActionModel(name='SLACK_ASSOCIATE_DEFAULT_WORKSPACES_WITH_IDP_GROUP', display_name='Associate default workspaces with idp group', parameters=ActionParametersModel(properties={'auto_provision': {'default': None, 'description': 'When `true`, this method automatically creates new workspace accounts for the IDP group members. ', 'title': 'Auto Provision', 'type': 'boolean'}, 'team_ids': {'description': 'A comma separated list of encoded team (workspace) IDs. Each workspace *MUST* belong to the organization associated with the token. ', 'title': 'Team Ids', 'type': 'string'}, 'usergroup_id': {'description': 'An encoded usergroup (IDP Group) ID.', 'title': 'Usergroup Id', 'type': 'string'}}, title='AssociateDefaultWorkspacesWithIdpGroupRequest', type='object', required=['team_ids', 'usergroup_id']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='AssociateDefaultWorkspacesWithIdpGroupResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['admin.usergroups', 'admin'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Associate One Or More Default Workspaces With An Organization Wide Idp Group.'), ActionModel(name='SLACK_LIST_ORG_LEVEL_IDP_GROUP_CHANNELS', display_name='List org level idp group channels', parameters=ActionParametersModel(properties={'usergroup_id': {'description': 'ID of the IDP group to list default channels for.', 'title': 'Usergroup Id', 'type': 'string'}, 'team_id': {'default': None, 'description': 'ID of the the workspace.', 'title': 'Team Id', 'type': 'string'}, 'include_num_members': {'default': None, 'description': 'Flag to include or exclude the count of members per channel.', 'title': 'Include Num Members', 'type': 'boolean'}}, title='ListOrgLevelIdpGroupChannelsRequest', type='object', required=['usergroup_id']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='ListOrgLevelIdpGroupChannelsResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['admin.usergroups', 'admin'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='List The Channels Linked To An Org Level Idp Group (User Group).'), ActionModel(name='SLACK_LIST_ALL_SLACK_TEAM_CHANNELS_WITH_VARIOUS_FILTERS', display_name='List all slack team channels with various filters', parameters=ActionParametersModel(properties={'exclude_archived': {'default': None, 'description': 'Set to `true` to exclude archived channels from the list', 'title': 'Exclude Archived', 'type': 'boolean'}, 'types': {'default': None, 'description': 'Mix and match channel types by providing a comma-separated list of any combination of `public_channel`, `private_channel`, `mpim`, `im` ', 'title': 'Types', 'type': 'string'}, 'limit': {'default': None, 'description': 'The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the list hasn\"t been reached. Must be an integer no larger than 1000. ', 'title': 'Limit', 'type': 'integer'}, 'cursor': {'default': None, 'description': 'Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request\"s `response_metadata`. Default value fetches the first \"page\" of the collection. See [pagination](https://slack.dev) for more detail. ', 'title': 'Cursor', 'type': 'string'}}, title='ListAllSlackTeamChannelsWithVariousFiltersRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='ListAllSlackTeamChannelsWithVariousFiltersResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['conversations', 'important'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Lists All Channels In A Slack Team.'), ActionModel(name='SLACK_CREATE_A_SLACK_USER_GROUP', display_name='Create a slack user group', parameters=ActionParametersModel(properties={'description': {'default': None, 'description': 'A short description of the User Group.', 'title': 'Description', 'type': 'string'}, 'channels': {'default': None, 'description': 'A comma separated string of encoded channel IDs for which the User Group uses as a default. ', 'title': 'Channels', 'type': 'string'}, 'handle': {'default': None, 'description': 'A mention handle. Must be unique among channels, users and User Groups.', 'title': 'Handle', 'type': 'string'}, 'include_count': {'default': None, 'description': 'Include the number of users in each User Group.', 'title': 'Include Count', 'type': 'boolean'}, 'name': {'description': 'A name for the User Group. Must be unique among User Groups.', 'title': 'Name', 'type': 'string'}}, title='CreateASlackUserGroupRequest', type='object', required=['name']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='CreateASlackUserGroupResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['usergroups'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Create A User Group'), ActionModel(name='SLACK_DELETE_A_SCHEDULED_MESSAGE_IN_A_CHAT', display_name='Delete a scheduled message in a chat', parameters=ActionParametersModel(properties={'as_user': {'default': None, 'description': 'Pass true to delete the message as the authed user with `chat:write:user` scope. [Bot users](https://slack.dev) in this context are considered authed users. If unused or false, the message will be deleted with `chat:write:bot` scope. ', 'title': 'As User', 'type': 'boolean'}, 'channel': {'description': 'The channel the scheduled_message is posting to', 'title': 'Channel', 'type': 'string'}, 'scheduled_message_id': {'description': '`scheduled_message_id` returned from call to chat.scheduleMessage', 'title': 'Scheduled Message Id', 'type': 'string'}}, title='DeleteAScheduledMessageInAChatRequest', type='object', required=['channel', 'scheduled_message_id']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='DeleteAScheduledMessageInAChatResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['chat'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Deletes A Pending Scheduled Message From The Queue.'), ActionModel(name='SLACK_END_USER_SNOOZE_MODE_IMMEDIATELY', display_name='End user snooze mode immediately', parameters=ActionParametersModel(properties={}, title='EndUserSnoozeModeImmediatelyRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='EndUserSnoozeModeImmediatelyResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['dnd'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description=\"Ends The Current User's Snooze Mode Immediately.\"), ActionModel(name='SLACK_UPDATE_USER_GROUP_MEMBERS', display_name='Update user group members', parameters=ActionParametersModel(properties={'include_count': {'default': None, 'description': 'Include the number of users in the User Group.', 'title': 'Include Count', 'type': 'boolean'}, 'usergroup': {'description': 'The encoded ID of the User Group to update.', 'title': 'Usergroup', 'type': 'string'}, 'users': {'description': 'A comma separated string of encoded user IDs that represent the entire list of users for the User Group. ', 'title': 'Users', 'type': 'string'}}, title='UpdateUserGroupMembersRequest', type='object', required=['usergroup', 'users']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='UpdateUserGroupMembersResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['usergroups.users', 'usergroups'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Update The List Of Users For A User Group'), ActionModel(name='SLACK_LIST_DENIED_WORKSPACE_INVITE_REQUESTS', display_name='List denied workspace invite requests', parameters=ActionParametersModel(properties={'team_id': {'default': None, 'description': 'ID for the workspace where the invite requests were made.', 'title': 'Team Id', 'type': 'string'}, 'cursor': {'default': None, 'description': 'Value of the `next_cursor` field sent as part of the previous api response ', 'title': 'Cursor', 'type': 'string'}, 'limit': {'default': None, 'description': 'The number of results that will be returned by the API on each invocation. Must be between 1 - 1000 both inclusive ', 'title': 'Limit', 'type': 'integer'}}, title='ListDeniedWorkspaceInviteRequestsRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='ListDeniedWorkspaceInviteRequestsResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['admin.inviteRequests.denied', 'admin'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='List All Denied Workspace Invite Requests.'), ActionModel(name='SLACK_MARK_WORKFLOW_STEP_AS_COMPLETED', display_name='Mark workflow step as completed', parameters=ActionParametersModel(properties={'workflow_step_execute_id': {'description': 'Context identifier that maps to the correct workflow step execution.', 'title': 'Workflow Step Execute Id', 'type': 'string'}, 'outputs': {'default': None, 'description': 'Key-value object of outputs from your step. Keys of this object reflect the configured `key` properties of your [`outputs`](https://slack.dev) array from your `workflow_step` object. ', 'title': 'Outputs', 'type': 'string'}}, title='MarkWorkflowStepAsCompletedRequest', type='object', required=['workflow_step_execute_id']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='MarkWorkflowStepAsCompletedResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['workflows'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description=\"Indicate That An App's Step In A Workflow Completed Execution.\"), ActionModel(name='SLACK_ADD_A_REMOTE_FILE_FROM_A_SERVICE', display_name='Add a remote file from a service', parameters=ActionParametersModel(properties={'title': {'default': None, 'description': 'Title of the file being shared.', 'title': 'Title', 'type': 'string'}, 'external_id': {'default': None, 'description': 'Creator defined GUID for the file.', 'title': 'External Id', 'type': 'string'}, 'external_url': {'default': None, 'description': 'URL of the remote file.', 'title': 'External Url', 'type': 'string'}, 'filetype': {'default': None, 'description': 'type of file', 'title': 'Filetype', 'type': 'string'}, 'indexable_file_contents': {'default': None, 'description': 'A text file (txt, pdf, doc, etc.) containing textual search terms that are used to improve discovery of the remote file. ', 'title': 'Indexable File Contents', 'type': 'string'}, 'preview_image': {'default': None, 'description': 'Preview of the document via `multipart/form-data`.', 'title': 'Preview Image', 'type': 'string'}, 'token': {'default': None, 'description': 'Authentication token. Requires scope: `remote_files:write`', 'title': 'Token', 'type': 'string'}}, title='AddARemoteFileFromAServiceRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='AddARemoteFileFromAServiceResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['files.remote', 'files'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Adds A File From A Remote Service'), ActionModel(name='SLACK_SET_A_CONVERSATION_S_PURPOSE', display_name='Set a conversation s purpose', parameters=ActionParametersModel(properties={'channel': {'default': None, 'description': 'Conversation to set the purpose of', 'title': 'Channel', 'type': 'string'}, 'purpose': {'default': None, 'description': 'A new, specialer purpose', 'title': 'Purpose', 'type': 'string'}}, title='SetAConversationSPurposeRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='SetAConversationSPurposeResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['conversations'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Sets The Purpose For A Conversation.'), ActionModel(name='SLACK_FETCH_DND_STATUS_FOR_MULTIPLE_TEAM_MEMBERS', display_name='Fetch dnd status for multiple team members', parameters=ActionParametersModel(properties={'users': {'default': None, 'description': 'Comma-separated list of users to fetch Do Not Disturb status for', 'title': 'Users', 'type': 'string'}}, title='FetchDndStatusForMultipleTeamMembersRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='FetchDndStatusForMultipleTeamMembersResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['dnd'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Retrieves The Do Not Disturb Status For Up To 50 Users On A Team.'), ActionModel(name='SLACK_SENDS_A_MESSAGE_TO_A_SLACK_CHANNEL', display_name='Sends a message to a slack channel', parameters=ActionParametersModel(properties={'as_user': {'default': None, 'description': 'Pass true to post the message as the authed user, instead of as a bot. Defaults to false. See [authorship](https://slack.dev) below. ', 'title': 'As User', 'type': 'boolean'}, 'attachments': {'default': None, 'description': 'A JSON-based array of structured attachments, presented as a URL-encoded string. ', 'title': 'Attachments', 'type': 'string'}, 'blocks': {'default': None, 'description': 'A JSON-based array of structured blocks, presented as a URL-encoded string. ', 'title': 'Blocks', 'type': 'string'}, 'channel': {'description': 'Channel, private group, or IM channel to send message to. Can be an encoded ID, or a name. See [below](https://slack.dev) for more details. ', 'title': 'Channel', 'type': 'string'}, 'icon_emoji': {'default': None, 'description': 'Emoji to use as the icon for this message. Overrides `icon_url`. Must be used in conjunction with `as_user` set to `false`, otherwise ignored. See [authorship](https://slack.dev) below. ', 'title': 'Icon Emoji', 'type': 'string'}, 'icon_url': {'default': None, 'description': 'URL to an image to use as the icon for this message. Must be used in conjunction with `as_user` set to false, otherwise ignored. See [authorship](https://slack.dev) below. ', 'title': 'Icon Url', 'type': 'string'}, 'link_names': {'default': None, 'description': 'Find and link channel names and usernames.', 'title': 'Link Names', 'type': 'boolean'}, 'mrkdwn': {'default': None, 'description': 'Disable Slack markup parsing by setting to `false`. Enabled by default.', 'title': 'Mrkdwn', 'type': 'boolean'}, 'parse': {'default': None, 'description': 'Change how messages are treated. Defaults to `none`. See [below](https://slack.dev). ', 'title': 'Parse', 'type': 'string'}, 'reply_broadcast': {'default': None, 'description': 'Used in conjunction with `thread_ts` and indicates whether reply should be made visible to everyone in the channel or conversation. Defaults to `false`. ', 'title': 'Reply Broadcast', 'type': 'boolean'}, 'text': {'default': None, 'description': 'How this field works and whether it is required depends on other fields you use in your API call. [See below](https://slack.dev) for more detail. ', 'title': 'Text', 'type': 'string'}, 'thread_ts': {'default': None, 'description': 'Provide another message\"s `ts` value to make this message a reply. Avoid using a reply\"s `ts` value; use its parent instead. ', 'title': 'Thread Ts', 'type': 'string'}, 'unfurl_links': {'default': None, 'description': 'Pass true to enable unfurling of primarily text-based content.', 'title': 'Unfurl Links', 'type': 'boolean'}, 'unfurl_media': {'default': None, 'description': 'Pass false to disable unfurling of media content.', 'title': 'Unfurl Media', 'type': 'boolean'}, 'username': {'default': None, 'description': 'Set your bot\"s user name. Must be used in conjunction with `as_user` set to false, otherwise ignored. See [authorship](https://slack.dev) below. ', 'title': 'Username', 'type': 'string'}}, title='SendsAMessageToASlackChannelRequest', type='object', required=['channel']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='SendsAMessageToASlackChannelResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['chat', 'important'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Sends A Message To A Channel.'), ActionModel(name='SLACK_SCHEDULES_A_MESSAGE_TO_A_CHANNEL_AT_A_SPECIFIED_TIME', display_name='Schedules a message to a channel at a specified time', parameters=ActionParametersModel(properties={'as_user': {'default': None, 'description': 'Pass true to post the message as the authed user, instead of as a bot. Defaults to false. See [chat.postMessage](chat.postMessage#authorship). ', 'title': 'As User', 'type': 'boolean'}, 'attachments': {'default': None, 'description': 'A JSON-based array of structured attachments, presented as a URL-encoded string. ', 'title': 'Attachments', 'type': 'string'}, 'blocks': {'default': None, 'description': 'A JSON-based array of structured blocks, presented as a URL-encoded string. ', 'title': 'Blocks', 'type': 'string'}, 'channel': {'default': None, 'description': 'Channel, private group, or DM channel to send message to. Can be an encoded ID, or a name. See [below](https://slack.dev) for more details. ', 'title': 'Channel', 'type': 'string'}, 'link_names': {'default': None, 'description': 'Find and link channel names and usernames.', 'title': 'Link Names', 'type': 'boolean'}, 'parse': {'default': None, 'description': 'Change how messages are treated. Defaults to `none`. See [chat.postMessage](chat.postMessage#formatting). ', 'title': 'Parse', 'type': 'string'}, 'post_at': {'default': None, 'description': 'Unix EPOCH timestamp of time in future to send the message.', 'title': 'Post At', 'type': 'string'}, 'reply_broadcast': {'default': None, 'description': 'Used in conjunction with `thread_ts` and indicates whether reply should be made visible to everyone in the channel or conversation. Defaults to `false`. ', 'title': 'Reply Broadcast', 'type': 'boolean'}, 'text': {'default': None, 'description': 'How this field works and whether it is required depends on other fields you use in your API call. [See below](https://slack.dev) for more detail. ', 'title': 'Text', 'type': 'string'}, 'thread_ts': {'default': None, 'description': 'Provide another message\"s `ts` value to make this message a reply. Avoid using a reply\"s `ts` value; use its parent instead. ', 'title': 'Thread Ts', 'type': 'integer'}, 'unfurl_links': {'default': None, 'description': 'Pass true to enable unfurling of primarily text-based content.', 'title': 'Unfurl Links', 'type': 'boolean'}, 'unfurl_media': {'default': None, 'description': 'Pass false to disable unfurling of media content.', 'title': 'Unfurl Media', 'type': 'boolean'}}, title='SchedulesAMessageToAChannelAtASpecifiedTimeRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='SchedulesAMessageToAChannelAtASpecifiedTimeResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['chat', 'important'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Schedules A Message To Be Sent To A Channel.'), ActionModel(name='SLACK_END_A_CALL_WITH_DURATION_AND_ID', display_name='End a call with duration and id', parameters=ActionParametersModel(properties={'duration': {'default': None, 'description': 'Call duration in seconds', 'title': 'Duration', 'type': 'integer'}, 'id': {'description': '`id` returned when registering the call using the [`calls.add`](https://slack.dev) method. ', 'title': 'Id', 'type': 'string'}}, title='EndACallWithDurationAndIdRequest', type='object', required=['id']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='EndACallWithDurationAndIdResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['calls'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Ends A Call.'), ActionModel(name='SLACK_INITIATES_CHANNEL_BASED_CONVERSATIONS', display_name='Initiates channel based conversations', parameters=ActionParametersModel(properties={'is_private': {'default': None, 'description': 'Create a private channel instead of a public one', 'title': 'Is Private', 'type': 'boolean'}, 'name': {'default': None, 'description': 'Name of the public or private channel to create', 'title': 'Name', 'type': 'string'}}, title='InitiatesChannelBasedConversationsRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='InitiatesChannelBasedConversationsResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['conversations'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Initiates A Public Or Private Channel Based Conversation'), ActionModel(name='SLACK_ARCHIVE_A_SLACK_CONVERSATION', display_name='Archive a slack conversation', parameters=ActionParametersModel(properties={'channel': {'default': None, 'description': 'ID of conversation to archive', 'title': 'Channel', 'type': 'string'}}, title='ArchiveASlackConversationRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='ArchiveASlackConversationResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['conversations'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Archives A Conversation.'), ActionModel(name='SLACK_LIST_TEAM_CUSTOM_EMOJIS', display_name='List team custom emojis', parameters=ActionParametersModel(properties={}, title='ListTeamCustomEmojisRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='ListTeamCustomEmojisResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['emoji'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Lists Custom Emoji For A Team.'), ActionModel(name='SLACK_REVOKES_A_TOKEN_WITH_OPTIONAL_TEST_MODE', display_name='Revokes a token with optional test mode', parameters=ActionParametersModel(properties={'test': {'default': None, 'description': 'Setting this parameter to `1` triggers a _testing mode_ where the specified token will not actually be revoked. ', 'title': 'Test', 'type': 'boolean'}}, title='RevokesATokenWithOptionalTestModeRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='RevokesATokenWithOptionalTestModeResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['auth'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Revokes A Token.'), ActionModel(name='SLACK_LIST_APPROVED_APPS_FOR_ORG_OR_WORKSPACE', display_name='List approved apps for org or workspace', parameters=ActionParametersModel(properties={'limit': {'default': None, 'description': 'The maximum number of items to return. Must be between 1 - 1000 both inclusive. ', 'title': 'Limit', 'type': 'integer'}, 'cursor': {'default': None, 'description': 'Set `cursor` to `next_cursor` returned by the previous call to list items in the next page ', 'title': 'Cursor', 'type': 'string'}, 'team_id': {'default': None, 'description': 'Team Id', 'title': 'Team Id', 'type': 'string'}, 'enterprise_id': {'default': None, 'description': 'Enterprise Id', 'title': 'Enterprise Id', 'type': 'string'}}, title='ListApprovedAppsForOrgOrWorkspaceRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='ListApprovedAppsForOrgOrWorkspaceResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['admin.apps.approved', 'admin'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='List Approved Apps For An Org Or Workspace.'), ActionModel(name='SLACK_SET_WORKSPACE_CONNECTIONS_FOR_A_CHANNEL', display_name='Set workspace connections for a channel', parameters=ActionParametersModel(properties={'channel_id': {'description': 'The encoded `channel_id` to add or remove to workspaces.', 'title': 'Channel Id', 'type': 'string'}, 'org_channel': {'default': None, 'description': 'True if channel has to be converted to an org channel', 'title': 'Org Channel', 'type': 'boolean'}, 'target_team_ids': {'default': None, 'description': 'A comma-separated list of workspaces to which the channel should be shared. Not required if the channel is being shared org-wide. ', 'title': 'Target Team Ids', 'type': 'string'}, 'team_id': {'default': None, 'description': 'The workspace to which the channel belongs. Omit this argument if the channel is a cross-workspace shared channel. ', 'title': 'Team Id', 'type': 'string'}}, title='SetWorkspaceConnectionsForAChannelRequest', type='object', required=['channel_id']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='SetWorkspaceConnectionsForAChannelResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['admin.conversations', 'admin'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Set The Workspaces In An Enterprise Grid Org That Connect To A Public Or Private Channel.'), ActionModel(name='SLACK_SET_READ_CURSOR_IN_A_CONVERSATION', display_name='Set read cursor in a conversation', parameters=ActionParametersModel(properties={'channel': {'default': None, 'description': 'Channel or conversation to set the read cursor for.', 'title': 'Channel', 'type': 'string'}, 'ts': {'default': None, 'description': 'Unique identifier of message you want marked as most recently seen in this conversation. ', 'title': 'Ts', 'type': 'integer'}}, title='SetReadCursorInAConversationRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='SetReadCursorInAConversationResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['conversations'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Sets The Read Cursor In A Channel.'), ActionModel(name='SLACK_LIST_PENDING_WORKSPACE_INVITE_REQUESTS', display_name='List pending workspace invite requests', parameters=ActionParametersModel(properties={'team_id': {'default': None, 'description': 'ID for the workspace where the invite requests were made.', 'title': 'Team Id', 'type': 'string'}, 'cursor': {'default': None, 'description': 'Value of the `next_cursor` field sent as part of the previous API response ', 'title': 'Cursor', 'type': 'string'}, 'limit': {'default': None, 'description': 'The number of results that will be returned by the API on each invocation. Must be between 1 - 1000, both inclusive ', 'title': 'Limit', 'type': 'integer'}}, title='ListPendingWorkspaceInviteRequestsRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='ListPendingWorkspaceInviteRequestsResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['admin.inviteRequests', 'admin'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='List All Pending Workspace Invite Requests.'), ActionModel(name='SLACK_REGISTERS_A_NEW_CALL_WITH_PARTICIPANTS', display_name='Registers a new call with participants', parameters=ActionParametersModel(properties={'title': {'default': None, 'description': 'The name of the Call.', 'title': 'Title', 'type': 'string'}, 'created_by': {'default': None, 'description': 'The valid Slack user ID of the user who created this Call. When this method is called with a user token, the `created_by` field is optional and defaults to the authed user of the token. Otherwise, the field is required. ', 'title': 'Created By', 'type': 'string'}, 'date_start': {'default': None, 'description': 'Call start time in UTC UNIX timestamp format', 'title': 'Date Start', 'type': 'integer'}, 'desktop_app_join_url': {'default': None, 'description': 'When supplied, available Slack clients will attempt to directly launch the 3rd-party Call with this URL. ', 'title': 'Desktop App Join Url', 'type': 'string'}, 'external_display_id': {'default': None, 'description': 'An optional, human-readable ID supplied by the 3rd-party Call provider. If supplied, this ID will be displayed in the Call object. ', 'title': 'External Display Id', 'type': 'string'}, 'external_unique_id': {'description': 'An ID supplied by the 3rd-party Call provider. It must be unique across all Calls from that service. ', 'title': 'External Unique Id', 'type': 'string'}, 'join_url': {'description': 'The URL required for a client to join the Call.', 'title': 'Join Url', 'type': 'string'}, 'users': {'default': None, 'description': 'The list of users to register as participants in the Call. [Read more on how to specify users here](https://slack.dev). ', 'title': 'Users', 'type': 'string'}}, title='RegistersANewCallWithParticipantsRequest', type='object', required=['external_unique_id', 'join_url']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='RegistersANewCallWithParticipantsResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['calls'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Registers A New Call.'), ActionModel(name='SLACK_SEARCH_CHANNELS_IN_AN_ENTERPRISE_ORGANIZATION', display_name='Search channels in an enterprise organization', parameters=ActionParametersModel(properties={'team_ids': {'default': None, 'description': 'Comma separated string of team IDs, signifying the workspaces to search through. ', 'title': 'Team Ids', 'type': 'string'}, 'query': {'default': None, 'description': 'Name of the the channel to query by.', 'title': 'Query', 'type': 'string'}, 'limit': {'default': None, 'description': 'Maximum number of items to be returned. Must be between 1 - 20 both inclusive. Default is 10. ', 'title': 'Limit', 'type': 'integer'}, 'cursor': {'default': None, 'description': 'Set `cursor` to `next_cursor` returned by the previous call to list items in the next page. ', 'title': 'Cursor', 'type': 'string'}, 'search_channel_types': {'default': None, 'description': 'The type of channel to include or exclude in the search. For example `private` will search private channels, while `private_exclude` will exclude them. For a full list of types, check the [Types section](https://slack.dev). ', 'title': 'Search Channel Types', 'type': 'string'}, 'sort': {'default': None, 'description': 'Possible values are `relevant` (search ranking based on what we think is closest), `name` (alphabetical), `member_count` (number of users in the channel), and `created` (date channel was created). You can optionally pair this with the `sort_dir` arg to change how it is sorted  ', 'title': 'Sort', 'type': 'string'}, 'sort_dir': {'default': None, 'description': 'Sort direction. Possible values are `asc` for ascending order like (1, 2, 3) or (a, b, c), and `desc` for descending order like (3, 2, 1) or (c, b, a) ', 'title': 'Sort Dir', 'type': 'string'}}, title='SearchChannelsInAnEnterpriseOrganizationRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='SearchChannelsInAnEnterpriseOrganizationResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['admin.conversations', 'admin'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Search For Public Or Private Channels In An Enterprise Organization.'), ActionModel(name='SLACK_DELETE_USER_PROFILE_PHOTO', display_name='Delete user profile photo', parameters=ActionParametersModel(properties={'token': {'description': 'Authentication token. Requires scope: `users.profile:write`', 'title': 'Token', 'type': 'string'}}, title='DeleteUserProfilePhotoRequest', type='object', required=['token']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='DeleteUserProfilePhotoResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['users'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Delete The User Profile Photo'), ActionModel(name='SLACK_INVALIDATE_A_USER_SESSION_BY_ID', display_name='Invalidate a user session by id', parameters=ActionParametersModel(properties={'session_id': {'description': 'Session Id', 'title': 'Session Id', 'type': 'integer'}, 'team_id': {'description': 'ID of the team that the session belongs to', 'title': 'Team Id', 'type': 'string'}}, title='InvalidateAUserSessionByIdRequest', type='object', required=['session_id', 'team_id']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='InvalidateAUserSessionByIdResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['admin.users.session', 'admin'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Invalidate A Single Session For A User By Session'), ActionModel(name='SLACK_LISTS_USER_S_STARRED_ITEMS_WITH_PAGINATION', display_name='Lists user s starred items with pagination', parameters=ActionParametersModel(properties={'count': {'default': None, 'description': 'Count', 'title': 'Count', 'type': 'string'}, 'page': {'default': None, 'description': 'Page', 'title': 'Page', 'type': 'string'}, 'cursor': {'default': None, 'description': 'Parameter for pagination. Set `cursor` equal to the `next_cursor` attribute returned by the previous request\"s `response_metadata`. This parameter is optional, but pagination is mandatory: the default value simply fetches the first \"page\" of the collection. See [pagination](https://slack.dev) for more details. ', 'title': 'Cursor', 'type': 'string'}, 'limit': {'default': None, 'description': 'The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the list hasn\"t been reached. ', 'title': 'Limit', 'type': 'integer'}}, title='ListsUserSStarredItemsWithPaginationRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='ListsUserSStarredItemsWithPaginationResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['stars'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Lists Stars For A User.'), ActionModel(name='SLACK_JOIN_AN_EXISTING_CONVERSATION', display_name='Join an existing conversation', parameters=ActionParametersModel(properties={'channel': {'default': None, 'description': 'ID of conversation to join', 'title': 'Channel', 'type': 'string'}}, title='JoinAnExistingConversationRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='JoinAnExistingConversationResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['conversations'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Joins An Existing Conversation.'), ActionModel(name='SLACK_RETRIEVE_MESSAGE_PERMALINK_URL', display_name='Retrieve message permalink url', parameters=ActionParametersModel(properties={'channel': {'description': 'The ID of the conversation or channel containing the message', 'title': 'Channel', 'type': 'string'}, 'message_ts': {'description': 'A message\"s `ts` value, uniquely identifying it within a channel', 'title': 'Message Ts', 'type': 'string'}}, title='RetrieveMessagePermalinkUrlRequest', type='object', required=['channel', 'message_ts']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='RetrieveMessagePermalinkUrlResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['chat'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Retrieve A Permalink Url For A Specific Extant Message'), ActionModel(name='SLACK_RETRIEVE_CURRENT_USER_DND_STATUS', display_name='Retrieve current user dnd status', parameters=ActionParametersModel(properties={'user': {'default': None, 'description': 'User to fetch status for (defaults to current user)', 'title': 'User', 'type': 'string'}}, title='RetrieveCurrentUserDndStatusRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='RetrieveCurrentUserDndStatusResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['dnd'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description=\"Retrieves A User's Current Do Not Disturb Status.\"), ActionModel(name='SLACK_REMOVE_IDP_GROUP_FROM_PRIVATE_CHANNEL', display_name='Remove idp group from private channel', parameters=ActionParametersModel(properties={'channel_id': {'description': 'The channel to remove the linked group from.', 'title': 'Channel Id', 'type': 'string'}, 'group_id': {'description': 'The [IDP Group](https://slack.com/help/articles/115001435788-Connect-identity-provider-groups-to-your-Enterprise-Grid-org) ID to remove from the private channel. ', 'title': 'Group Id', 'type': 'string'}, 'team_id': {'description': 'The workspace where the channel exists. This argument is required for channels only tied to one workspace, and optional for channels that are shared across an organization. ', 'title': 'Team Id', 'type': 'string'}, 'token': {'description': 'Authentication token. Requires scope: `admin.conversations:write`', 'title': 'Token', 'type': 'string'}}, title='RemoveIdpGroupFromPrivateChannelRequest', type='object', required=['channel_id', 'group_id', 'team_id', 'token']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='RemoveIdpGroupFromPrivateChannelResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['admin.conversations.restrictAccess', 'admin'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Remove A Linked Idp Group Linked From A Private Channel'), ActionModel(name='SLACK_UPDATE_WORKFLOW_EXTENSION_STEP_CONFIGURATION', display_name='Update workflow extension step configuration', parameters=ActionParametersModel(properties={'workflow_step_edit_id': {'description': 'A context identifier provided with `view_submission` payloads used to call back to `workflows.updateStep`. ', 'title': 'Workflow Step Edit Id', 'type': 'string'}, 'inputs': {'default': None, 'description': 'A JSON key-value map of inputs required from a user during configuration. This is the data your app expects to receive when the workflow step starts. **Please note**: the embedded variable format is set and replaced by the workflow system. You cannot create custom variables that will be replaced at runtime. [Read more about variables in workflow steps here](https://slack.dev). ', 'title': 'Inputs', 'type': 'string'}, 'outputs': {'default': None, 'description': 'An JSON array of output objects used during step execution. This is the data your app agrees to provide when your workflow step was executed. ', 'title': 'Outputs', 'type': 'string'}, 'step_name': {'default': None, 'description': 'An optional field that can be used to override the step name that is shown in the Workflow Builder. ', 'title': 'Step Name', 'type': 'string'}, 'step_image_url': {'default': None, 'description': 'An optional field that can be used to override app image that is shown in the Workflow Builder. ', 'title': 'Step Image Url', 'type': 'string'}}, title='UpdateWorkflowExtensionStepConfigurationRequest', type='object', required=['workflow_step_edit_id']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='UpdateWorkflowExtensionStepConfigurationResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['workflows'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Update The Configuration For A Workflow Extension Step.'), ActionModel(name='SLACK_LIST_FILES_WITH_FILTERS_IN_SLACK', display_name='List files with filters in slack', parameters=ActionParametersModel(properties={'user': {'default': None, 'description': 'Filter files created by a single user.', 'title': 'User', 'type': 'string'}, 'channel': {'default': None, 'description': 'Filter files appearing in a specific channel, indicated by its ID.', 'title': 'Channel', 'type': 'string'}, 'ts_from': {'default': None, 'description': 'Filter files created after this timestamp (inclusive).', 'title': 'Ts From', 'type': 'integer'}, 'ts_to': {'default': None, 'description': 'Filter files created before this timestamp (inclusive).', 'title': 'Ts To', 'type': 'integer'}, 'types': {'default': None, 'description': 'Filter files by type ([see below](https://slack.dev)). You can pass multiple values in the types argument, like `types=spaces,snippets`.The default value is `all`, which does not filter the list. ', 'title': 'Types', 'type': 'string'}, 'count': {'default': None, 'description': 'Count', 'title': 'Count', 'type': 'string'}, 'page': {'default': None, 'description': 'Page', 'title': 'Page', 'type': 'string'}, 'show_files_hidden_by_limit': {'default': None, 'description': 'Show truncated file info for files hidden due to being too old, and the team who owns the file being over the file limit. ', 'title': 'Show Files Hidden By Limit', 'type': 'boolean'}}, title='ListFilesWithFiltersInSlackRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='ListFilesWithFiltersInSlackResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['files'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='List For A Team, In A Channel, Or From A User With Applied Filters.'), ActionModel(name='SLACK_ADD_A_STAR_TO_AN_ITEM', display_name='Add a star to an item', parameters=ActionParametersModel(properties={'channel': {'default': None, 'description': 'Channel to add star to, or channel where the message to add star to was posted (used with `timestamp`). ', 'title': 'Channel', 'type': 'string'}, 'file': {'default': None, 'description': 'File to add star to.', 'title': 'File', 'type': 'string'}, 'file_comment': {'default': None, 'description': 'File comment to add star to.', 'title': 'File Comment', 'type': 'string'}, 'timestamp': {'default': None, 'description': 'Timestamp of the message to add star to.', 'title': 'Timestamp', 'type': 'string'}}, title='AddAStarToAnItemRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='AddAStarToAnItemResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['stars'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Adds A Star To An Item.'), ActionModel(name='SLACK_OPEN_OR_RESUME_DIRECT_OR_MULTI_PERSON_MESSAGES', display_name='Open or resume direct or multi person messages', parameters=ActionParametersModel(properties={'channel': {'default': None, 'description': 'Resume a conversation by supplying an `im` or `mpim`\"s ID. Or provide the `users` field instead. ', 'title': 'Channel', 'type': 'string'}, 'return_im': {'default': None, 'description': 'Boolean, indicates you want the full IM channel definition in the response. ', 'title': 'Return Im', 'type': 'boolean'}, 'users': {'default': None, 'description': 'Comma separated lists of users. If only one user is included, this creates a 1:1 DM.  The ordering of the users is preserved whenever a multi-person direct message is returned. Supply a `channel` when not supplying `users`. ', 'title': 'Users', 'type': 'string'}}, title='OpenOrResumeDirectOrMultiPersonMessagesRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='OpenOrResumeDirectOrMultiPersonMessagesResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['conversations'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Opens Or Resumes A Direct Message Or Multi Person Direct Message.'), ActionModel(name='SLACK_LIST_APP_RESOURCE_GRANTS_ON_A_TEAM', display_name='List app resource grants on a team', parameters=ActionParametersModel(properties={'cursor': {'default': None, 'description': 'Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request\"s `response_metadata`. Default value fetches the first \"page\" of the collection. See [pagination](https://slack.dev) for more detail. ', 'title': 'Cursor', 'type': 'string'}, 'limit': {'default': None, 'description': 'The maximum number of items to return.', 'title': 'Limit', 'type': 'integer'}}, title='ListAppResourceGrantsOnATeamRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='ListAppResourceGrantsOnATeamResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['apps.permissions.resources', 'apps'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Returns List Of Resource Grants This App Has On A Team.'), ActionModel(name='SLACK_LIST_ALL_TEAMS_IN_AN_ENTERPRISE_ORGANIZATION', display_name='List all teams in an enterprise organization', parameters=ActionParametersModel(properties={'limit': {'default': None, 'description': 'The maximum number of items to return. Must be between 1 - 100 both inclusive. ', 'title': 'Limit', 'type': 'integer'}, 'cursor': {'default': None, 'description': 'Set `cursor` to `next_cursor` returned by the previous call to list items in the next page. ', 'title': 'Cursor', 'type': 'string'}}, title='ListAllTeamsInAnEnterpriseOrganizationRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='ListAllTeamsInAnEnterpriseOrganizationResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['admin.teams', 'admin'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='List All Teams On An Enterprise Organization'), ActionModel(name='SLACK_LIST_SCHEDULED_MESSAGES_IN_A_CHANNEL', display_name='List scheduled messages in a channel', parameters=ActionParametersModel(properties={'channel': {'default': None, 'description': 'The channel of the scheduled messages', 'title': 'Channel', 'type': 'string'}, 'latest': {'default': None, 'description': 'A UNIX timestamp of the latest value in the time range', 'title': 'Latest', 'type': 'integer'}, 'oldest': {'default': None, 'description': 'A UNIX timestamp of the oldest value in the time range', 'title': 'Oldest', 'type': 'integer'}, 'limit': {'default': None, 'description': 'Maximum number of original entries to return.', 'title': 'Limit', 'type': 'integer'}, 'cursor': {'default': None, 'description': 'For pagination purposes, this is the `cursor` value returned from a previous call to `chat.scheduledmessages.list` indicating where you want to start this call from. ', 'title': 'Cursor', 'type': 'string'}}, title='ListScheduledMessagesInAChannelRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='ListScheduledMessagesInAChannelResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['chat.scheduledMessages', 'chat'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Returns A List Of Scheduled Messages.'), ActionModel(name='SLACK_ARCHIVE_A_PUBLIC_OR_PRIVATE_CHANNEL', display_name='Archive a public or private channel', parameters=ActionParametersModel(properties={'channel_id': {'description': 'The channel to archive.', 'title': 'Channel Id', 'type': 'string'}}, title='ArchiveAPublicOrPrivateChannelRequest', type='object', required=['channel_id']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='ArchiveAPublicOrPrivateChannelResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['admin.conversations', 'admin'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Archive A Public Or Private Channel.'), ActionModel(name='SLACK_RENAME_A_SLACK_CHANNEL', display_name='Rename a slack channel', parameters=ActionParametersModel(properties={'channel_id': {'description': 'The channel to rename.', 'title': 'Channel Id', 'type': 'string'}, 'name': {'description': 'Name', 'title': 'Name', 'type': 'string'}}, title='RenameASlackChannelRequest', type='object', required=['channel_id', 'name']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='RenameASlackChannelResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['admin.conversations', 'admin'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Rename A Public Or Private Channel.'), ActionModel(name='SLACK_LEAVE_A_CONVERSATION', display_name='Leave a conversation', parameters=ActionParametersModel(properties={'channel': {'default': None, 'description': 'Conversation to leave', 'title': 'Channel', 'type': 'string'}}, title='LeaveAConversationRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='LeaveAConversationResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['conversations'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Leaves A Conversation.'), ActionModel(name='SLACK_UPDATES_AN_EXISTING_REMOTE_FILE', display_name='Updates an existing remote file', parameters=ActionParametersModel(properties={'title': {'default': None, 'description': 'Title of the file being shared.', 'title': 'Title', 'type': 'string'}, 'external_id': {'default': None, 'description': 'Creator defined GUID for the file.', 'title': 'External Id', 'type': 'string'}, 'external_url': {'default': None, 'description': 'URL of the remote file.', 'title': 'External Url', 'type': 'string'}, 'file': {'default': None, 'description': 'Specify a file by providing its ID.', 'title': 'File', 'type': 'string'}, 'filetype': {'default': None, 'description': 'type of file', 'title': 'Filetype', 'type': 'string'}, 'indexable_file_contents': {'default': None, 'description': 'File containing contents that can be used to improve searchability for the remote file. ', 'title': 'Indexable File Contents', 'type': 'string'}, 'preview_image': {'default': None, 'description': 'Preview of the document via `multipart/form-data`.', 'title': 'Preview Image', 'type': 'string'}, 'token': {'default': None, 'description': 'Authentication token. Requires scope: `remote_files:write`', 'title': 'Token', 'type': 'string'}}, title='UpdatesAnExistingRemoteFileRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='UpdatesAnExistingRemoteFileResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['files.remote', 'files'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Updates An Existing Remote File.'), ActionModel(name='SLACK_SET_WORKSPACE_ICON', display_name='Set workspace icon', parameters=ActionParametersModel(properties={'image_url': {'description': 'Image URL for the icon', 'title': 'Image Url', 'type': 'string'}, 'team_id': {'description': 'ID for the workspace to set the icon for.', 'title': 'Team Id', 'type': 'string'}, 'token': {'description': 'Authentication token. Requires scope: `admin.teams:write`', 'title': 'Token', 'type': 'string'}}, title='SetWorkspaceIconRequest', type='object', required=['image_url', 'team_id', 'token']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='SetWorkspaceIconResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['admin.teams.settings', 'admin'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Sets The Icon Of A Workspace.'), ActionModel(name='SLACK_SET_SLACK_USER_PROFILE_INFORMATION', display_name='Set slack user profile information', parameters=ActionParametersModel(properties={'name': {'default': None, 'description': 'Name of a single key to set. Usable only if `profile` is not passed.', 'title': 'Name', 'type': 'string'}, 'profile': {'default': None, 'description': 'Collection of key:value pairs presented as a URL-encoded JSON hash. At most 50 fields may be set. Each field name is limited to 255 characters. ', 'title': 'Profile', 'type': 'string'}, 'user': {'default': None, 'description': 'ID of user to change. This argument may only be specified by team admins on paid teams. ', 'title': 'User', 'type': 'string'}, 'value': {'default': None, 'description': 'Value to set a single key to. Usable only if `profile` is not passed.', 'title': 'Value', 'type': 'string'}}, title='SetSlackUserProfileInformationRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='SetSlackUserProfileInformationResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['users.profile', 'users'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Set The Profile Information For A User.'), ActionModel(name='SLACK_INVITE_USER_TO_CHANNEL', display_name='Invite user to channel', parameters=ActionParametersModel(properties={'channel_id': {'description': 'The channel that the users will be invited to.', 'title': 'Channel Id', 'type': 'string'}, 'user_ids': {'description': 'The users to invite.', 'title': 'User Ids', 'type': 'string'}}, title='InviteUserToChannelRequest', type='object', required=['channel_id', 'user_ids']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='InviteUserToChannelResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['admin.conversations', 'admin'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Invite A User To A Public Or Private Channel.'), ActionModel(name='SLACK_REMOVE_A_USER_FROM_A_CONVERSATION', display_name='Remove a user from a conversation', parameters=ActionParametersModel(properties={'channel': {'default': None, 'description': 'ID of conversation to remove user from.', 'title': 'Channel', 'type': 'string'}, 'user': {'default': None, 'description': 'User ID to be removed.', 'title': 'User', 'type': 'string'}}, title='RemoveAUserFromAConversationRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='RemoveAUserFromAConversationResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['conversations'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Removes A User From A Conversation.'), ActionModel(name='SLACK_INVITE_USERS_TO_A_SLACK_CHANNEL', display_name='Invite users to a slack channel', parameters=ActionParametersModel(properties={'channel': {'default': None, 'description': 'The ID of the public or private channel to invite user(s) to.', 'title': 'Channel', 'type': 'string'}, 'users': {'default': None, 'description': 'A comma separated list of user IDs. Up to 1000 users may be listed.', 'title': 'Users', 'type': 'string'}}, title='InviteUsersToASlackChannelRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='InviteUsersToASlackChannelResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['conversations'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Invites Users To A Channel.'), ActionModel(name='SLACK_MARK_A_USER_AS_ACTIVE_DEPRECATED', display_name='Mark a user as active  deprecated', parameters=ActionParametersModel(properties={}, title='MarkAUserAsActiveDeprecatedRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='MarkAUserAsActiveDeprecatedResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['users'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Marked A User As Active. Deprecated And Non Functional.'), ActionModel(name='SLACK_LIST_APPROVED_WORKSPACE_INVITE_REQUESTS', display_name='List approved workspace invite requests', parameters=ActionParametersModel(properties={'team_id': {'default': None, 'description': 'ID for the workspace where the invite requests were made.', 'title': 'Team Id', 'type': 'string'}, 'cursor': {'default': None, 'description': 'Value of the `next_cursor` field sent as part of the previous API response ', 'title': 'Cursor', 'type': 'string'}, 'limit': {'default': None, 'description': 'The number of results that will be returned by the API on each invocation. Must be between 1 - 1000, both inclusive ', 'title': 'Limit', 'type': 'integer'}}, title='ListApprovedWorkspaceInviteRequestsRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='ListApprovedWorkspaceInviteRequestsResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['admin.inviteRequests.approved', 'admin'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='List All Approved Workspace Invite Requests.'), ActionModel(name='SLACK_OPEN_A_VIEW_FOR_A_SLACK_USER', display_name='Open a view for a slack user', parameters=ActionParametersModel(properties={'trigger_id': {'description': 'Exchange a trigger to post to the user.', 'title': 'Trigger Id', 'type': 'string'}, 'view': {'description': 'A [view payload](https://slack.dev). This must be a JSON-encoded string.', 'title': 'View', 'type': 'string'}}, title='OpenAViewForASlackUserRequest', type='object', required=['trigger_id', 'view']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='OpenAViewForASlackUserResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['views'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Open A View For A User.'), ActionModel(name='SLACK_PINS_AN_ITEM_TO_A_CHANNEL', display_name='Pins an item to a channel', parameters=ActionParametersModel(properties={'channel': {'description': 'Channel to pin the item in.', 'title': 'Channel', 'type': 'string'}, 'timestamp': {'default': None, 'description': 'Timestamp of the message to pin.', 'title': 'Timestamp', 'type': 'string'}}, title='PinsAnItemToAChannelRequest', type='object', required=['channel']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='PinsAnItemToAChannelResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['pins'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Pins An Item To A Channel.'), ActionModel(name='SLACK_REMOVE_CHANNELS_FROM_IDP_GROUP', display_name='Remove channels from idp group', parameters=ActionParametersModel(properties={'channel_ids': {'description': 'Comma-separated string of channel IDs', 'title': 'Channel Ids', 'type': 'string'}, 'usergroup_id': {'description': 'ID of the IDP Group', 'title': 'Usergroup Id', 'type': 'string'}}, title='RemoveChannelsFromIdpGroupRequest', type='object', required=['channel_ids', 'usergroup_id']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='RemoveChannelsFromIdpGroupResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['admin.usergroups', 'admin'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Remove One Or More Default Channels From An Org Level Idp Group (User Group).'), ActionModel(name='SLACK_DISABLE_AN_EXISTING_SLACK_USER_GROUP', display_name='Disable an existing slack user group', parameters=ActionParametersModel(properties={'include_count': {'default': None, 'description': 'Include the number of users in the User Group.', 'title': 'Include Count', 'type': 'boolean'}, 'usergroup': {'description': 'The encoded ID of the User Group to disable.', 'title': 'Usergroup', 'type': 'string'}}, title='DisableAnExistingSlackUserGroupRequest', type='object', required=['usergroup']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='DisableAnExistingSlackUserGroupResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['usergroups'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Disable An Existing User Group'), ActionModel(name='SLACK_CREATE_CHANNEL_BASED_CONVERSATION', display_name='Create channel based conversation', parameters=ActionParametersModel(properties={'description': {'default': None, 'description': 'Description of the public or private channel to create.', 'title': 'Description', 'type': 'string'}, 'is_private': {'description': 'When `true`, creates a private channel instead of a public channel', 'title': 'Is Private', 'type': 'boolean'}, 'name': {'description': 'Name of the public or private channel to create.', 'title': 'Name', 'type': 'string'}, 'org_wide': {'default': None, 'description': 'When `true`, the channel will be available org-wide. Note: if the channel is not `org_wide=true`, you must specify a `team_id` for this channel ', 'title': 'Org Wide', 'type': 'boolean'}, 'team_id': {'default': None, 'description': 'The workspace to create the channel in. Note: this argument is required unless you set `org_wide=true`. ', 'title': 'Team Id', 'type': 'string'}}, title='CreateChannelBasedConversationRequest', type='object', required=['is_private', 'name']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='CreateChannelBasedConversationResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['admin.conversations', 'admin'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Create A Public Or Private Channel Based Conversation.'), ActionModel(name='SLACK_RETRIEVE_CONVERSATION_INFORMATION', display_name='Retrieve conversation information', parameters=ActionParametersModel(properties={'channel': {'default': None, 'description': 'Conversation ID to learn more about', 'title': 'Channel', 'type': 'string'}, 'include_locale': {'default': None, 'description': 'Set this to `true` to receive the locale for this conversation. Defaults to `false` ', 'title': 'Include Locale', 'type': 'boolean'}, 'include_num_members': {'default': None, 'description': 'Set to `true` to include the member count for the specified conversation. Defaults to `false` ', 'title': 'Include Num Members', 'type': 'boolean'}}, title='RetrieveConversationInformationRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='RetrieveConversationInformationResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['conversations'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Retrieve Information About A Conversation.'), ActionModel(name='SLACK_REMINDERS_ADD', display_name='Create a reminder', parameters=ActionParametersModel(properties={'text': {'description': 'The content of the reminder', 'title': 'Text', 'type': 'string'}, 'time': {'description': 'When this reminder should happen: the Unix timestamp (up to five years from now), the number of seconds until the reminder (if within 24 hours), or a natural language description (Ex. \"in 15 minutes,\" or \"every Thursday\") ', 'title': 'Time', 'type': 'string'}, 'user': {'default': None, 'description': 'The user who will receive the reminder. If no user is specified, the reminder will go to user who created it. ', 'title': 'User', 'type': 'string'}}, title='CreateAReminderRequest', type='object', required=['text', 'time']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='CreateAReminderResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=[], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Creates A Reminder.<<DEPRECATED use create_a_reminder>>'), ActionModel(name='SLACK_CONVERT_PUBLIC_CHANNEL_TO_PRIVATE', display_name='Convert public channel to private', parameters=ActionParametersModel(properties={'channel_id': {'description': 'The channel to convert to private.', 'title': 'Channel Id', 'type': 'string'}}, title='ConvertPublicChannelToPrivateRequest', type='object', required=['channel_id']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='ConvertPublicChannelToPrivateResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['admin.conversations', 'admin'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Convert A Public Channel To A Private Channel.'), ActionModel(name='SLACK_USERS_LOOKUP_BY_EMAIL', display_name='Find user by email address', parameters=ActionParametersModel(properties={'email': {'description': 'An email address belonging to a user in the workspace', 'title': 'Email', 'type': 'string'}}, title='FindUserByEmailAddressRequest', type='object', required=['email']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='FindUserByEmailAddressResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=[], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Find A User With An Email Address.<<DEPRECATED use find_user_by_email_address>>'), ActionModel(name='SLACK_LIST_ACCESSIBLE_CONVERSATIONS_FOR_A_USER', display_name='List accessible conversations for a user', parameters=ActionParametersModel(properties={'user': {'default': None, 'description': 'Browse conversations by a specific user ID\"s membership. Non-public channels are restricted to those where the calling user shares membership. ', 'title': 'User', 'type': 'string'}, 'types': {'default': None, 'description': 'Mix and match channel types by providing a comma-separated list of any combination of `public_channel`, `private_channel`, `mpim`, `im` ', 'title': 'Types', 'type': 'string'}, 'exclude_archived': {'default': None, 'description': 'Set to `true` to exclude archived channels from the list', 'title': 'Exclude Archived', 'type': 'boolean'}, 'limit': {'default': None, 'description': 'The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the list hasn\"t been reached. Must be an integer no larger than 1000. ', 'title': 'Limit', 'type': 'integer'}, 'cursor': {'default': None, 'description': 'Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request\"s `response_metadata`. Default value fetches the first \"page\" of the collection. See [pagination](https://slack.dev) for more detail. ', 'title': 'Cursor', 'type': 'string'}}, title='ListAccessibleConversationsForAUserRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='ListAccessibleConversationsForAUserResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['users'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='List Conversations The Calling User May Access.'), ActionModel(name='SLACK_FETCH_CURRENT_TEAM_INFO_WITH_OPTIONAL_TEAM_SCOPE', display_name='Fetch current team info with optional team scope', parameters=ActionParametersModel(properties={'team': {'default': None, 'description': 'Team to get info on, if omitted, will return information about the current team. Will only return team that the authenticated token is allowed to see through external shared channels ', 'title': 'Team', 'type': 'string'}}, title='FetchCurrentTeamInfoWithOptionalTeamScopeRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='FetchCurrentTeamInfoWithOptionalTeamScopeResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['team'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Gets Information About The Current Team.'), ActionModel(name='SLACK_SET_WORKSPACE_DESCRIPTION', display_name='Set workspace description', parameters=ActionParametersModel(properties={'description': {'description': 'The new description for the workspace.', 'title': 'Description', 'type': 'string'}, 'team_id': {'description': 'ID for the workspace to set the description for.', 'title': 'Team Id', 'type': 'string'}}, title='SetWorkspaceDescriptionRequest', type='object', required=['description', 'team_id']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='SetWorkspaceDescriptionResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['admin.teams.settings', 'admin'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Set The Description Of A Given Workspace.'), ActionModel(name='SLACK_ADD_REACTION_TO_AN_ITEM', display_name='Add reaction to an item', parameters=ActionParametersModel(properties={'channel': {'description': 'Channel where the message to add reaction to was posted.', 'title': 'Channel', 'type': 'string'}, 'name': {'description': 'Reaction (emoji) name.', 'title': 'Name', 'type': 'string'}, 'timestamp': {'description': 'Timestamp of the message to add reaction to.', 'title': 'Timestamp', 'type': 'string'}}, title='AddReactionToAnItemRequest', type='object', required=['channel', 'name', 'timestamp']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='AddReactionToAnItemResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['reactions', 'important'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Adds A Reaction To An Item.'), ActionModel(name='SLACK_EXCHANGE_OAUTH_VERIFIER_FOR_ACCESS_TOKEN', display_name='Exchange oauth verifier for access token', parameters=ActionParametersModel(properties={'client_id': {'default': None, 'description': 'Issued when you created your application.', 'title': 'Client Id', 'type': 'string'}, 'client_secret': {'default': None, 'description': 'Issued when you created your application.', 'title': 'Client Secret', 'type': 'string'}, 'code': {'description': 'The `code` param returned via the OAuth callback.', 'title': 'Code', 'type': 'string'}, 'redirect_uri': {'default': None, 'description': 'This must match the originally submitted URI (if one was sent).', 'title': 'Redirect Uri', 'type': 'string'}}, title='ExchangeOauthVerifierForAccessTokenRequest', type='object', required=['code']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='ExchangeOauthVerifierForAccessTokenResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['oauth.v2', 'oauth'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Exchanges A Temporary O Auth Verifier Code For An Access Token.'), ActionModel(name='SLACK_REGISTERS_NEW_CALL_PARTICIPANTS', display_name='Registers new call participants', parameters=ActionParametersModel(properties={'id': {'description': '`id` returned by the [`calls.add`](https://slack.dev) method.', 'title': 'Id', 'type': 'string'}, 'users': {'description': 'The list of users to add as participants in the Call. [Read more on how to specify users here](https://slack.dev). ', 'title': 'Users', 'type': 'string'}}, title='RegistersNewCallParticipantsRequest', type='object', required=['id', 'users']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='RegistersNewCallParticipantsResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['calls.participants', 'calls'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Registers New Participants Added To A Call.'), ActionModel(name='SLACK_CUSTOMIZE_URL_UNFURLING_IN_MESSAGES', display_name='Customize url unfurling in messages', parameters=ActionParametersModel(properties={'channel': {'description': 'Channel ID of the message', 'title': 'Channel', 'type': 'string'}, 'ts': {'description': 'Timestamp of the message to add unfurl behavior to.', 'title': 'Ts', 'type': 'string'}, 'unfurls': {'default': None, 'description': 'URL-encoded JSON map with keys set to URLs featured in the the message, pointing to their unfurl blocks or message attachments. ', 'title': 'Unfurls', 'type': 'string'}, 'user_auth_message': {'default': None, 'description': 'Provide a simply-formatted string to send as an ephemeral message to the user as invitation to authenticate further and enable full unfurling behavior ', 'title': 'User Auth Message', 'type': 'string'}, 'user_auth_required': {'default': None, 'description': 'Set to `true` or `1` to indicate the user must install your Slack app to trigger unfurls for this domain ', 'title': 'User Auth Required', 'type': 'boolean'}, 'user_auth_url': {'default': None, 'description': 'Send users to this custom URL where they will complete authentication in your app to fully trigger unfurling. Value should be properly URL-encoded. ', 'title': 'User Auth Url', 'type': 'string'}}, title='CustomizeUrlUnfurlingInMessagesRequest', type='object', required=['channel', 'ts']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='CustomizeUrlUnfurlingInMessagesResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['chat'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Provide Custom Unfurl Behavior For User Posted Ur Ls'), ActionModel(name='SLACK_PUBLISH_STATIC_VIEW_FOR_USER', display_name='Publish static view for user', parameters=ActionParametersModel(properties={'user_id': {'description': '`id` of the user you want publish a view to.', 'title': 'User Id', 'type': 'string'}, 'view': {'description': 'A [view payload](https://slack.dev). This must be a JSON-encoded string.', 'title': 'View', 'type': 'string'}, 'hash': {'default': None, 'description': 'A string that represents view state to protect against possible race conditions. ', 'title': 'Hash', 'type': 'string'}}, title='PublishStaticViewForUserRequest', type='object', required=['user_id', 'view']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='PublishStaticViewForUserResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['views'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Publish A Static View For A User.'), ActionModel(name='SLACK_MAP_USER_IDS_FOR_ENTERPRISE_GRID_WORKSPACES', display_name='Map user ids for enterprise grid workspaces', parameters=ActionParametersModel(properties={'users': {'description': 'A comma-separated list of user ids, up to 400 per request', 'title': 'Users', 'type': 'string'}, 'team_id': {'default': None, 'description': 'Specify team_id starts with `T` in case of Org Token', 'title': 'Team Id', 'type': 'string'}, 'to_old': {'default': None, 'description': 'Specify `true` to convert `W` global user IDs to workspace-specific `U` IDs. Defaults to `false`. ', 'title': 'To Old', 'type': 'boolean'}}, title='MapUserIdsForEnterpriseGridWorkspacesRequest', type='object', required=['users']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='MapUserIdsForEnterpriseGridWorkspacesResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['migration'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='For Enterprise Grid Workspaces, Map Local User I Ds To Global User I Ds'), ActionModel(name='SLACK_SHARE_A_ME_MESSAGE_IN_A_CHANNEL', display_name='Share a me message in a channel', parameters=ActionParametersModel(properties={'channel': {'default': None, 'description': 'Channel to send message to. Can be a public channel, private group or IM channel. Can be an encoded ID, or a name. ', 'title': 'Channel', 'type': 'string'}, 'text': {'default': None, 'description': 'Text of the message to send.', 'title': 'Text', 'type': 'string'}}, title='ShareAMeMessageInAChannelRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='ShareAMeMessageInAChannelResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['chat'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Share A Me Message Into A Channel.'), ActionModel(name='SLACK_APPS_PERMISSIONS_SCOPES_GET_LIST', display_name='List app permissions scopes on a team', parameters=ActionParametersModel(properties={}, title='ListAppPermissionsScopesOnATeamRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='ListAppPermissionsScopesOnATeamResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=[], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Returns List Of Scopes This App Has On A Team.<<DEPRECATED use list_app_permissions_scopes_on_a_team>>'), ActionModel(name='SLACK_CREATE_AN_ENTERPRISE_TEAM', display_name='Create an enterprise team', parameters=ActionParametersModel(properties={'team_description': {'default': None, 'description': 'Description for the team.', 'title': 'Team Description', 'type': 'string'}, 'team_discoverability': {'default': None, 'description': 'Who can join the team. A team\"s discoverability can be `open`, `closed`, `invite_only`, or `unlisted`. ', 'title': 'Team Discoverability', 'type': 'string'}, 'team_domain': {'description': 'Team domain (for example, slacksoftballteam).', 'title': 'Team Domain', 'type': 'string'}, 'team_name': {'description': 'Team name (for example, Slack Softball Team).', 'title': 'Team Name', 'type': 'string'}}, title='CreateAnEnterpriseTeamRequest', type='object', required=['team_domain', 'team_name']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='CreateAnEnterpriseTeamResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['admin.teams', 'admin'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Create An Enterprise Team.'), ActionModel(name='SLACK_APPS_PERMISSIONS_LIST_PERMISSIONS', display_name='List app permissions on a team', parameters=ActionParametersModel(properties={}, title='ListAppPermissionsOnATeamRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='ListAppPermissionsOnATeamResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=[], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Returns List Of Permissions This App Has On A Team.<<DEPRECATED use list_app_permissions_on_a_team>>'), ActionModel(name='SLACK_GET_CHANNEL_S_CONNECTED_WORKSPACES_IN_ENTERPRISE', display_name='Get channel s connected workspaces in enterprise', parameters=ActionParametersModel(properties={'channel_id': {'description': 'The channel to determine connected workspaces within the organization for. ', 'title': 'Channel Id', 'type': 'string'}, 'cursor': {'default': None, 'description': 'Set `cursor` to `next_cursor` returned by the previous call to list items in the next page ', 'title': 'Cursor', 'type': 'string'}, 'limit': {'default': None, 'description': 'The maximum number of items to return. Must be between 1 - 1000 both inclusive. ', 'title': 'Limit', 'type': 'integer'}}, title='GetChannelSConnectedWorkspacesInEnterpriseRequest', type='object', required=['channel_id']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='GetChannelSConnectedWorkspacesInEnterpriseResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['admin.conversations', 'admin'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Get All The Workspaces A Given Public Or Private Channel Is Connected To Within This Enterprise Org.'), ActionModel(name='SLACK_INVITE_USER_TO_WORKSPACE_WITH_OPTIONAL_CHANNEL_INVITES', display_name='Invite user to workspace with optional channel invites', parameters=ActionParametersModel(properties={'channel_ids': {'description': 'A comma-separated list of `channel_id`s for this user to join. At least one channel is required. ', 'title': 'Channel Ids', 'type': 'string'}, 'custom_message': {'default': None, 'description': 'An optional message to send to the user in the invite email.', 'title': 'Custom Message', 'type': 'string'}, 'email': {'description': 'The email address of the person to invite.', 'title': 'Email', 'type': 'string'}, 'guest_expiration_ts': {'default': None, 'description': 'Timestamp when guest account should be disabled. Only include this timestamp if you are inviting a guest user and you want their account to expire on a certain date. ', 'title': 'Guest Expiration Ts', 'type': 'string'}, 'is_restricted': {'default': None, 'description': 'Is this user a multi-channel guest user? (default: false)', 'title': 'Is Restricted', 'type': 'boolean'}, 'is_ultra_restricted': {'default': None, 'description': 'Is this user a single channel guest user? (default: false)', 'title': 'Is Ultra Restricted', 'type': 'boolean'}, 'real_name': {'default': None, 'description': 'Full name of the user.', 'title': 'Real Name', 'type': 'string'}, 'resend': {'default': None, 'description': 'Allow this invite to be resent in the future if a user has not signed up yet. (default: false) ', 'title': 'Resend', 'type': 'boolean'}, 'team_id': {'description': 'The ID (`T1234`) of the workspace.', 'title': 'Team Id', 'type': 'string'}}, title='InviteUserToWorkspaceWithOptionalChannelInvitesRequest', type='object', required=['channel_ids', 'email', 'team_id']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='InviteUserToWorkspaceWithOptionalChannelInvitesResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['admin.users', 'admin'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Invite A User To A Workspace.'), ActionModel(name='SLACK_USERS_PROFILE_GET_PROFILE_INFO', display_name='Retrieve user profile information', parameters=ActionParametersModel(properties={'include_labels': {'default': None, 'description': 'Include labels for each ID in custom profile fields', 'title': 'Include Labels', 'type': 'boolean'}, 'user': {'default': None, 'description': 'User to retrieve profile info for', 'title': 'User', 'type': 'string'}}, title='RetrieveUserProfileInformationRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='RetrieveUserProfileInformationResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=[], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description=\"Retrieves A User's Profile Information.<<DEPRECATED use retrieve_user_profile_information>>\"), ActionModel(name='SLACK_SET_USER_TO_REGULAR_STATUS', display_name='Set user to regular status', parameters=ActionParametersModel(properties={'team_id': {'description': 'The ID (`T1234`) of the workspace.', 'title': 'Team Id', 'type': 'string'}, 'user_id': {'description': 'The ID of the user to designate as a regular user.', 'title': 'User Id', 'type': 'string'}}, title='SetUserToRegularStatusRequest', type='object', required=['team_id', 'user_id']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='SetUserToRegularStatusResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['admin.users', 'admin'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Set An Existing Guest User, Admin User, Or Owner To Be A Regular User.'), ActionModel(name='SLACK_RETRIEVE_A_USER_S_IDENTITY_DETAILS', display_name='Retrieve a user s identity details', parameters=ActionParametersModel(properties={}, title='RetrieveAUserSIdentityDetailsRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='RetrieveAUserSIdentityDetailsResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['users'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description=\"Get A User's Identity.\"), ActionModel(name='SLACK_GET_CURRENT_TEAM_INTEGRATION_LOGS', display_name='Get current team integration logs', parameters=ActionParametersModel(properties={'app_id': {'default': None, 'description': 'Filter logs to this Slack app. Defaults to all logs.', 'title': 'App Id', 'type': 'string'}, 'change_type': {'default': None, 'description': 'Filter logs with this change type. Defaults to all logs.', 'title': 'Change Type', 'type': 'string'}, 'count': {'default': None, 'description': 'Count', 'title': 'Count', 'type': 'string'}, 'page': {'default': None, 'description': 'Page', 'title': 'Page', 'type': 'string'}, 'service_id': {'default': None, 'description': 'Filter logs to this service. Defaults to all logs.', 'title': 'Service Id', 'type': 'string'}, 'user': {'default': None, 'description': 'Filter logs generated by this user\u2019s actions. Defaults to all logs.', 'title': 'User', 'type': 'string'}}, title='GetCurrentTeamIntegrationLogsRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='GetCurrentTeamIntegrationLogsResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['team'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Gets The Integration Logs For The Current Team.'), ActionModel(name='SLACK_LIST_ALL_USERS_IN_A_USER_GROUP', display_name='List all users in a user group', parameters=ActionParametersModel(properties={'include_disabled': {'default': None, 'description': 'Allow results that involve disabled User Groups.', 'title': 'Include Disabled', 'type': 'boolean'}, 'usergroup': {'description': 'The encoded ID of the User Group to update.', 'title': 'Usergroup', 'type': 'string'}}, title='ListAllUsersInAUserGroupRequest', type='object', required=['usergroup']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='ListAllUsersInAUserGroupResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['usergroups.users', 'usergroups'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='List All Users In A User Group'), ActionModel(name='SLACK_DENY_WORKSPACE_INVITE_REQUEST', display_name='Deny workspace invite request', parameters=ActionParametersModel(properties={'invite_request_id': {'description': 'ID of the request to invite.', 'title': 'Invite Request Id', 'type': 'string'}, 'team_id': {'default': None, 'description': 'ID for the workspace where the invite request was made.', 'title': 'Team Id', 'type': 'string'}}, title='DenyWorkspaceInviteRequestRequest', type='object', required=['invite_request_id']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='DenyWorkspaceInviteRequestResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['admin.inviteRequests', 'admin'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Deny A Workspace Invite Request.'), ActionModel(name='SLACK_ENABLE_PUBLIC_SHARING_OF_A_FILE', display_name='Enable public sharing of a file', parameters=ActionParametersModel(properties={'file': {'default': None, 'description': 'File to share', 'title': 'File', 'type': 'string'}}, title='EnablePublicSharingOfAFileRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='EnablePublicSharingOfAFileResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['files'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Enables A File For Public/External Sharing.'), ActionModel(name='SLACK_WIPE_USER_SESSIONS_ACROSS_DEVICES', display_name='Wipe user sessions across devices', parameters=ActionParametersModel(properties={'mobile_only': {'default': None, 'description': 'Only expire mobile sessions (default: false)', 'title': 'Mobile Only', 'type': 'boolean'}, 'user_id': {'description': 'The ID of the user to wipe sessions for', 'title': 'User Id', 'type': 'string'}, 'web_only': {'default': None, 'description': 'Only expire web sessions (default: false)', 'title': 'Web Only', 'type': 'boolean'}}, title='WipeUserSessionsAcrossDevicesRequest', type='object', required=['user_id']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='WipeUserSessionsAcrossDevicesResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['admin.users.session', 'admin'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Wipes All Valid Sessions On All Devices For A Given User'), ActionModel(name='SLACK_CONVERSATIONS_HISTORY', display_name='Fetch conversation history', parameters=ActionParametersModel(properties={'channel': {'default': None, 'description': 'Conversation ID to fetch history for.', 'title': 'Channel', 'type': 'string'}, 'latest': {'default': None, 'description': 'End of time range of messages to include in results.', 'title': 'Latest', 'type': 'integer'}, 'oldest': {'default': None, 'description': 'Start of time range of messages to include in results.', 'title': 'Oldest', 'type': 'integer'}, 'inclusive': {'default': None, 'description': 'Include messages with latest or oldest timestamp in results only when either timestamp is specified. ', 'title': 'Inclusive', 'type': 'boolean'}, 'limit': {'default': None, 'description': 'The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the users list hasn\"t been reached. ', 'title': 'Limit', 'type': 'integer'}, 'cursor': {'default': None, 'description': 'Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request\"s `response_metadata`. Default value fetches the first \"page\" of the collection. See [pagination](https://slack.dev) for more detail. ', 'title': 'Cursor', 'type': 'string'}}, title='FetchConversationHistoryRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='FetchConversationHistoryResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=[], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description=\"Fetches A Conversation's History Of Messages And Events.<<DEPRECATED use fetch_conversation_history>>\"), ActionModel(name='SLACK_INDICATE_WORKFLOW_STEP_FAILURE', display_name='Indicate workflow step failure', parameters=ActionParametersModel(properties={'workflow_step_execute_id': {'description': 'Context identifier that maps to the correct workflow step execution.', 'title': 'Workflow Step Execute Id', 'type': 'string'}, 'error': {'description': 'A JSON-based object with a `message` property that should contain a human readable error message. ', 'title': 'Error', 'type': 'string'}}, title='IndicateWorkflowStepFailureRequest', type='object', required=['workflow_step_execute_id', 'error']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='IndicateWorkflowStepFailureResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['workflows'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description=\"Indicate That An App's Step In A Workflow Failed To Execute.\"), ActionModel(name='SLACK_RETRIEVE_TEAM_PROFILE_DETAILS', display_name='Retrieve team profile details', parameters=ActionParametersModel(properties={'visibility': {'default': None, 'description': 'Filter by visibility.', 'title': 'Visibility', 'type': 'string'}}, title='RetrieveTeamProfileDetailsRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='RetrieveTeamProfileDetailsResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['team.profile', 'team'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description=\"Retrieve A Team's Profile.\"), ActionModel(name='SLACK_PROMOTE_USER_TO_WORKSPACE_OWNER', display_name='Promote user to workspace owner', parameters=ActionParametersModel(properties={'team_id': {'description': 'The ID (`T1234`) of the workspace.', 'title': 'Team Id', 'type': 'string'}, 'user_id': {'description': 'Id of the user to promote to owner.', 'title': 'User Id', 'type': 'string'}}, title='PromoteUserToWorkspaceOwnerRequest', type='object', required=['team_id', 'user_id']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='PromoteUserToWorkspaceOwnerResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['admin.users', 'admin'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Set An Existing Guest, Regular User, Or Admin User To Be A Workspace Owner.'), ActionModel(name='SLACK_UNARCHIVE_A_PUBLIC_OR_PRIVATE_CHANNEL', display_name='Unarchive a public or private channel', parameters=ActionParametersModel(properties={'channel_id': {'description': 'The channel to unarchive.', 'title': 'Channel Id', 'type': 'string'}}, title='UnarchiveAPublicOrPrivateChannelRequest', type='object', required=['channel_id']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='UnarchiveAPublicOrPrivateChannelResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['admin.conversations', 'admin'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Unarchive A Public Or Private Channel.'), ActionModel(name='SLACK_USERS_INFO', display_name='Retrieve detailed user information', parameters=ActionParametersModel(properties={'include_locale': {'default': None, 'description': 'Set this to `true` to receive the locale for this user. Defaults to `false` ', 'title': 'Include Locale', 'type': 'boolean'}, 'user': {'default': None, 'description': 'User to get info on', 'title': 'User', 'type': 'string'}}, title='RetrieveDetailedUserInformationRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='RetrieveDetailedUserInformationResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=[], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Gets Information About A User.<<DEPRECATED use retrieve_detailed_user_information>>'), ActionModel(name='SLACK_FETCH_ITEM_REACTIONS', display_name='Fetch item reactions', parameters=ActionParametersModel(properties={'channel': {'default': None, 'description': 'Channel where the message to get reactions for was posted.', 'title': 'Channel', 'type': 'string'}, 'file': {'default': None, 'description': 'File to get reactions for.', 'title': 'File', 'type': 'string'}, 'file_comment': {'default': None, 'description': 'File comment to get reactions for.', 'title': 'File Comment', 'type': 'string'}, 'full': {'default': None, 'description': 'If true always return the complete reaction list.', 'title': 'Full', 'type': 'boolean'}, 'timestamp': {'default': None, 'description': 'Timestamp of the message to get reactions for.', 'title': 'Timestamp', 'type': 'string'}}, title='FetchItemReactionsRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='FetchItemReactionsResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['reactions'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Gets Reactions For An Item.'), ActionModel(name='SLACK_LIST_DISCONNECTED_CHANNELS_WITH_ORIGINAL_IDS_FOR_EKM', display_name='List disconnected channels with original ids for ekm', parameters=ActionParametersModel(properties={'channel_ids': {'default': None, 'description': 'A comma-separated list of channels to filter to.', 'title': 'Channel Ids', 'type': 'string'}, 'team_ids': {'default': None, 'description': 'A comma-separated list of the workspaces to which the channels you would like returned belong. ', 'title': 'Team Ids', 'type': 'string'}, 'limit': {'default': None, 'description': 'The maximum number of items to return. Must be between 1 - 1000 both inclusive. ', 'title': 'Limit', 'type': 'integer'}, 'cursor': {'default': None, 'description': 'Set `cursor` to `next_cursor` returned by the previous call to list items in the next page. ', 'title': 'Cursor', 'type': 'string'}}, title='ListDisconnectedChannelsWithOriginalIdsForEkmRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='ListDisconnectedChannelsWithOriginalIdsForEkmResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['admin.conversations.ekm', 'admin'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='List All Disconnected Channels\u2014I.E., Channels That Were Once Connected To Other Workspaces And Then Disconnected\u2014And The Corresponding Original Channel I Ds For Key Revocation With Ekm.'), ActionModel(name='SLACK_CHECKS_API_CALL_AND_RETURNS_SUCCESS_OR_ERROR', display_name='Checks api call and returns success or error', parameters=ActionParametersModel(properties={'error': {'default': None, 'description': 'Error response to return', 'title': 'Error', 'type': 'string'}, 'foo': {'default': None, 'description': 'example property to return', 'title': 'Foo', 'type': 'string'}}, title='ChecksApiCallAndReturnsSuccessOrErrorRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='ChecksApiCallAndReturnsSuccessOrErrorResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['api'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Checks Api Calling Code.'), ActionModel(name='SLACK_GET_CURRENT_TEAM_S_ACCESS_LOGS', display_name='Get current team s access logs', parameters=ActionParametersModel(properties={'before': {'default': None, 'description': 'End of time range of logs to include in results (inclusive).', 'title': 'Before', 'type': 'string'}, 'count': {'default': None, 'description': 'Count', 'title': 'Count', 'type': 'string'}, 'page': {'default': None, 'description': 'Page', 'title': 'Page', 'type': 'string'}}, title='GetCurrentTeamSAccessLogsRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='GetCurrentTeamSAccessLogsResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['team'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Gets The Access Logs For The Current Team.'), ActionModel(name='SLACK_APPROVE_AN_APP_INSTALLATION_IN_A_WORKSPACE', display_name='Approve an app installation in a workspace', parameters=ActionParametersModel(properties={'app_id': {'default': None, 'description': 'The id of the app to approve.', 'title': 'App Id', 'type': 'string'}, 'request_id': {'default': None, 'description': 'The id of the request to approve.', 'title': 'Request Id', 'type': 'string'}, 'team_id': {'default': None, 'description': 'Team Id', 'title': 'Team Id', 'type': 'string'}}, title='ApproveAnAppInstallationInAWorkspaceRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='ApproveAnAppInstallationInAWorkspaceResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['admin.apps', 'admin'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Approve An App For Installation On A Workspace.'), ActionModel(name='SLACK_SHARE_REMOTE_FILE_IN_CHANNELS', display_name='Share remote file in channels', parameters=ActionParametersModel(properties={'file': {'default': None, 'description': 'Specify a file registered with Slack by providing its ID. Either this field or `external_id` or both are required. ', 'title': 'File', 'type': 'string'}, 'external_id': {'default': None, 'description': 'The globally unique identifier (GUID) for the file, as set by the app registering the file with Slack.  Either this field or `file` or both are required. ', 'title': 'External Id', 'type': 'string'}, 'channels': {'default': None, 'description': 'Comma-separated list of channel IDs where the file will be shared.', 'title': 'Channels', 'type': 'string'}}, title='ShareRemoteFileInChannelsRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='ShareRemoteFileInChannelsResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['files.remote', 'files'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Share A Remote File Into A Channel.'), ActionModel(name='SLACK_FETCH_BOT_USER_INFORMATION', display_name='Fetch bot user information', parameters=ActionParametersModel(properties={'bot': {'default': None, 'description': 'Bot user to get info on', 'title': 'Bot', 'type': 'string'}}, title='FetchBotUserInformationRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='FetchBotUserInformationResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['bots'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Gets Information About A Bot User.'), ActionModel(name='SLACK_ADD_A_CUSTOM_EMOJI_TO_A_SLACK_TEAM', display_name='Add a custom emoji to a slack team', parameters=ActionParametersModel(properties={'name': {'description': 'The name of the emoji to be removed. Colons (`:myemoji:`) around the value are not required, although they may be included. ', 'title': 'Name', 'type': 'string'}, 'token': {'description': 'Authentication token. Requires scope: `admin.teams:write`', 'title': 'Token', 'type': 'string'}, 'url': {'description': 'The URL of a file to use as an image for the emoji. Square images under 128KB and with transparent backgrounds work best. ', 'title': 'Url', 'type': 'string'}}, title='AddACustomEmojiToASlackTeamRequest', type='object', required=['name', 'token', 'url']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='AddACustomEmojiToASlackTeamResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['admin.emoji', 'admin'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Add An Emoji.'), ActionModel(name='SLACK_PUSH_VIEW_TO_ROOT_VIEW_STACK', display_name='Push view to root view stack', parameters=ActionParametersModel(properties={'trigger_id': {'description': 'Exchange a trigger to post to the user.', 'title': 'Trigger Id', 'type': 'string'}, 'view': {'description': 'A [view payload](https://slack.dev). This must be a JSON-encoded string.', 'title': 'View', 'type': 'string'}}, title='PushViewToRootViewStackRequest', type='object', required=['trigger_id', 'view']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='PushViewToRootViewStackResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['views'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Push A View Onto The Stack Of A Root View.'), ActionModel(name='SLACK_RESTRICT_APP_INSTALLATION_ON_WORKSPACE', display_name='Restrict app installation on workspace', parameters=ActionParametersModel(properties={'app_id': {'default': None, 'description': 'The id of the app to restrict.', 'title': 'App Id', 'type': 'string'}, 'request_id': {'default': None, 'description': 'The id of the request to restrict.', 'title': 'Request Id', 'type': 'string'}, 'team_id': {'default': None, 'description': 'Team Id', 'title': 'Team Id', 'type': 'string'}}, title='RestrictAppInstallationOnWorkspaceRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='RestrictAppInstallationOnWorkspaceResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['admin.apps', 'admin'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Restrict An App For Installation On A Workspace.'), ActionModel(name='SLACK_REMOVE_REACTION_FROM_ITEM', display_name='Remove reaction from item', parameters=ActionParametersModel(properties={'channel': {'default': None, 'description': 'Channel where the message to remove reaction from was posted.', 'title': 'Channel', 'type': 'string'}, 'file': {'default': None, 'description': 'File to remove reaction from.', 'title': 'File', 'type': 'string'}, 'file_comment': {'default': None, 'description': 'File comment to remove reaction from.', 'title': 'File Comment', 'type': 'string'}, 'name': {'description': 'Reaction (emoji) name.', 'title': 'Name', 'type': 'string'}, 'timestamp': {'default': None, 'description': 'Timestamp of the message to remove reaction from.', 'title': 'Timestamp', 'type': 'string'}}, title='RemoveReactionFromItemRequest', type='object', required=['name']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='RemoveReactionFromItemResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['reactions', 'important'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Removes A Reaction From An Item.'), ActionModel(name='SLACK_REMOVE_A_STAR_FROM_AN_ITEM', display_name='Remove a star from an item', parameters=ActionParametersModel(properties={'channel': {'default': None, 'description': 'Channel to remove star from, or channel where the message to remove star from was posted (used with `timestamp`). ', 'title': 'Channel', 'type': 'string'}, 'file': {'default': None, 'description': 'File to remove star from.', 'title': 'File', 'type': 'string'}, 'file_comment': {'default': None, 'description': 'File comment to remove star from.', 'title': 'File Comment', 'type': 'string'}, 'timestamp': {'default': None, 'description': 'Timestamp of the message to remove star from.', 'title': 'Timestamp', 'type': 'string'}}, title='RemoveAStarFromAnItemRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='RemoveAStarFromAnItemResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['stars'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Removes A Star From An Item.'), ActionModel(name='SLACK_REMOVE_ENTERPRISE_GRID_ORG_EMOJI', display_name='Remove enterprise grid org emoji', parameters=ActionParametersModel(properties={'name': {'description': 'The name of the emoji to be removed. Colons (`:myemoji:`) around the value are not required, although they may be included. ', 'title': 'Name', 'type': 'string'}, 'token': {'description': 'Authentication token. Requires scope: `admin.teams:write`', 'title': 'Token', 'type': 'string'}}, title='RemoveEnterpriseGridOrgEmojiRequest', type='object', required=['name', 'token']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='RemoveEnterpriseGridOrgEmojiResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['admin.emoji', 'admin'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Remove An Emoji Across An Enterprise Grid Organization'), ActionModel(name='SLACK_LIST_APP_PERMISSIONS_SCOPES_ON_A_TEAM', display_name='List app permissions scopes on a team', parameters=ActionParametersModel(properties={}, title='ListAppPermissionsScopesOnATeamRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='ListAppPermissionsScopesOnATeamResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['apps.permissions.scopes', 'apps'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Returns List Of Scopes This App Has On A Team.'), ActionModel(name='SLACK_SET_WORKSPACE_DISCOVERABILITY_SETTINGS', display_name='Set workspace discoverability settings', parameters=ActionParametersModel(properties={'discoverability': {'description': 'This workspace\"s discovery setting. It must be set to one of `open`, `invite_only`, `closed`, or `unlisted`. ', 'title': 'Discoverability', 'type': 'string'}, 'team_id': {'description': 'The ID of the workspace to set discoverability on.', 'title': 'Team Id', 'type': 'string'}}, title='SetWorkspaceDiscoverabilitySettingsRequest', type='object', required=['discoverability', 'team_id']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='SetWorkspaceDiscoverabilitySettingsResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['admin.teams.settings', 'admin'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='An Api Method That Allows Admins To Set The Discoverability Of A Given Workspace'), ActionModel(name='SLACK_UNPIN_ITEM_FROM_CHANNEL', display_name='Unpin item from channel', parameters=ActionParametersModel(properties={'channel': {'description': 'Channel where the item is pinned to.', 'title': 'Channel', 'type': 'string'}, 'timestamp': {'default': None, 'description': 'Timestamp of the message to un-pin.', 'title': 'Timestamp', 'type': 'string'}}, title='UnpinItemFromChannelRequest', type='object', required=['channel']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='UnpinItemFromChannelResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['pins'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Un Pins An Item From A Channel.'), ActionModel(name='SLACK_ADD_AN_EMOJI_ALIAS_IN_SLACK', display_name='Add an emoji alias in slack', parameters=ActionParametersModel(properties={'alias_for': {'description': 'The alias of the emoji.', 'title': 'Alias For', 'type': 'string'}, 'name': {'description': 'The name of the emoji to be aliased. Colons (`:myemoji:`) around the value are not required, although they may be included. ', 'title': 'Name', 'type': 'string'}, 'token': {'description': 'Authentication token. Requires scope: `admin.teams:write`', 'title': 'Token', 'type': 'string'}}, title='AddAnEmojiAliasInSlackRequest', type='object', required=['alias_for', 'name', 'token']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='AddAnEmojiAliasInSlackResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['admin.emoji', 'admin'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Add An Emoji Alias.'), ActionModel(name='SLACK_MANUALLY_SET_USER_PRESENCE', display_name='Manually set user presence', parameters=ActionParametersModel(properties={'presence': {'description': 'Either `auto` or `away`', 'title': 'Presence', 'type': 'string'}}, title='ManuallySetUserPresenceRequest', type='object', required=['presence']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='ManuallySetUserPresenceResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['users'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Manually Sets User Presence.'), ActionModel(name='SLACK_END_USER_DO_NOT_DISTURB_SESSION', display_name='End user do not disturb session', parameters=ActionParametersModel(properties={}, title='EndUserDoNotDisturbSessionRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='EndUserDoNotDisturbSessionResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['dnd'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description=\"Ends The Current User's Do Not Disturb Session Immediately.\"), ActionModel(name='SLACK_RENAME_A_CONVERSATION', display_name='Rename a conversation', parameters=ActionParametersModel(properties={'channel': {'default': None, 'description': 'ID of conversation to rename', 'title': 'Channel', 'type': 'string'}, 'name': {'default': None, 'description': 'New name for conversation.', 'title': 'Name', 'type': 'string'}}, title='RenameAConversationRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='RenameAConversationResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['conversations'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Renames A Conversation.'), ActionModel(name='SLACK_UPLOAD_OR_CREATE_A_FILE_IN_SLACK', display_name='Upload or create a file in slack', parameters=ActionParametersModel(properties={'title': {'default': None, 'description': 'Title of file.', 'title': 'Title', 'type': 'string'}, 'channels': {'default': None, 'description': 'Comma-separated list of channel names or IDs where the file will be shared. ', 'title': 'Channels', 'type': 'string'}, 'content': {'default': None, 'description': 'File contents via a POST variable. If omitting this parameter, you must provide a `file`. ', 'title': 'Content', 'type': 'string'}, 'file': {'default': None, 'description': 'File contents via `multipart/form-data`. If omitting this parameter, you must submit `content`. ', 'title': 'File', 'type': 'string'}, 'filename': {'default': None, 'description': 'Filename of file.', 'title': 'Filename', 'type': 'string'}, 'filetype': {'default': None, 'description': 'A [file type](https://slack.dev) identifier.', 'title': 'Filetype', 'type': 'string'}, 'initial_comment': {'default': None, 'description': 'The message text introducing the file in specified `channels`.', 'title': 'Initial Comment', 'type': 'string'}, 'thread_ts': {'default': None, 'description': 'Provide another message\"s `ts` value to upload this file as a reply. Never use a reply\"s `ts` value; use its parent instead. ', 'title': 'Thread Ts', 'type': 'integer'}, 'token': {'default': None, 'description': 'Authentication token. Requires scope: `files:write:user`', 'title': 'Token', 'type': 'string'}}, title='UploadOrCreateAFileInSlackRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='UploadOrCreateAFileInSlackResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['files'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Uploads Or Creates A File.'), ActionModel(name='SLACK_SET_WORKSPACE_NAME', display_name='Set workspace name', parameters=ActionParametersModel(properties={'name': {'description': 'The new name of the workspace.', 'title': 'Name', 'type': 'string'}, 'team_id': {'description': 'ID for the workspace to set the name for.', 'title': 'Team Id', 'type': 'string'}}, title='SetWorkspaceNameRequest', type='object', required=['name', 'team_id']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='SetWorkspaceNameResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['admin.teams.settings', 'admin'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Set The Name Of A Given Workspace.'), ActionModel(name='SLACK_CHAT_POST_MESSAGE', display_name='Sends a message to a slack channel', parameters=ActionParametersModel(properties={'as_user': {'default': None, 'description': 'Pass true to post the message as the authed user, instead of as a bot. Defaults to false. See [authorship](https://slack.dev) below. ', 'title': 'As User', 'type': 'boolean'}, 'attachments': {'default': None, 'description': 'A JSON-based array of structured attachments, presented as a URL-encoded string. ', 'title': 'Attachments', 'type': 'string'}, 'blocks': {'default': None, 'description': 'A JSON-based array of structured blocks, presented as a URL-encoded string. ', 'title': 'Blocks', 'type': 'string'}, 'channel': {'description': 'Channel, private group, or IM channel to send message to. Can be an encoded ID, or a name. See [below](https://slack.dev) for more details. ', 'title': 'Channel', 'type': 'string'}, 'icon_emoji': {'default': None, 'description': 'Emoji to use as the icon for this message. Overrides `icon_url`. Must be used in conjunction with `as_user` set to `false`, otherwise ignored. See [authorship](https://slack.dev) below. ', 'title': 'Icon Emoji', 'type': 'string'}, 'icon_url': {'default': None, 'description': 'URL to an image to use as the icon for this message. Must be used in conjunction with `as_user` set to false, otherwise ignored. See [authorship](https://slack.dev) below. ', 'title': 'Icon Url', 'type': 'string'}, 'link_names': {'default': None, 'description': 'Find and link channel names and usernames.', 'title': 'Link Names', 'type': 'boolean'}, 'mrkdwn': {'default': None, 'description': 'Disable Slack markup parsing by setting to `false`. Enabled by default.', 'title': 'Mrkdwn', 'type': 'boolean'}, 'parse': {'default': None, 'description': 'Change how messages are treated. Defaults to `none`. See [below](https://slack.dev). ', 'title': 'Parse', 'type': 'string'}, 'reply_broadcast': {'default': None, 'description': 'Used in conjunction with `thread_ts` and indicates whether reply should be made visible to everyone in the channel or conversation. Defaults to `false`. ', 'title': 'Reply Broadcast', 'type': 'boolean'}, 'text': {'default': None, 'description': 'How this field works and whether it is required depends on other fields you use in your API call. [See below](https://slack.dev) for more detail. ', 'title': 'Text', 'type': 'string'}, 'thread_ts': {'default': None, 'description': 'Provide another message\"s `ts` value to make this message a reply. Avoid using a reply\"s `ts` value; use its parent instead. ', 'title': 'Thread Ts', 'type': 'string'}, 'unfurl_links': {'default': None, 'description': 'Pass true to enable unfurling of primarily text-based content.', 'title': 'Unfurl Links', 'type': 'boolean'}, 'unfurl_media': {'default': None, 'description': 'Pass false to disable unfurling of media content.', 'title': 'Unfurl Media', 'type': 'boolean'}, 'username': {'default': None, 'description': 'Set your bot\"s user name. Must be used in conjunction with `as_user` set to false, otherwise ignored. See [authorship](https://slack.dev) below. ', 'title': 'Username', 'type': 'string'}}, title='SendsAMessageToASlackChannelRequest', type='object', required=['channel']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='SendsAMessageToASlackChannelResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=[], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Sends A Message To A Channel.<<DEPRECATED use sends_a_message_to_a_slack_channel>>'), ActionModel(name='SLACK_SET_CHANNEL_POSTING_PERMISSIONS', display_name='Set channel posting permissions', parameters=ActionParametersModel(properties={'channel_id': {'description': 'The channel to set the prefs for', 'title': 'Channel Id', 'type': 'string'}, 'prefs': {'description': 'The prefs for this channel in a stringified JSON format.', 'title': 'Prefs', 'type': 'string'}}, title='SetChannelPostingPermissionsRequest', type='object', required=['channel_id', 'prefs']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='SetChannelPostingPermissionsResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['admin.conversations', 'admin'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Set The Posting Permissions For A Public Or Private Channel.'), ActionModel(name='SLACK_USERS_LIST', display_name='List all slack team users with pagination', parameters=ActionParametersModel(properties={'limit': {'default': None, 'description': 'The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the users list hasn\"t been reached. Providing no `limit` value will result in Slack attempting to deliver you the entire result set. If the collection is too large you may experience `limit_required` or HTTP 500 errors. ', 'title': 'Limit', 'type': 'integer'}, 'cursor': {'default': None, 'description': 'Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request\"s `response_metadata`. Default value fetches the first \"page\" of the collection. See [pagination](https://slack.dev) for more detail. ', 'title': 'Cursor', 'type': 'string'}, 'include_locale': {'default': None, 'description': 'Set this to `true` to receive the locale for users. Defaults to `false`', 'title': 'Include Locale', 'type': 'boolean'}}, title='ListAllSlackTeamUsersWithPaginationRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='ListAllSlackTeamUsersWithPaginationResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=[], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Lists All Users In A Slack Team.<<DEPRECATED use list_all_slack_team_users_with_pagination>>'), ActionModel(name='SLACK_UPDATE_AN_EXISTING_SLACK_VIEW', display_name='Update an existing slack view', parameters=ActionParametersModel(properties={'view_id': {'default': None, 'description': 'A unique identifier of the view to be updated. Either `view_id` or `external_id` is required. ', 'title': 'View Id', 'type': 'string'}, 'external_id': {'default': None, 'description': 'A unique identifier of the view set by the developer. Must be unique for all views on a team. Max length of 255 characters. Either `view_id` or `external_id` is required. ', 'title': 'External Id', 'type': 'string'}, 'view': {'default': None, 'description': 'A [view object](https://slack.dev). This must be a JSON-encoded string.', 'title': 'View', 'type': 'string'}, 'hash': {'default': None, 'description': 'A string that represents view state to protect against possible race conditions. ', 'title': 'Hash', 'type': 'string'}}, title='UpdateAnExistingSlackViewRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='UpdateAnExistingSlackViewResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['views'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Update An Existing View.'), ActionModel(name='SLACK_LISTS_PINNED_ITEMS_IN_A_CHANNEL', display_name='Lists pinned items in a channel', parameters=ActionParametersModel(properties={'channel': {'description': 'Channel to get pinned items for.', 'title': 'Channel', 'type': 'string'}}, title='ListsPinnedItemsInAChannelRequest', type='object', required=['channel']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='ListsPinnedItemsInAChannelResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['pins'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Lists Items Pinned To A Channel.'), ActionModel(name='SLACK_FETCH_CONVERSATION_HISTORY', display_name='Fetch conversation history', parameters=ActionParametersModel(properties={'channel': {'default': None, 'description': 'Conversation ID to fetch history for.', 'title': 'Channel', 'type': 'string'}, 'latest': {'default': None, 'description': 'End of time range of messages to include in results.', 'title': 'Latest', 'type': 'integer'}, 'oldest': {'default': None, 'description': 'Start of time range of messages to include in results.', 'title': 'Oldest', 'type': 'integer'}, 'inclusive': {'default': None, 'description': 'Include messages with latest or oldest timestamp in results only when either timestamp is specified. ', 'title': 'Inclusive', 'type': 'boolean'}, 'limit': {'default': None, 'description': 'The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the users list hasn\"t been reached. ', 'title': 'Limit', 'type': 'integer'}, 'cursor': {'default': None, 'description': 'Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request\"s `response_metadata`. Default value fetches the first \"page\" of the collection. See [pagination](https://slack.dev) for more detail. ', 'title': 'Cursor', 'type': 'string'}}, title='FetchConversationHistoryRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='FetchConversationHistoryResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['conversations', 'important'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description=\"Fetches A Conversation's History Of Messages And Events.\"), ActionModel(name='SLACK_LIST_USER_REMINDERS_WITH_DETAILS', display_name='List user reminders with details', parameters=ActionParametersModel(properties={}, title='ListUserRemindersWithDetailsRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='ListUserRemindersWithDetailsResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['reminders'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Lists All Reminders Created By Or For A Given User.'), ActionModel(name='SLACK_GET_CHANNEL_CONVERSATION_PREFERENCES', display_name='Get channel conversation preferences', parameters=ActionParametersModel(properties={'channel_id': {'description': 'The channel to get preferences for.', 'title': 'Channel Id', 'type': 'string'}}, title='GetChannelConversationPreferencesRequest', type='object', required=['channel_id']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='GetChannelConversationPreferencesResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['admin.conversations', 'admin'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Get Conversation Preferences For A Public Or Private Channel.'), ActionModel(name='SLACK_LIST_WORKSPACE_OWNERS', display_name='List workspace owners', parameters=ActionParametersModel(properties={'team_id': {'description': 'Team Id', 'title': 'Team Id', 'type': 'string'}, 'limit': {'default': None, 'description': 'The maximum number of items to return. Must be between 1 - 1000 both inclusive. ', 'title': 'Limit', 'type': 'integer'}, 'cursor': {'default': None, 'description': 'Set `cursor` to `next_cursor` returned by the previous call to list items in the next page. ', 'title': 'Cursor', 'type': 'string'}}, title='ListWorkspaceOwnersRequest', type='object', required=['team_id']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='ListWorkspaceOwnersResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['admin.teams.owners', 'admin'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='List All Of The Owners On A Given Workspace.'), ActionModel(name='SLACK_LIST_ALL_SLACK_TEAM_USERS_WITH_PAGINATION', display_name='List all slack team users with pagination', parameters=ActionParametersModel(properties={'limit': {'default': None, 'description': 'The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the users list hasn\"t been reached. Providing no `limit` value will result in Slack attempting to deliver you the entire result set. If the collection is too large you may experience `limit_required` or HTTP 500 errors. ', 'title': 'Limit', 'type': 'integer'}, 'cursor': {'default': None, 'description': 'Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request\"s `response_metadata`. Default value fetches the first \"page\" of the collection. See [pagination](https://slack.dev) for more detail. ', 'title': 'Cursor', 'type': 'string'}, 'include_locale': {'default': None, 'description': 'Set this to `true` to receive the locale for users. Defaults to `false`', 'title': 'Include Locale', 'type': 'boolean'}}, title='ListAllSlackTeamUsersWithPaginationRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='ListAllSlackTeamUsersWithPaginationResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['users', 'important'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Lists All Users In A Slack Team.'), ActionModel(name='SLACK_DELETE_A_FILE_BY_ID', display_name='Delete a file by id', parameters=ActionParametersModel(properties={'file': {'default': None, 'description': 'ID of file to delete.', 'title': 'File', 'type': 'string'}}, title='DeleteAFileByIdRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='DeleteAFileByIdResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['files'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Deletes A File.'), ActionModel(name='SLACK_EXCHANGE_OAUTH_CODE_FOR_WORKSPACE_TOKEN', display_name='Exchange oauth code for workspace token', parameters=ActionParametersModel(properties={'client_id': {'default': None, 'description': 'Issued when you created your application.', 'title': 'Client Id', 'type': 'string'}, 'client_secret': {'default': None, 'description': 'Issued when you created your application.', 'title': 'Client Secret', 'type': 'string'}, 'code': {'default': None, 'description': 'The `code` param returned via the OAuth callback.', 'title': 'Code', 'type': 'string'}, 'redirect_uri': {'default': None, 'description': 'This must match the originally submitted URI (if one was sent).', 'title': 'Redirect Uri', 'type': 'string'}, 'single_channel': {'default': None, 'description': 'Request the user to add your app only to a single channel.', 'title': 'Single Channel', 'type': 'boolean'}}, title='ExchangeOauthCodeForWorkspaceTokenRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='ExchangeOauthCodeForWorkspaceTokenResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['oauth'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Exchanges A Temporary O Auth Verifier Code For A Workspace Token.'), ActionModel(name='SLACK_CONVERSATIONS_LIST', display_name='List all slack team channels with various filters', parameters=ActionParametersModel(properties={'exclude_archived': {'default': None, 'description': 'Set to `true` to exclude archived channels from the list', 'title': 'Exclude Archived', 'type': 'boolean'}, 'types': {'default': None, 'description': 'Mix and match channel types by providing a comma-separated list of any combination of `public_channel`, `private_channel`, `mpim`, `im` ', 'title': 'Types', 'type': 'string'}, 'limit': {'default': None, 'description': 'The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the list hasn\"t been reached. Must be an integer no larger than 1000. ', 'title': 'Limit', 'type': 'integer'}, 'cursor': {'default': None, 'description': 'Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request\"s `response_metadata`. Default value fetches the first \"page\" of the collection. See [pagination](https://slack.dev) for more detail. ', 'title': 'Cursor', 'type': 'string'}}, title='ListAllSlackTeamChannelsWithVariousFiltersRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='ListAllSlackTeamChannelsWithVariousFiltersResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=[], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Lists All Channels In A Slack Team.<<DEPRECATED use list_all_slack_team_channels_with_various_filters>>'), ActionModel(name='SLACK_LIST_TEAM_WORKSPACE_APP_REQUESTS', display_name='List team workspace app requests', parameters=ActionParametersModel(properties={'limit': {'default': None, 'description': 'The maximum number of items to return. Must be between 1 - 1000 both inclusive. ', 'title': 'Limit', 'type': 'integer'}, 'cursor': {'default': None, 'description': 'Set `cursor` to `next_cursor` returned by the previous call to list items in the next page ', 'title': 'Cursor', 'type': 'string'}, 'team_id': {'default': None, 'description': 'Team Id', 'title': 'Team Id', 'type': 'string'}}, title='ListTeamWorkspaceAppRequestsRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='ListTeamWorkspaceAppRequestsResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['admin.apps.requests', 'admin'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='List App Requests For A Team/Workspace.'), ActionModel(name='SLACK_FETCH_MESSAGE_THREAD_FROM_A_CONVERSATION', display_name='Fetch message thread from a conversation', parameters=ActionParametersModel(properties={'channel': {'default': None, 'description': 'Conversation ID to fetch thread from.', 'title': 'Channel', 'type': 'string'}, 'ts': {'default': None, 'description': 'Unique identifier of a thread\"s parent message. `ts` must be the timestamp of an existing message with 0 or more replies. If there are no replies then just the single message referenced by `ts` will return - it is just an ordinary, unthreaded message. ', 'title': 'Ts', 'type': 'integer'}, 'latest': {'default': None, 'description': 'End of time range of messages to include in results.', 'title': 'Latest', 'type': 'integer'}, 'oldest': {'default': None, 'description': 'Start of time range of messages to include in results.', 'title': 'Oldest', 'type': 'integer'}, 'inclusive': {'default': None, 'description': 'Include messages with latest or oldest timestamp in results only when either timestamp is specified. ', 'title': 'Inclusive', 'type': 'boolean'}, 'limit': {'default': None, 'description': 'The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the users list hasn\"t been reached. ', 'title': 'Limit', 'type': 'integer'}, 'cursor': {'default': None, 'description': 'Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request\"s `response_metadata`. Default value fetches the first \"page\" of the collection. See [pagination](https://slack.dev) for more detail. ', 'title': 'Cursor', 'type': 'string'}}, title='FetchMessageThreadFromAConversationRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='FetchMessageThreadFromAConversationResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['conversations'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Retrieve A Thread Of Messages Posted To A Conversation'), ActionModel(name='SLACK_DELETES_A_MESSAGE_FROM_A_CHAT', display_name='Deletes a message from a chat', parameters=ActionParametersModel(properties={'as_user': {'default': None, 'description': 'Pass true to delete the message as the authed user with `chat:write:user` scope. [Bot users](https://slack.dev) in this context are considered authed users. If unused or false, the message will be deleted with `chat:write:bot` scope. ', 'title': 'As User', 'type': 'boolean'}, 'channel': {'default': None, 'description': 'Channel containing the message to be deleted.', 'title': 'Channel', 'type': 'string'}, 'ts': {'default': None, 'description': 'Timestamp of the message to be deleted.', 'title': 'Ts', 'type': 'integer'}}, title='DeletesAMessageFromAChatRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='DeletesAMessageFromAChatResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['chat'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Deletes A Message.'), ActionModel(name='SLACK_OPEN_USER_DIALOG_WITH_JSON_DEFINED_UI', display_name='Open user dialog with json defined ui', parameters=ActionParametersModel(properties={'dialog': {'description': 'The dialog definition. This must be a JSON-encoded string.', 'title': 'Dialog', 'type': 'string'}, 'trigger_id': {'description': 'Exchange a trigger to post to the user.', 'title': 'Trigger Id', 'type': 'string'}}, title='OpenUserDialogWithJsonDefinedUiRequest', type='object', required=['dialog', 'trigger_id']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='OpenUserDialogWithJsonDefinedUiResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['dialog'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Open A Dialog With A User'), ActionModel(name='SLACK_RETRIEVE_CONVERSATION_MEMBERS_LIST', display_name='Retrieve conversation members list', parameters=ActionParametersModel(properties={'channel': {'default': None, 'description': 'ID of the conversation to retrieve members for', 'title': 'Channel', 'type': 'string'}, 'limit': {'default': None, 'description': 'The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the users list hasn\"t been reached. ', 'title': 'Limit', 'type': 'integer'}, 'cursor': {'default': None, 'description': 'Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request\"s `response_metadata`. Default value fetches the first \"page\" of the collection. See [pagination](https://slack.dev) for more detail. ', 'title': 'Cursor', 'type': 'string'}}, title='RetrieveConversationMembersListRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='RetrieveConversationMembersListResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['conversations'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Retrieve Members Of A Conversation.'), ActionModel(name='SLACK_FIND_USER_BY_EMAIL_ADDRESS', display_name='Find user by email address', parameters=ActionParametersModel(properties={'email': {'description': 'An email address belonging to a user in the workspace', 'title': 'Email', 'type': 'string'}}, title='FindUserByEmailAddressRequest', type='object', required=['email']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='FindUserByEmailAddressResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['users'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Find A User With An Email Address.')]\n\nFor the following request, determine:\n1. Which specific actions from slack's registry are needed (if any)\n2. What each action's purpose would be in the workflow\n3. If this app's actions alone aren't sufficient for its part in the workflow, explain why\n\nRemember: Focus only on slack's capabilities - ignore requirements for other apps."}, {"role": "user", "content": "Automate checking CPA against target in Google Sheets and send Slack alert if exceeded."}], "model": "deepseek-ai/DeepSeek-R1-Distill-Qwen-32B", "n": 1, "parallel_tool_calls": true, "stream": false, "tool_choice": "required", "tools": [{"type": "function", "function": {"name": "final_result", "description": "The final response which ends this conversation", "parameters": {"$defs": {"ActionRequirement": {"properties": {"app_id": {"description": "ID of the required application", "title": "App Id", "type": "string"}, "action_name": {"description": "Name of the required action", "title": "Action Name", "type": "string"}, "purpose": {"description": "Why this action is needed in the workflow", "title": "Purpose", "type": "string"}}, "required": ["app_id", "action_name", "purpose"], "title": "ActionRequirement", "type": "object"}}, "properties": {"feasible": {"description": "Whether request can be implemented with available actions", "title": "Feasible", "type": "boolean"}, "required_actions": {"anyOf": [{"items": {"$ref": "#/$defs/ActionRequirement"}, "type": "array"}, {"type": "null"}], "default": null, "description": "List of required actions if feasible", "title": "Required Actions"}, "infeasible_reason": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "description": "Detailed explanation if request is not feasible", "title": "Infeasible Reason"}}, "required": ["feasible"], "title": "ActionFeasibilityResult", "type": "object"}}}]}
{"messages": [{"role": "system", "content": "You are a workflow analysis agent that evaluates automation requests.\nYour task is to analyze what actions from ONE SPECIFIC APP (slack) are needed for this workflow.\n\nFocus ONLY on analyzing which actions from this app's registry are required. \nDo NOT consider actions needed from other apps - that will be handled separately.\n\nAvailable Actions for slack:\n[ActionModel(name='SLACK_UPDATE_SLACK_CALL_INFORMATION', display_name='Update slack call information', parameters=ActionParametersModel(properties={'title': {'default': None, 'description': 'The name of the Call.', 'title': 'Title', 'type': 'string'}, 'desktop_app_join_url': {'default': None, 'description': 'When supplied, available Slack clients will attempt to directly launch the 3rd-party Call with this URL. ', 'title': 'Desktop App Join Url', 'type': 'string'}, 'id': {'description': '`id` returned by the [`calls.add`](https://slack.dev) method.', 'title': 'Id', 'type': 'string'}, 'join_url': {'default': None, 'description': 'The URL required for a client to join the Call.', 'title': 'Join Url', 'type': 'string'}}, title='UpdateSlackCallInformationRequest', type='object', required=['id']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='UpdateSlackCallInformationResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['calls'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Updates Information About A Call.'), ActionModel(name='SLACK_SET_WORKSPACE_DEFAULT_CHANNELS', display_name='Set workspace default channels', parameters=ActionParametersModel(properties={'channel_ids': {'description': 'An array of channel IDs.', 'title': 'Channel Ids', 'type': 'string'}, 'team_id': {'description': 'ID for the workspace to set the default channel for.', 'title': 'Team Id', 'type': 'string'}, 'token': {'description': 'Authentication token. Requires scope: `admin.teams:write`', 'title': 'Token', 'type': 'string'}}, title='SetWorkspaceDefaultChannelsRequest', type='object', required=['channel_ids', 'team_id', 'token']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='SetWorkspaceDefaultChannelsResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['admin.teams.settings', 'admin'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Set The Default Channels Of A Workspace.'), ActionModel(name='SLACK_CHECKS_AUTHENTICATION_AND_IDENTITY', display_name='Checks authentication and identity', parameters=ActionParametersModel(properties={}, title='ChecksAuthenticationAndIdentityRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='ChecksAuthenticationAndIdentityResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['auth'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Checks Authentication & Identity.'), ActionModel(name='SLACK_SENDS_EPHEMERAL_MESSAGES_TO_CHANNEL_USERS', display_name='Sends ephemeral messages to channel users', parameters=ActionParametersModel(properties={'as_user': {'default': None, 'description': 'Pass true to post the message as the authed user. Defaults to true if the chat:write:bot scope is not included. Otherwise, defaults to false. ', 'title': 'As User', 'type': 'boolean'}, 'attachments': {'default': None, 'description': 'A JSON-based array of structured attachments, presented as a URL-encoded string. ', 'title': 'Attachments', 'type': 'string'}, 'blocks': {'default': None, 'description': 'A JSON-based array of structured blocks, presented as a URL-encoded string. ', 'title': 'Blocks', 'type': 'string'}, 'channel': {'description': 'Channel, private group, or IM channel to send message to. Can be an encoded ID, or a name. ', 'title': 'Channel', 'type': 'string'}, 'icon_emoji': {'default': None, 'description': 'Emoji to use as the icon for this message. Overrides `icon_url`. Must be used in conjunction with `as_user` set to `false`, otherwise ignored. See [authorship](https://slack.dev) below. ', 'title': 'Icon Emoji', 'type': 'string'}, 'icon_url': {'default': None, 'description': 'URL to an image to use as the icon for this message. Must be used in conjunction with `as_user` set to false, otherwise ignored. See [authorship](https://slack.dev) below. ', 'title': 'Icon Url', 'type': 'string'}, 'link_names': {'default': None, 'description': 'Find and link channel names and usernames.', 'title': 'Link Names', 'type': 'boolean'}, 'parse': {'default': None, 'description': 'Change how messages are treated. Defaults to `none`. See [below](https://slack.dev). ', 'title': 'Parse', 'type': 'string'}, 'text': {'default': None, 'description': 'How this field works and whether it is required depends on other fields you use in your API call. [See below](https://slack.dev) for more detail. ', 'title': 'Text', 'type': 'string'}, 'thread_ts': {'default': None, 'description': 'Provide another message\"s `ts` value to post this message in a thread. Avoid using a reply\"s `ts` value; use its parent\"s value instead. Ephemeral messages in threads are only shown if there is already an active thread. ', 'title': 'Thread Ts', 'type': 'string'}, 'user': {'description': '`id` of the user who will receive the ephemeral message. The user should be in the channel specified by the `channel` argument. ', 'title': 'User', 'type': 'string'}, 'username': {'default': None, 'description': 'Set your bot\"s user name. Must be used in conjunction with `as_user` set to false, otherwise ignored. See [authorship](https://slack.dev) below. ', 'title': 'Username', 'type': 'string'}}, title='SendsEphemeralMessagesToChannelUsersRequest', type='object', required=['channel', 'user']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='SendsEphemeralMessagesToChannelUsersResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['chat'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Sends An Ephemeral Message To A User In A Channel.'), ActionModel(name='SLACK_ADD_IDP_GROUP_ALLOWLIST_TO_CHANNEL', display_name='Add idp group allowlist to channel', parameters=ActionParametersModel(properties={'channel_id': {'description': 'The channel to link this group to.', 'title': 'Channel Id', 'type': 'string'}, 'group_id': {'description': 'The [IDP Group](https://slack.com/help/articles/115001435788-Connect-identity-provider-groups-to-your-Enterprise-Grid-org) ID to be an allowlist for the private channel. ', 'title': 'Group Id', 'type': 'string'}, 'team_id': {'default': None, 'description': 'The workspace where the channel exists. This argument is required for channels only tied to one workspace, and optional for channels that are shared across an organization. ', 'title': 'Team Id', 'type': 'string'}, 'token': {'description': 'Authentication token. Requires scope: `admin.conversations:write`', 'title': 'Token', 'type': 'string'}}, title='AddIdpGroupAllowlistToChannelRequest', type='object', required=['channel_id', 'group_id', 'token']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='AddIdpGroupAllowlistToChannelResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['admin.conversations.restrictAccess', 'admin'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Add An Allowlist Of Idp Groups For Accessing A Channel'), ActionModel(name='SLACK_MARK_REMINDER_AS_COMPLETE', display_name='Mark reminder as complete', parameters=ActionParametersModel(properties={'reminder': {'default': None, 'description': 'The ID of the reminder to be marked as complete', 'title': 'Reminder', 'type': 'string'}}, title='MarkReminderAsCompleteRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='MarkReminderAsCompleteResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['reminders'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Marks A Reminder As Complete.'), ActionModel(name='SLACK_SET_EXPIRATION_FOR_A_GUEST_USER', display_name='Set expiration for a guest user', parameters=ActionParametersModel(properties={'expiration_ts': {'description': 'Timestamp when guest account should be disabled.', 'title': 'Expiration Ts', 'type': 'integer'}, 'team_id': {'description': 'The ID (`T1234`) of the workspace.', 'title': 'Team Id', 'type': 'string'}, 'user_id': {'description': 'The ID of the user to set an expiration for.', 'title': 'User Id', 'type': 'string'}}, title='SetExpirationForAGuestUserRequest', type='object', required=['expiration_ts', 'team_id', 'user_id']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='SetExpirationForAGuestUserResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['admin.users', 'admin'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Set An Expiration For A Guest User'), ActionModel(name='SLACK_CONVERSATIONS_INFO', display_name='Retrieve conversation information', parameters=ActionParametersModel(properties={'channel': {'default': None, 'description': 'Conversation ID to learn more about', 'title': 'Channel', 'type': 'string'}, 'include_locale': {'default': None, 'description': 'Set this to `true` to receive the locale for this conversation. Defaults to `false` ', 'title': 'Include Locale', 'type': 'boolean'}, 'include_num_members': {'default': None, 'description': 'Set to `true` to include the member count for the specified conversation. Defaults to `false` ', 'title': 'Include Num Members', 'type': 'boolean'}}, title='RetrieveConversationInformationRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='RetrieveConversationInformationResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=[], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Retrieve Information About A Conversation.<<DEPRECATED use retrieve_conversation_information>>'), ActionModel(name='SLACK_LIST_USER_GROUPS_FOR_TEAM_WITH_OPTIONS', display_name='List user groups for team with options', parameters=ActionParametersModel(properties={'include_users': {'default': None, 'description': 'Include the list of users for each User Group.', 'title': 'Include Users', 'type': 'boolean'}, 'include_count': {'default': None, 'description': 'Include the number of users in each User Group.', 'title': 'Include Count', 'type': 'boolean'}, 'include_disabled': {'default': None, 'description': 'Include disabled User Groups.', 'title': 'Include Disabled', 'type': 'boolean'}}, title='ListUserGroupsForTeamWithOptionsRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='ListUserGroupsForTeamWithOptionsResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['usergroups'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='List All User Groups For A Team'), ActionModel(name='SLACK_ADD_ENTERPRISE_USER_TO_WORKSPACE', display_name='Add enterprise user to workspace', parameters=ActionParametersModel(properties={'channel_ids': {'default': None, 'description': 'Comma separated values of channel IDs to add user in the new workspace.', 'title': 'Channel Ids', 'type': 'string'}, 'is_restricted': {'default': None, 'description': 'True if user should be added to the workspace as a guest.', 'title': 'Is Restricted', 'type': 'boolean'}, 'is_ultra_restricted': {'default': None, 'description': 'True if user should be added to the workspace as a single-channel guest.', 'title': 'Is Ultra Restricted', 'type': 'boolean'}, 'team_id': {'description': 'The ID (`T1234`) of the workspace.', 'title': 'Team Id', 'type': 'string'}, 'user_id': {'description': 'The ID of the user to add to the workspace.', 'title': 'User Id', 'type': 'string'}}, title='AddEnterpriseUserToWorkspaceRequest', type='object', required=['team_id', 'user_id']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='AddEnterpriseUserToWorkspaceResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['admin.users', 'admin'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Add An Enterprise User To A Workspace.'), ActionModel(name='SLACK_RETRIEVE_DETAILED_USER_INFORMATION', display_name='Retrieve detailed user information', parameters=ActionParametersModel(properties={'include_locale': {'default': None, 'description': 'Set this to `true` to receive the locale for this user. Defaults to `false` ', 'title': 'Include Locale', 'type': 'boolean'}, 'user': {'default': None, 'description': 'User to get info on', 'title': 'User', 'type': 'string'}}, title='RetrieveDetailedUserInformationRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='RetrieveDetailedUserInformationResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['users'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Gets Information About A User.'), ActionModel(name='SLACK_LIST_SLACK_S_REMOTE_FILES_WITH_FILTERS', display_name='List slack s remote files with filters', parameters=ActionParametersModel(properties={'channel': {'default': None, 'description': 'Filter files appearing in a specific channel, indicated by its ID.', 'title': 'Channel', 'type': 'string'}, 'ts_from': {'default': None, 'description': 'Filter files created after this timestamp (inclusive).', 'title': 'Ts From', 'type': 'integer'}, 'ts_to': {'default': None, 'description': 'Filter files created before this timestamp (inclusive).', 'title': 'Ts To', 'type': 'integer'}, 'limit': {'default': None, 'description': 'The maximum number of items to return.', 'title': 'Limit', 'type': 'integer'}, 'cursor': {'default': None, 'description': 'Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request\"s `response_metadata`. Default value fetches the first \"page\" of the collection. See [pagination](https://slack.dev) for more detail. ', 'title': 'Cursor', 'type': 'string'}}, title='ListSlackSRemoteFilesWithFiltersRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='ListSlackSRemoteFilesWithFiltersResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['files.remote', 'files'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Retrieve Information About A Remote File Added To Slack'), ActionModel(name='SLACK_LIST_WORKSPACE_ADMINS', display_name='List workspace admins', parameters=ActionParametersModel(properties={'limit': {'default': None, 'description': 'The maximum number of items to return.', 'title': 'Limit', 'type': 'integer'}, 'cursor': {'default': None, 'description': 'Set `cursor` to `next_cursor` returned by the previous call to list items in the next page. ', 'title': 'Cursor', 'type': 'string'}, 'team_id': {'description': 'Team Id', 'title': 'Team Id', 'type': 'string'}}, title='ListWorkspaceAdminsRequest', type='object', required=['team_id']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='ListWorkspaceAdminsResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['admin.teams.admins', 'admin'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='List All Of The Admins On A Given Workspace.'), ActionModel(name='SLACK_ACTIVATE_OR_MODIFY_DO_NOT_DISTURB_DURATION', display_name='Activate or modify do not disturb duration', parameters=ActionParametersModel(properties={'num_minutes': {'description': 'Number of minutes, from now, to snooze until.', 'title': 'Num Minutes', 'type': 'string'}, 'token': {'description': 'Authentication token. Requires scope: `dnd:write`', 'title': 'Token', 'type': 'string'}}, title='ActivateOrModifyDoNotDisturbDurationRequest', type='object', required=['num_minutes', 'token']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='ActivateOrModifyDoNotDisturbDurationResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['dnd'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Turns On Do Not Disturb Mode For The Current User, Or Changes Its Duration.'), ActionModel(name='SLACK_RETRIEVE_DETAILED_INFORMATION_ABOUT_A_FILE', display_name='Retrieve detailed information about a file', parameters=ActionParametersModel(properties={'file': {'default': None, 'description': 'Specify a file by providing its ID.', 'title': 'File', 'type': 'string'}, 'count': {'default': None, 'description': 'Count', 'title': 'Count', 'type': 'string'}, 'page': {'default': None, 'description': 'Page', 'title': 'Page', 'type': 'string'}, 'limit': {'default': None, 'description': 'The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the list hasn\"t been reached. ', 'title': 'Limit', 'type': 'integer'}, 'cursor': {'default': None, 'description': 'Parameter for pagination. File comments are paginated for a single file. Set `cursor` equal to the `next_cursor` attribute returned by the previous request\"s `response_metadata`. This parameter is optional, but pagination is mandatory: the default value simply fetches the first \"page\" of the collection of comments. See [pagination](https://slack.dev) for more details. ', 'title': 'Cursor', 'type': 'string'}}, title='RetrieveDetailedInformationAboutAFileRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='RetrieveDetailedInformationAboutAFileResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['files'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Gets Information About A File.'), ActionModel(name='SLACK_CLOSE_DM_OR_MULTI_PERSON_DM', display_name='Close dm or multi person dm', parameters=ActionParametersModel(properties={'channel': {'default': None, 'description': 'Conversation to close.', 'title': 'Channel', 'type': 'string'}}, title='CloseDmOrMultiPersonDmRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='CloseDmOrMultiPersonDmResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['conversations'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Closes A Direct Message Or Multi Person Direct Message.'), ActionModel(name='SLACK_SEARCH_MESSAGES', display_name='Search for messages with query', parameters=ActionParametersModel(properties={'count': {'default': None, 'description': 'Pass the number of results you want per \"page\". Maximum of `100`.', 'title': 'Count', 'type': 'integer'}, 'highlight': {'default': None, 'description': 'Pass a value of `true` to enable query highlight markers (see below).', 'title': 'Highlight', 'type': 'boolean'}, 'page': {'default': None, 'description': 'Page', 'title': 'Page', 'type': 'integer'}, 'query': {'description': 'Search query.', 'title': 'Query', 'type': 'string'}, 'sort': {'default': None, 'description': 'Return matches sorted by either `score` or `timestamp`.', 'title': 'Sort', 'type': 'string'}, 'sort_dir': {'default': None, 'description': 'Change sort direction to ascending (`asc`) or descending (`desc`).', 'title': 'Sort Dir', 'type': 'string'}}, title='SearchForMessagesWithQueryRequest', type='object', required=['query']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='SearchForMessagesWithQueryResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=[], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Searches For Messages Matching A Query.<<DEPRECATED use search_for_messages_with_query>>'), ActionModel(name='SLACK_ADD_DEFAULT_CHANNELS_TO_IDP_GROUP', display_name='Add default channels to idp group', parameters=ActionParametersModel(properties={'channel_ids': {'description': 'Comma separated string of channel IDs.', 'title': 'Channel Ids', 'type': 'string'}, 'team_id': {'default': None, 'description': 'The workspace to add default channels in.', 'title': 'Team Id', 'type': 'string'}, 'usergroup_id': {'description': 'ID of the IDP group to add default channels for.', 'title': 'Usergroup Id', 'type': 'string'}}, title='AddDefaultChannelsToIdpGroupRequest', type='object', required=['channel_ids', 'usergroup_id']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='AddDefaultChannelsToIdpGroupResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['admin.usergroups', 'admin'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Add One Or More Default Channels To An Idp Group.'), ActionModel(name='SLACK_RETRIEVE_REMOTE_FILE_INFO_IN_SLACK', display_name='Retrieve remote file info in slack', parameters=ActionParametersModel(properties={'file': {'default': None, 'description': 'Specify a file by providing its ID.', 'title': 'File', 'type': 'string'}, 'external_id': {'default': None, 'description': 'Creator defined GUID for the file.', 'title': 'External Id', 'type': 'string'}}, title='RetrieveRemoteFileInfoInSlackRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='RetrieveRemoteFileInfoInSlackResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['files.remote', 'files'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Retrieve Information About A Remote File Added To Slack'), ActionModel(name='SLACK_UPDATES_A_SLACK_MESSAGE', display_name='Updates a slack message', parameters=ActionParametersModel(properties={'as_user': {'default': None, 'description': 'Pass true to update the message as the authed user. [Bot users](https://slack.dev) in this context are considered authed users. ', 'title': 'As User', 'type': 'string'}, 'attachments': {'default': None, 'description': 'A JSON-based array of structured attachments, presented as a URL-encoded string. This field is required when not presenting `text`. If you don\"t include this field, the message\"s previous `attachments` will be retained. To remove previous `attachments`, include an empty array for this field. ', 'title': 'Attachments', 'type': 'string'}, 'blocks': {'default': None, 'description': 'A JSON-based array of [structured blocks](https://slack.dev), presented as a URL-encoded string. If you don\"t include this field, the message\"s previous `blocks` will be retained. To remove previous `blocks`, include an empty array for this field. ', 'title': 'Blocks', 'type': 'string'}, 'channel': {'description': 'Channel containing the message to be updated.', 'title': 'Channel', 'type': 'string'}, 'link_names': {'default': None, 'description': 'Find and link channel names and usernames. Defaults to `none`. If you do not specify a value for this field, the original value set for the message will be overwritten with the default, `none`. ', 'title': 'Link Names', 'type': 'string'}, 'parse': {'default': None, 'description': 'Change how messages are treated. Defaults to `client`, unlike `chat.postMessage`. Accepts either `none` or `full`. If you do not specify a value for this field, the original value set for the message will be overwritten with the default, `client`. ', 'title': 'Parse', 'type': 'string'}, 'text': {'default': None, 'description': 'New text for the message, using the [default formatting rules](https://slack.dev). It\"s not required when presenting `blocks` or `attachments`. ', 'title': 'Text', 'type': 'string'}, 'ts': {'description': 'Timestamp of the message to be updated.', 'title': 'Ts', 'type': 'string'}}, title='UpdatesASlackMessageRequest', type='object', required=['channel', 'ts']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='UpdatesASlackMessageResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['chat', 'important'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Updates A Message.'), ActionModel(name='SLACK_SEARCH_FOR_MESSAGES_WITH_QUERY', display_name='Search for messages with query', parameters=ActionParametersModel(properties={'count': {'default': None, 'description': 'Pass the number of results you want per \"page\". Maximum of `100`.', 'title': 'Count', 'type': 'integer'}, 'highlight': {'default': None, 'description': 'Pass a value of `true` to enable query highlight markers (see below).', 'title': 'Highlight', 'type': 'boolean'}, 'page': {'default': None, 'description': 'Page', 'title': 'Page', 'type': 'integer'}, 'query': {'description': 'Search query.', 'title': 'Query', 'type': 'string'}, 'sort': {'default': None, 'description': 'Return matches sorted by either `score` or `timestamp`.', 'title': 'Sort', 'type': 'string'}, 'sort_dir': {'default': None, 'description': 'Change sort direction to ascending (`asc`) or descending (`desc`).', 'title': 'Sort Dir', 'type': 'string'}}, title='SearchForMessagesWithQueryRequest', type='object', required=['query']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='SearchForMessagesWithQueryResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['search', 'important'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Searches For Messages Matching A Query.'), ActionModel(name='SLACK_TRIGGER_USER_PERMISSIONS_MODAL', display_name='Trigger user permissions modal', parameters=ActionParametersModel(properties={'scopes': {'description': 'A comma separated list of user scopes to request for', 'title': 'Scopes', 'type': 'string'}, 'trigger_id': {'description': 'Token used to trigger the request', 'title': 'Trigger Id', 'type': 'string'}, 'user': {'description': 'The user this scope is being requested for', 'title': 'User', 'type': 'string'}}, title='TriggerUserPermissionsModalRequest', type='object', required=['scopes', 'trigger_id', 'user']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='TriggerUserPermissionsModalResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['apps.permissions.users', 'apps'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Enables An App To Trigger A Permissions Modal To Grant An App Access To A User Access Scope.'), ActionModel(name='SLACK_PROMOTE_USER_TO_ADMIN_STATUS', display_name='Promote user to admin status', parameters=ActionParametersModel(properties={'team_id': {'description': 'The ID (`T1234`) of the workspace.', 'title': 'Team Id', 'type': 'string'}, 'user_id': {'description': 'The ID of the user to designate as an admin.', 'title': 'User Id', 'type': 'string'}}, title='PromoteUserToAdminStatusRequest', type='object', required=['team_id', 'user_id']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='PromoteUserToAdminStatusResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['admin.users', 'admin'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Set An Existing Guest, Regular User, Or Owner To Be An Admin User.'), ActionModel(name='SLACK_START_REAL_TIME_MESSAGING_SESSION', display_name='Start real time messaging session', parameters=ActionParametersModel(properties={'batch_presence_aware': {'default': None, 'description': 'Batch presence deliveries via subscription. Enabling changes the shape of `presence_change` events. See [batch presence](https://slack.dev). ', 'title': 'Batch Presence Aware', 'type': 'boolean'}, 'presence_sub': {'default': None, 'description': 'Only deliver presence events when requested by subscription. See [presence subscriptions](https://slack.dev). ', 'title': 'Presence Sub', 'type': 'boolean'}}, title='StartRealTimeMessagingSessionRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='StartRealTimeMessagingSessionResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['rtm'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Starts A Real Time Messaging Session.'), ActionModel(name='SLACK_REVERSE_A_CONVERSATION_S_ARCHIVAL_STATUS', display_name='Reverse a conversation s archival status', parameters=ActionParametersModel(properties={'channel': {'default': None, 'description': 'ID of conversation to unarchive', 'title': 'Channel', 'type': 'string'}}, title='ReverseAConversationSArchivalStatusRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='ReverseAConversationSArchivalStatusResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['conversations'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Reverses Conversation Archival.'), ActionModel(name='SLACK_REMOVE_A_REMOTE_FILE', display_name='Remove a remote file', parameters=ActionParametersModel(properties={'external_id': {'default': None, 'description': 'Creator defined GUID for the file.', 'title': 'External Id', 'type': 'string'}, 'file': {'default': None, 'description': 'Specify a file by providing its ID.', 'title': 'File', 'type': 'string'}, 'token': {'default': None, 'description': 'Authentication token. Requires scope: `remote_files:write`', 'title': 'Token', 'type': 'string'}}, title='RemoveARemoteFileRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='RemoveARemoteFileResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['files.remote', 'files'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Remove A Remote File.'), ActionModel(name='SLACK_DELETE_A_SLACK_REMINDER', display_name='Delete a slack reminder', parameters=ActionParametersModel(properties={'reminder': {'default': None, 'description': 'The ID of the reminder', 'title': 'Reminder', 'type': 'string'}}, title='DeleteASlackReminderRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='DeleteASlackReminderResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['reminders'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Deletes A Reminder.'), ActionModel(name='SLACK_APPROVE_WORKSPACE_INVITE_REQUEST', display_name='Approve workspace invite request', parameters=ActionParametersModel(properties={'invite_request_id': {'description': 'ID of the request to invite.', 'title': 'Invite Request Id', 'type': 'string'}, 'team_id': {'default': None, 'description': 'ID for the workspace where the invite request was made.', 'title': 'Team Id', 'type': 'string'}}, title='ApproveWorkspaceInviteRequestRequest', type='object', required=['invite_request_id']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='ApproveWorkspaceInviteRequestResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['admin.inviteRequests', 'admin'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Approve A Workspace Invite Request.'), ActionModel(name='SLACK_GET_USER_PRESENCE_INFO', display_name='Get user presence info', parameters=ActionParametersModel(properties={'user': {'default': None, 'description': 'User to get presence info on. Defaults to the authed user.', 'title': 'User', 'type': 'string'}}, title='GetUserPresenceInfoRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='GetUserPresenceInfoResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['users'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Gets User Presence Information.'), ActionModel(name='SLACK_LIST_USER_REACTIONS', display_name='List user reactions', parameters=ActionParametersModel(properties={'user': {'default': None, 'description': 'Show reactions made by this user. Defaults to the authed user.', 'title': 'User', 'type': 'string'}, 'full': {'default': None, 'description': 'If true always return the complete reaction list.', 'title': 'Full', 'type': 'boolean'}, 'count': {'default': None, 'description': 'Count', 'title': 'Count', 'type': 'integer'}, 'page': {'default': None, 'description': 'Page', 'title': 'Page', 'type': 'integer'}, 'cursor': {'default': None, 'description': 'Parameter for pagination. Set `cursor` equal to the `next_cursor` attribute returned by the previous request\"s `response_metadata`. This parameter is optional, but pagination is mandatory: the default value simply fetches the first \"page\" of the collection. See [pagination](https://slack.dev) for more details. ', 'title': 'Cursor', 'type': 'string'}, 'limit': {'default': None, 'description': 'The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the list hasn\"t been reached. ', 'title': 'Limit', 'type': 'integer'}}, title='ListUserReactionsRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='ListUserReactionsResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['reactions'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Lists Reactions Made By A User.'), ActionModel(name='SLACK_UPDATE_AN_EXISTING_SLACK_USER_GROUP', display_name='Update an existing slack user group', parameters=ActionParametersModel(properties={'description': {'default': None, 'description': 'A short description of the User Group.', 'title': 'Description', 'type': 'string'}, 'channels': {'default': None, 'description': 'A comma separated string of encoded channel IDs for which the User Group uses as a default. ', 'title': 'Channels', 'type': 'string'}, 'handle': {'default': None, 'description': 'A mention handle. Must be unique among channels, users and User Groups.', 'title': 'Handle', 'type': 'string'}, 'include_count': {'default': None, 'description': 'Include the number of users in the User Group.', 'title': 'Include Count', 'type': 'boolean'}, 'name': {'default': None, 'description': 'A name for the User Group. Must be unique among User Groups.', 'title': 'Name', 'type': 'string'}, 'usergroup': {'description': 'The encoded ID of the User Group to update.', 'title': 'Usergroup', 'type': 'string'}}, title='UpdateAnExistingSlackUserGroupRequest', type='object', required=['usergroup']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='UpdateAnExistingSlackUserGroupResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['usergroups'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Update An Existing User Group'), ActionModel(name='SLACK_LIST_RESTRICTED_APPS_FOR_AN_ORG_OR_WORKSPACE', display_name='List restricted apps for an org or workspace', parameters=ActionParametersModel(properties={'limit': {'default': None, 'description': 'The maximum number of items to return. Must be between 1 - 1000 both inclusive. ', 'title': 'Limit', 'type': 'integer'}, 'cursor': {'default': None, 'description': 'Set `cursor` to `next_cursor` returned by the previous call to list items in the next page ', 'title': 'Cursor', 'type': 'string'}, 'team_id': {'default': None, 'description': 'Team Id', 'title': 'Team Id', 'type': 'string'}, 'enterprise_id': {'default': None, 'description': 'Enterprise Id', 'title': 'Enterprise Id', 'type': 'string'}}, title='ListRestrictedAppsForAnOrgOrWorkspaceRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='ListRestrictedAppsForAnOrgOrWorkspaceResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['admin.apps.restricted', 'admin'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='List Restricted Apps For An Org Or Workspace.'), ActionModel(name='SLACK_UNINSTALL_APP_FROM_WORKSPACE', display_name='Uninstall app from workspace', parameters=ActionParametersModel(properties={'client_id': {'default': None, 'description': 'Issued when you created your application.', 'title': 'Client Id', 'type': 'string'}, 'client_secret': {'default': None, 'description': 'Issued when you created your application.', 'title': 'Client Secret', 'type': 'string'}}, title='UninstallAppFromWorkspaceRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='UninstallAppFromWorkspaceResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['apps'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Uninstalls Your App From A Workspace.'), ActionModel(name='SLACK_RETRIEVE_CALL_INFORMATION', display_name='Retrieve call information', parameters=ActionParametersModel(properties={'id': {'description': '`id` of the Call returned by the [`calls.add`](https://slack.dev) method. ', 'title': 'Id', 'type': 'string'}}, title='RetrieveCallInformationRequest', type='object', required=['id']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='RetrieveCallInformationResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['calls'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Returns Information About A Call.'), ActionModel(name='SLACK_DELETE_A_COMMENT_ON_A_FILE', display_name='Delete a comment on a file', parameters=ActionParametersModel(properties={'file': {'default': None, 'description': 'File to delete a comment from.', 'title': 'File', 'type': 'string'}, 'id': {'default': None, 'description': 'The comment to delete.', 'title': 'Id', 'type': 'string'}}, title='DeleteACommentOnAFileRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='DeleteACommentOnAFileResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['files.comments', 'files'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Deletes An Existing Comment On A File.'), ActionModel(name='SLACK_LIST_WORKSPACE_USERS', display_name='List workspace users', parameters=ActionParametersModel(properties={'team_id': {'description': 'The ID (`T1234`) of the workspace.', 'title': 'Team Id', 'type': 'string'}, 'cursor': {'default': None, 'description': 'Set `cursor` to `next_cursor` returned by the previous call to list items in the next page. ', 'title': 'Cursor', 'type': 'string'}, 'limit': {'default': None, 'description': 'Limit for how many users to be retrieved per page', 'title': 'Limit', 'type': 'integer'}}, title='ListWorkspaceUsersRequest', type='object', required=['team_id']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='ListWorkspaceUsersResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['admin.users', 'admin'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='List Users On A Workspace'), ActionModel(name='SLACK_CREATE_A_REMINDER', display_name='Create a reminder', parameters=ActionParametersModel(properties={'text': {'description': 'The content of the reminder', 'title': 'Text', 'type': 'string'}, 'time': {'description': 'When this reminder should happen: the Unix timestamp (up to five years from now), the number of seconds until the reminder (if within 24 hours), or a natural language description (Ex. \"in 15 minutes,\" or \"every Thursday\") ', 'title': 'Time', 'type': 'string'}, 'user': {'default': None, 'description': 'The user who will receive the reminder. If no user is specified, the reminder will go to user who created it. ', 'title': 'User', 'type': 'string'}}, title='CreateAReminderRequest', type='object', required=['text', 'time']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='CreateAReminderResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['reminders', 'important'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Creates A Reminder.'), ActionModel(name='SLACK_LIST_ENTERPRISE_GRID_ORGANIZATION_EMOJIS', display_name='List enterprise grid organization emojis', parameters=ActionParametersModel(properties={'cursor': {'default': None, 'description': 'Set `cursor` to `next_cursor` returned by the previous call to list items in the next page ', 'title': 'Cursor', 'type': 'string'}, 'limit': {'default': None, 'description': 'The maximum number of items to return. Must be between 1 - 1000 both inclusive. ', 'title': 'Limit', 'type': 'integer'}}, title='ListEnterpriseGridOrganizationEmojisRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='ListEnterpriseGridOrganizationEmojisResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['admin.emoji', 'admin'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='List Emoji For An Enterprise Grid Organization.'), ActionModel(name='SLACK_FETCH_WORKSPACE_SETTINGS_INFORMATION', display_name='Fetch workspace settings information', parameters=ActionParametersModel(properties={'team_id': {'description': 'Team Id', 'title': 'Team Id', 'type': 'string'}}, title='FetchWorkspaceSettingsInformationRequest', type='object', required=['team_id']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='FetchWorkspaceSettingsInformationResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['admin.teams.settings', 'admin'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Fetch Information About Settings In A Workspace'), ActionModel(name='SLACK_GET_REMINDER_INFORMATION', display_name='Get reminder information', parameters=ActionParametersModel(properties={'reminder': {'default': None, 'description': 'The ID of the reminder', 'title': 'Reminder', 'type': 'string'}}, title='GetReminderInformationRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='GetReminderInformationResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['reminders'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Gets Information About A Reminder.'), ActionModel(name='SLACK_LIST_APP_USER_GRANTS_AND_SCOPES_ON_TEAM', display_name='List app user grants and scopes on team', parameters=ActionParametersModel(properties={'cursor': {'default': None, 'description': 'Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request\"s `response_metadata`. Default value fetches the first \"page\" of the collection. See [pagination](https://slack.dev) for more detail. ', 'title': 'Cursor', 'type': 'string'}, 'limit': {'default': None, 'description': 'The maximum number of items to return.', 'title': 'Limit', 'type': 'integer'}}, title='ListAppUserGrantsAndScopesOnTeamRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='ListAppUserGrantsAndScopesOnTeamResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['apps.permissions.users', 'apps'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Returns List Of User Grants And Corresponding Scopes This App Has On A Team.'), ActionModel(name='SLACK_REGISTER_CALL_PARTICIPANTS_REMOVAL', display_name='Register call participants removal', parameters=ActionParametersModel(properties={'id': {'description': '`id` returned by the [`calls.add`](https://slack.dev) method.', 'title': 'Id', 'type': 'string'}, 'users': {'description': 'The list of users to remove as participants in the Call. [Read more on how to specify users here](https://slack.dev). ', 'title': 'Users', 'type': 'string'}}, title='RegisterCallParticipantsRemovalRequest', type='object', required=['id', 'users']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='RegisterCallParticipantsRemovalResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['calls.participants', 'calls'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Registers Participants Removed From A Call.'), ActionModel(name='SLACK_ENABLE_A_SPECIFIED_USER_GROUP', display_name='Enable a specified user group', parameters=ActionParametersModel(properties={'include_count': {'default': None, 'description': 'Include the number of users in the User Group.', 'title': 'Include Count', 'type': 'boolean'}, 'usergroup': {'description': 'The encoded ID of the User Group to enable.', 'title': 'Usergroup', 'type': 'string'}}, title='EnableASpecifiedUserGroupRequest', type='object', required=['usergroup']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='EnableASpecifiedUserGroupResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['usergroups'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Enable A User Group'), ActionModel(name='SLACK_LIST_EVENT_AUTHORIZATIONS_FOR_APPS', display_name='List event authorizations for apps', parameters=ActionParametersModel(properties={'event_context': {'description': 'Event Context', 'title': 'Event Context', 'type': 'string'}, 'cursor': {'default': None, 'description': 'Cursor', 'title': 'Cursor', 'type': 'string'}, 'limit': {'default': None, 'description': 'Limit', 'title': 'Limit', 'type': 'integer'}}, title='ListEventAuthorizationsForAppsRequest', type='object', required=['event_context']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='ListEventAuthorizationsForAppsResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['apps.event.authorizations', 'apps'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Get A List Of Authorizations For The Given Event Context. Each Authorization Represents An App Installation That The Event Is Visible To.'), ActionModel(name='SLACK_REVOKE_PUBLIC_SHARING_ACCESS_FOR_A_FILE', display_name='Revoke public sharing access for a file', parameters=ActionParametersModel(properties={'file': {'default': None, 'description': 'File to revoke', 'title': 'File', 'type': 'string'}}, title='RevokePublicSharingAccessForAFileRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='RevokePublicSharingAccessForAFileResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['files'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Revokes Public/External Sharing Access For A File'), ActionModel(name='SLACK_GET_BILLABLE_TEAM_USER_INFO', display_name='Get billable team user info', parameters=ActionParametersModel(properties={'user': {'default': None, 'description': 'A user to retrieve the billable information for. Defaults to all users.', 'title': 'User', 'type': 'string'}}, title='GetBillableTeamUserInfoRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='GetBillableTeamUserInfoResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['team'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Gets Billable Users Information For The Current Team.'), ActionModel(name='SLACK_REMOVE_USER_FROM_WORKSPACE', display_name='Remove user from workspace', parameters=ActionParametersModel(properties={'team_id': {'description': 'The ID (`T1234`) of the workspace.', 'title': 'Team Id', 'type': 'string'}, 'user_id': {'description': 'The ID of the user to remove.', 'title': 'User Id', 'type': 'string'}}, title='RemoveUserFromWorkspaceRequest', type='object', required=['team_id', 'user_id']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='RemoveUserFromWorkspaceResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['admin.users', 'admin'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Remove A User From A Workspace.'), ActionModel(name='SLACK_DISCONNECT_CHANNEL_FROM_WORKSPACES', display_name='Disconnect channel from workspaces', parameters=ActionParametersModel(properties={'channel_id': {'description': 'The channel to be disconnected from some workspaces.', 'title': 'Channel Id', 'type': 'string'}, 'leaving_team_ids': {'default': None, 'description': 'The team to be removed from the channel. Currently only a single team id can be specified. ', 'title': 'Leaving Team Ids', 'type': 'string'}}, title='DisconnectChannelFromWorkspacesRequest', type='object', required=['channel_id']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='DisconnectChannelFromWorkspacesResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['admin.conversations', 'admin'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Disconnect A Connected Channel From One Or More Workspaces.'), ActionModel(name='SLACK_EXCHANGE_OAUTH_CODE_FOR_ACCESS_TOKEN', display_name='Exchange oauth code for access token', parameters=ActionParametersModel(properties={'client_id': {'default': None, 'description': 'Issued when you created your application.', 'title': 'Client Id', 'type': 'string'}, 'client_secret': {'default': None, 'description': 'Issued when you created your application.', 'title': 'Client Secret', 'type': 'string'}, 'code': {'default': None, 'description': 'The `code` param returned via the OAuth callback.', 'title': 'Code', 'type': 'string'}, 'redirect_uri': {'default': None, 'description': 'This must match the originally submitted URI (if one was sent).', 'title': 'Redirect Uri', 'type': 'string'}, 'single_channel': {'default': None, 'description': 'Request the user to add your app only to a single channel. Only valid with a [legacy workspace app](https://api.slack.com/legacy-workspace-apps). ', 'title': 'Single Channel', 'type': 'boolean'}}, title='ExchangeOauthCodeForAccessTokenRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='ExchangeOauthCodeForAccessTokenResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['oauth'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Exchanges A Temporary O Auth Verifier Code For An Access Token.'), ActionModel(name='SLACK_RENAME_AN_EMOJI', display_name='Rename an emoji', parameters=ActionParametersModel(properties={'name': {'description': 'The name of the emoji to be renamed. Colons (`:myemoji:`) around the value are not required, although they may be included. ', 'title': 'Name', 'type': 'string'}, 'new_name': {'description': 'The new name of the emoji.', 'title': 'New Name', 'type': 'string'}, 'token': {'description': 'Authentication token. Requires scope: `admin.teams:write`', 'title': 'Token', 'type': 'string'}}, title='RenameAnEmojiRequest', type='object', required=['name', 'new_name', 'token']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='RenameAnEmojiResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['admin.emoji', 'admin'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Rename An Emoji.'), ActionModel(name='SLACK_LIST_APP_PERMISSIONS_ON_A_TEAM', display_name='List app permissions on a team', parameters=ActionParametersModel(properties={}, title='ListAppPermissionsOnATeamRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='ListAppPermissionsOnATeamResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['apps.permissions', 'apps'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Returns List Of Permissions This App Has On A Team.'), ActionModel(name='SLACK_LIST_IDP_GROUPS_LINKED_TO_A_CHANNEL', display_name='List idp groups linked to a channel', parameters=ActionParametersModel(properties={'channel_id': {'description': 'Channel Id', 'title': 'Channel Id', 'type': 'string'}, 'team_id': {'default': None, 'description': 'The workspace where the channel exists. This argument is required for channels only tied to one workspace, and optional for channels that are shared across an organization. ', 'title': 'Team Id', 'type': 'string'}}, title='ListIdpGroupsLinkedToAChannelRequest', type='object', required=['channel_id']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='ListIdpGroupsLinkedToAChannelResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['admin.conversations.restrictAccess', 'admin'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='List All Idp Groups Linked To A Channel'), ActionModel(name='SLACK_SET_THE_TOPIC_OF_A_CONVERSATION', display_name='Set the topic of a conversation', parameters=ActionParametersModel(properties={'channel': {'default': None, 'description': 'Conversation to set the topic of', 'title': 'Channel', 'type': 'string'}, 'topic': {'default': None, 'description': 'The new topic string. Does not support formatting or linkification.', 'title': 'Topic', 'type': 'string'}}, title='SetTheTopicOfAConversationRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='SetTheTopicOfAConversationResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['conversations'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Sets The Topic For A Conversation.'), ActionModel(name='SLACK_DELETE_A_PUBLIC_OR_PRIVATE_CHANNEL', display_name='Delete a public or private channel', parameters=ActionParametersModel(properties={'channel_id': {'description': 'The channel to delete.', 'title': 'Channel Id', 'type': 'string'}}, title='DeleteAPublicOrPrivateChannelRequest', type='object', required=['channel_id']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='DeleteAPublicOrPrivateChannelResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['admin.conversations', 'admin'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Delete A Public Or Private Channel.'), ActionModel(name='SLACK_RETRIEVE_USER_PROFILE_INFORMATION', display_name='Retrieve user profile information', parameters=ActionParametersModel(properties={'include_labels': {'default': None, 'description': 'Include labels for each ID in custom profile fields', 'title': 'Include Labels', 'type': 'boolean'}, 'user': {'default': None, 'description': 'User to retrieve profile info for', 'title': 'User', 'type': 'string'}}, title='RetrieveUserProfileInformationRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='RetrieveUserProfileInformationResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['users.profile', 'users'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description=\"Retrieves A User's Profile Information.\"), ActionModel(name='SLACK_SET_USER_PROFILE_PHOTO_WITH_CROPPING_OPTIONS', display_name='Set user profile photo with cropping options', parameters=ActionParametersModel(properties={'crop_w': {'default': None, 'description': 'Width/height of crop box (always square)', 'title': 'Crop W', 'type': 'string'}, 'crop_x': {'default': None, 'description': 'X coordinate of top-left corner of crop box', 'title': 'Crop X', 'type': 'string'}, 'crop_y': {'default': None, 'description': 'Y coordinate of top-left corner of crop box', 'title': 'Crop Y', 'type': 'string'}, 'image': {'default': None, 'description': 'File contents via `multipart/form-data`.', 'title': 'Image', 'type': 'string'}, 'token': {'description': 'Authentication token. Requires scope: `users.profile:write`', 'title': 'Token', 'type': 'string'}}, title='SetUserProfilePhotoWithCroppingOptionsRequest', type='object', required=['token']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='SetUserProfilePhotoWithCroppingOptionsResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['users'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Set The User Profile Photo'), ActionModel(name='SLACK_REQUEST_ADDITIONAL_APP_PERMISSIONS', display_name='Request additional app permissions', parameters=ActionParametersModel(properties={'scopes': {'description': 'A comma separated list of scopes to request for', 'title': 'Scopes', 'type': 'string'}, 'trigger_id': {'description': 'Token used to trigger the permissions API', 'title': 'Trigger Id', 'type': 'string'}}, title='RequestAdditionalAppPermissionsRequest', type='object', required=['scopes', 'trigger_id']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='RequestAdditionalAppPermissionsResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['apps.permissions', 'apps'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Allows An App To Request Additional Scopes'), ActionModel(name='SLACK_ASSOCIATE_DEFAULT_WORKSPACES_WITH_IDP_GROUP', display_name='Associate default workspaces with idp group', parameters=ActionParametersModel(properties={'auto_provision': {'default': None, 'description': 'When `true`, this method automatically creates new workspace accounts for the IDP group members. ', 'title': 'Auto Provision', 'type': 'boolean'}, 'team_ids': {'description': 'A comma separated list of encoded team (workspace) IDs. Each workspace *MUST* belong to the organization associated with the token. ', 'title': 'Team Ids', 'type': 'string'}, 'usergroup_id': {'description': 'An encoded usergroup (IDP Group) ID.', 'title': 'Usergroup Id', 'type': 'string'}}, title='AssociateDefaultWorkspacesWithIdpGroupRequest', type='object', required=['team_ids', 'usergroup_id']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='AssociateDefaultWorkspacesWithIdpGroupResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['admin.usergroups', 'admin'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Associate One Or More Default Workspaces With An Organization Wide Idp Group.'), ActionModel(name='SLACK_LIST_ORG_LEVEL_IDP_GROUP_CHANNELS', display_name='List org level idp group channels', parameters=ActionParametersModel(properties={'usergroup_id': {'description': 'ID of the IDP group to list default channels for.', 'title': 'Usergroup Id', 'type': 'string'}, 'team_id': {'default': None, 'description': 'ID of the the workspace.', 'title': 'Team Id', 'type': 'string'}, 'include_num_members': {'default': None, 'description': 'Flag to include or exclude the count of members per channel.', 'title': 'Include Num Members', 'type': 'boolean'}}, title='ListOrgLevelIdpGroupChannelsRequest', type='object', required=['usergroup_id']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='ListOrgLevelIdpGroupChannelsResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['admin.usergroups', 'admin'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='List The Channels Linked To An Org Level Idp Group (User Group).'), ActionModel(name='SLACK_LIST_ALL_SLACK_TEAM_CHANNELS_WITH_VARIOUS_FILTERS', display_name='List all slack team channels with various filters', parameters=ActionParametersModel(properties={'exclude_archived': {'default': None, 'description': 'Set to `true` to exclude archived channels from the list', 'title': 'Exclude Archived', 'type': 'boolean'}, 'types': {'default': None, 'description': 'Mix and match channel types by providing a comma-separated list of any combination of `public_channel`, `private_channel`, `mpim`, `im` ', 'title': 'Types', 'type': 'string'}, 'limit': {'default': None, 'description': 'The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the list hasn\"t been reached. Must be an integer no larger than 1000. ', 'title': 'Limit', 'type': 'integer'}, 'cursor': {'default': None, 'description': 'Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request\"s `response_metadata`. Default value fetches the first \"page\" of the collection. See [pagination](https://slack.dev) for more detail. ', 'title': 'Cursor', 'type': 'string'}}, title='ListAllSlackTeamChannelsWithVariousFiltersRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='ListAllSlackTeamChannelsWithVariousFiltersResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['conversations', 'important'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Lists All Channels In A Slack Team.'), ActionModel(name='SLACK_CREATE_A_SLACK_USER_GROUP', display_name='Create a slack user group', parameters=ActionParametersModel(properties={'description': {'default': None, 'description': 'A short description of the User Group.', 'title': 'Description', 'type': 'string'}, 'channels': {'default': None, 'description': 'A comma separated string of encoded channel IDs for which the User Group uses as a default. ', 'title': 'Channels', 'type': 'string'}, 'handle': {'default': None, 'description': 'A mention handle. Must be unique among channels, users and User Groups.', 'title': 'Handle', 'type': 'string'}, 'include_count': {'default': None, 'description': 'Include the number of users in each User Group.', 'title': 'Include Count', 'type': 'boolean'}, 'name': {'description': 'A name for the User Group. Must be unique among User Groups.', 'title': 'Name', 'type': 'string'}}, title='CreateASlackUserGroupRequest', type='object', required=['name']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='CreateASlackUserGroupResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['usergroups'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Create A User Group'), ActionModel(name='SLACK_DELETE_A_SCHEDULED_MESSAGE_IN_A_CHAT', display_name='Delete a scheduled message in a chat', parameters=ActionParametersModel(properties={'as_user': {'default': None, 'description': 'Pass true to delete the message as the authed user with `chat:write:user` scope. [Bot users](https://slack.dev) in this context are considered authed users. If unused or false, the message will be deleted with `chat:write:bot` scope. ', 'title': 'As User', 'type': 'boolean'}, 'channel': {'description': 'The channel the scheduled_message is posting to', 'title': 'Channel', 'type': 'string'}, 'scheduled_message_id': {'description': '`scheduled_message_id` returned from call to chat.scheduleMessage', 'title': 'Scheduled Message Id', 'type': 'string'}}, title='DeleteAScheduledMessageInAChatRequest', type='object', required=['channel', 'scheduled_message_id']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='DeleteAScheduledMessageInAChatResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['chat'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Deletes A Pending Scheduled Message From The Queue.'), ActionModel(name='SLACK_END_USER_SNOOZE_MODE_IMMEDIATELY', display_name='End user snooze mode immediately', parameters=ActionParametersModel(properties={}, title='EndUserSnoozeModeImmediatelyRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='EndUserSnoozeModeImmediatelyResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['dnd'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description=\"Ends The Current User's Snooze Mode Immediately.\"), ActionModel(name='SLACK_UPDATE_USER_GROUP_MEMBERS', display_name='Update user group members', parameters=ActionParametersModel(properties={'include_count': {'default': None, 'description': 'Include the number of users in the User Group.', 'title': 'Include Count', 'type': 'boolean'}, 'usergroup': {'description': 'The encoded ID of the User Group to update.', 'title': 'Usergroup', 'type': 'string'}, 'users': {'description': 'A comma separated string of encoded user IDs that represent the entire list of users for the User Group. ', 'title': 'Users', 'type': 'string'}}, title='UpdateUserGroupMembersRequest', type='object', required=['usergroup', 'users']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='UpdateUserGroupMembersResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['usergroups.users', 'usergroups'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Update The List Of Users For A User Group'), ActionModel(name='SLACK_LIST_DENIED_WORKSPACE_INVITE_REQUESTS', display_name='List denied workspace invite requests', parameters=ActionParametersModel(properties={'team_id': {'default': None, 'description': 'ID for the workspace where the invite requests were made.', 'title': 'Team Id', 'type': 'string'}, 'cursor': {'default': None, 'description': 'Value of the `next_cursor` field sent as part of the previous api response ', 'title': 'Cursor', 'type': 'string'}, 'limit': {'default': None, 'description': 'The number of results that will be returned by the API on each invocation. Must be between 1 - 1000 both inclusive ', 'title': 'Limit', 'type': 'integer'}}, title='ListDeniedWorkspaceInviteRequestsRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='ListDeniedWorkspaceInviteRequestsResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['admin.inviteRequests.denied', 'admin'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='List All Denied Workspace Invite Requests.'), ActionModel(name='SLACK_MARK_WORKFLOW_STEP_AS_COMPLETED', display_name='Mark workflow step as completed', parameters=ActionParametersModel(properties={'workflow_step_execute_id': {'description': 'Context identifier that maps to the correct workflow step execution.', 'title': 'Workflow Step Execute Id', 'type': 'string'}, 'outputs': {'default': None, 'description': 'Key-value object of outputs from your step. Keys of this object reflect the configured `key` properties of your [`outputs`](https://slack.dev) array from your `workflow_step` object. ', 'title': 'Outputs', 'type': 'string'}}, title='MarkWorkflowStepAsCompletedRequest', type='object', required=['workflow_step_execute_id']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='MarkWorkflowStepAsCompletedResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['workflows'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description=\"Indicate That An App's Step In A Workflow Completed Execution.\"), ActionModel(name='SLACK_ADD_A_REMOTE_FILE_FROM_A_SERVICE', display_name='Add a remote file from a service', parameters=ActionParametersModel(properties={'title': {'default': None, 'description': 'Title of the file being shared.', 'title': 'Title', 'type': 'string'}, 'external_id': {'default': None, 'description': 'Creator defined GUID for the file.', 'title': 'External Id', 'type': 'string'}, 'external_url': {'default': None, 'description': 'URL of the remote file.', 'title': 'External Url', 'type': 'string'}, 'filetype': {'default': None, 'description': 'type of file', 'title': 'Filetype', 'type': 'string'}, 'indexable_file_contents': {'default': None, 'description': 'A text file (txt, pdf, doc, etc.) containing textual search terms that are used to improve discovery of the remote file. ', 'title': 'Indexable File Contents', 'type': 'string'}, 'preview_image': {'default': None, 'description': 'Preview of the document via `multipart/form-data`.', 'title': 'Preview Image', 'type': 'string'}, 'token': {'default': None, 'description': 'Authentication token. Requires scope: `remote_files:write`', 'title': 'Token', 'type': 'string'}}, title='AddARemoteFileFromAServiceRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='AddARemoteFileFromAServiceResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['files.remote', 'files'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Adds A File From A Remote Service'), ActionModel(name='SLACK_SET_A_CONVERSATION_S_PURPOSE', display_name='Set a conversation s purpose', parameters=ActionParametersModel(properties={'channel': {'default': None, 'description': 'Conversation to set the purpose of', 'title': 'Channel', 'type': 'string'}, 'purpose': {'default': None, 'description': 'A new, specialer purpose', 'title': 'Purpose', 'type': 'string'}}, title='SetAConversationSPurposeRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='SetAConversationSPurposeResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['conversations'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Sets The Purpose For A Conversation.'), ActionModel(name='SLACK_FETCH_DND_STATUS_FOR_MULTIPLE_TEAM_MEMBERS', display_name='Fetch dnd status for multiple team members', parameters=ActionParametersModel(properties={'users': {'default': None, 'description': 'Comma-separated list of users to fetch Do Not Disturb status for', 'title': 'Users', 'type': 'string'}}, title='FetchDndStatusForMultipleTeamMembersRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='FetchDndStatusForMultipleTeamMembersResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['dnd'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Retrieves The Do Not Disturb Status For Up To 50 Users On A Team.'), ActionModel(name='SLACK_SENDS_A_MESSAGE_TO_A_SLACK_CHANNEL', display_name='Sends a message to a slack channel', parameters=ActionParametersModel(properties={'as_user': {'default': None, 'description': 'Pass true to post the message as the authed user, instead of as a bot. Defaults to false. See [authorship](https://slack.dev) below. ', 'title': 'As User', 'type': 'boolean'}, 'attachments': {'default': None, 'description': 'A JSON-based array of structured attachments, presented as a URL-encoded string. ', 'title': 'Attachments', 'type': 'string'}, 'blocks': {'default': None, 'description': 'A JSON-based array of structured blocks, presented as a URL-encoded string. ', 'title': 'Blocks', 'type': 'string'}, 'channel': {'description': 'Channel, private group, or IM channel to send message to. Can be an encoded ID, or a name. See [below](https://slack.dev) for more details. ', 'title': 'Channel', 'type': 'string'}, 'icon_emoji': {'default': None, 'description': 'Emoji to use as the icon for this message. Overrides `icon_url`. Must be used in conjunction with `as_user` set to `false`, otherwise ignored. See [authorship](https://slack.dev) below. ', 'title': 'Icon Emoji', 'type': 'string'}, 'icon_url': {'default': None, 'description': 'URL to an image to use as the icon for this message. Must be used in conjunction with `as_user` set to false, otherwise ignored. See [authorship](https://slack.dev) below. ', 'title': 'Icon Url', 'type': 'string'}, 'link_names': {'default': None, 'description': 'Find and link channel names and usernames.', 'title': 'Link Names', 'type': 'boolean'}, 'mrkdwn': {'default': None, 'description': 'Disable Slack markup parsing by setting to `false`. Enabled by default.', 'title': 'Mrkdwn', 'type': 'boolean'}, 'parse': {'default': None, 'description': 'Change how messages are treated. Defaults to `none`. See [below](https://slack.dev). ', 'title': 'Parse', 'type': 'string'}, 'reply_broadcast': {'default': None, 'description': 'Used in conjunction with `thread_ts` and indicates whether reply should be made visible to everyone in the channel or conversation. Defaults to `false`. ', 'title': 'Reply Broadcast', 'type': 'boolean'}, 'text': {'default': None, 'description': 'How this field works and whether it is required depends on other fields you use in your API call. [See below](https://slack.dev) for more detail. ', 'title': 'Text', 'type': 'string'}, 'thread_ts': {'default': None, 'description': 'Provide another message\"s `ts` value to make this message a reply. Avoid using a reply\"s `ts` value; use its parent instead. ', 'title': 'Thread Ts', 'type': 'string'}, 'unfurl_links': {'default': None, 'description': 'Pass true to enable unfurling of primarily text-based content.', 'title': 'Unfurl Links', 'type': 'boolean'}, 'unfurl_media': {'default': None, 'description': 'Pass false to disable unfurling of media content.', 'title': 'Unfurl Media', 'type': 'boolean'}, 'username': {'default': None, 'description': 'Set your bot\"s user name. Must be used in conjunction with `as_user` set to false, otherwise ignored. See [authorship](https://slack.dev) below. ', 'title': 'Username', 'type': 'string'}}, title='SendsAMessageToASlackChannelRequest', type='object', required=['channel']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='SendsAMessageToASlackChannelResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['chat', 'important'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Sends A Message To A Channel.'), ActionModel(name='SLACK_SCHEDULES_A_MESSAGE_TO_A_CHANNEL_AT_A_SPECIFIED_TIME', display_name='Schedules a message to a channel at a specified time', parameters=ActionParametersModel(properties={'as_user': {'default': None, 'description': 'Pass true to post the message as the authed user, instead of as a bot. Defaults to false. See [chat.postMessage](chat.postMessage#authorship). ', 'title': 'As User', 'type': 'boolean'}, 'attachments': {'default': None, 'description': 'A JSON-based array of structured attachments, presented as a URL-encoded string. ', 'title': 'Attachments', 'type': 'string'}, 'blocks': {'default': None, 'description': 'A JSON-based array of structured blocks, presented as a URL-encoded string. ', 'title': 'Blocks', 'type': 'string'}, 'channel': {'default': None, 'description': 'Channel, private group, or DM channel to send message to. Can be an encoded ID, or a name. See [below](https://slack.dev) for more details. ', 'title': 'Channel', 'type': 'string'}, 'link_names': {'default': None, 'description': 'Find and link channel names and usernames.', 'title': 'Link Names', 'type': 'boolean'}, 'parse': {'default': None, 'description': 'Change how messages are treated. Defaults to `none`. See [chat.postMessage](chat.postMessage#formatting). ', 'title': 'Parse', 'type': 'string'}, 'post_at': {'default': None, 'description': 'Unix EPOCH timestamp of time in future to send the message.', 'title': 'Post At', 'type': 'string'}, 'reply_broadcast': {'default': None, 'description': 'Used in conjunction with `thread_ts` and indicates whether reply should be made visible to everyone in the channel or conversation. Defaults to `false`. ', 'title': 'Reply Broadcast', 'type': 'boolean'}, 'text': {'default': None, 'description': 'How this field works and whether it is required depends on other fields you use in your API call. [See below](https://slack.dev) for more detail. ', 'title': 'Text', 'type': 'string'}, 'thread_ts': {'default': None, 'description': 'Provide another message\"s `ts` value to make this message a reply. Avoid using a reply\"s `ts` value; use its parent instead. ', 'title': 'Thread Ts', 'type': 'integer'}, 'unfurl_links': {'default': None, 'description': 'Pass true to enable unfurling of primarily text-based content.', 'title': 'Unfurl Links', 'type': 'boolean'}, 'unfurl_media': {'default': None, 'description': 'Pass false to disable unfurling of media content.', 'title': 'Unfurl Media', 'type': 'boolean'}}, title='SchedulesAMessageToAChannelAtASpecifiedTimeRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='SchedulesAMessageToAChannelAtASpecifiedTimeResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['chat', 'important'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Schedules A Message To Be Sent To A Channel.'), ActionModel(name='SLACK_END_A_CALL_WITH_DURATION_AND_ID', display_name='End a call with duration and id', parameters=ActionParametersModel(properties={'duration': {'default': None, 'description': 'Call duration in seconds', 'title': 'Duration', 'type': 'integer'}, 'id': {'description': '`id` returned when registering the call using the [`calls.add`](https://slack.dev) method. ', 'title': 'Id', 'type': 'string'}}, title='EndACallWithDurationAndIdRequest', type='object', required=['id']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='EndACallWithDurationAndIdResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['calls'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Ends A Call.'), ActionModel(name='SLACK_INITIATES_CHANNEL_BASED_CONVERSATIONS', display_name='Initiates channel based conversations', parameters=ActionParametersModel(properties={'is_private': {'default': None, 'description': 'Create a private channel instead of a public one', 'title': 'Is Private', 'type': 'boolean'}, 'name': {'default': None, 'description': 'Name of the public or private channel to create', 'title': 'Name', 'type': 'string'}}, title='InitiatesChannelBasedConversationsRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='InitiatesChannelBasedConversationsResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['conversations'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Initiates A Public Or Private Channel Based Conversation'), ActionModel(name='SLACK_ARCHIVE_A_SLACK_CONVERSATION', display_name='Archive a slack conversation', parameters=ActionParametersModel(properties={'channel': {'default': None, 'description': 'ID of conversation to archive', 'title': 'Channel', 'type': 'string'}}, title='ArchiveASlackConversationRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='ArchiveASlackConversationResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['conversations'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Archives A Conversation.'), ActionModel(name='SLACK_LIST_TEAM_CUSTOM_EMOJIS', display_name='List team custom emojis', parameters=ActionParametersModel(properties={}, title='ListTeamCustomEmojisRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='ListTeamCustomEmojisResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['emoji'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Lists Custom Emoji For A Team.'), ActionModel(name='SLACK_REVOKES_A_TOKEN_WITH_OPTIONAL_TEST_MODE', display_name='Revokes a token with optional test mode', parameters=ActionParametersModel(properties={'test': {'default': None, 'description': 'Setting this parameter to `1` triggers a _testing mode_ where the specified token will not actually be revoked. ', 'title': 'Test', 'type': 'boolean'}}, title='RevokesATokenWithOptionalTestModeRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='RevokesATokenWithOptionalTestModeResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['auth'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Revokes A Token.'), ActionModel(name='SLACK_LIST_APPROVED_APPS_FOR_ORG_OR_WORKSPACE', display_name='List approved apps for org or workspace', parameters=ActionParametersModel(properties={'limit': {'default': None, 'description': 'The maximum number of items to return. Must be between 1 - 1000 both inclusive. ', 'title': 'Limit', 'type': 'integer'}, 'cursor': {'default': None, 'description': 'Set `cursor` to `next_cursor` returned by the previous call to list items in the next page ', 'title': 'Cursor', 'type': 'string'}, 'team_id': {'default': None, 'description': 'Team Id', 'title': 'Team Id', 'type': 'string'}, 'enterprise_id': {'default': None, 'description': 'Enterprise Id', 'title': 'Enterprise Id', 'type': 'string'}}, title='ListApprovedAppsForOrgOrWorkspaceRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='ListApprovedAppsForOrgOrWorkspaceResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['admin.apps.approved', 'admin'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='List Approved Apps For An Org Or Workspace.'), ActionModel(name='SLACK_SET_WORKSPACE_CONNECTIONS_FOR_A_CHANNEL', display_name='Set workspace connections for a channel', parameters=ActionParametersModel(properties={'channel_id': {'description': 'The encoded `channel_id` to add or remove to workspaces.', 'title': 'Channel Id', 'type': 'string'}, 'org_channel': {'default': None, 'description': 'True if channel has to be converted to an org channel', 'title': 'Org Channel', 'type': 'boolean'}, 'target_team_ids': {'default': None, 'description': 'A comma-separated list of workspaces to which the channel should be shared. Not required if the channel is being shared org-wide. ', 'title': 'Target Team Ids', 'type': 'string'}, 'team_id': {'default': None, 'description': 'The workspace to which the channel belongs. Omit this argument if the channel is a cross-workspace shared channel. ', 'title': 'Team Id', 'type': 'string'}}, title='SetWorkspaceConnectionsForAChannelRequest', type='object', required=['channel_id']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='SetWorkspaceConnectionsForAChannelResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['admin.conversations', 'admin'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Set The Workspaces In An Enterprise Grid Org That Connect To A Public Or Private Channel.'), ActionModel(name='SLACK_SET_READ_CURSOR_IN_A_CONVERSATION', display_name='Set read cursor in a conversation', parameters=ActionParametersModel(properties={'channel': {'default': None, 'description': 'Channel or conversation to set the read cursor for.', 'title': 'Channel', 'type': 'string'}, 'ts': {'default': None, 'description': 'Unique identifier of message you want marked as most recently seen in this conversation. ', 'title': 'Ts', 'type': 'integer'}}, title='SetReadCursorInAConversationRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='SetReadCursorInAConversationResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['conversations'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Sets The Read Cursor In A Channel.'), ActionModel(name='SLACK_LIST_PENDING_WORKSPACE_INVITE_REQUESTS', display_name='List pending workspace invite requests', parameters=ActionParametersModel(properties={'team_id': {'default': None, 'description': 'ID for the workspace where the invite requests were made.', 'title': 'Team Id', 'type': 'string'}, 'cursor': {'default': None, 'description': 'Value of the `next_cursor` field sent as part of the previous API response ', 'title': 'Cursor', 'type': 'string'}, 'limit': {'default': None, 'description': 'The number of results that will be returned by the API on each invocation. Must be between 1 - 1000, both inclusive ', 'title': 'Limit', 'type': 'integer'}}, title='ListPendingWorkspaceInviteRequestsRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='ListPendingWorkspaceInviteRequestsResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['admin.inviteRequests', 'admin'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='List All Pending Workspace Invite Requests.'), ActionModel(name='SLACK_REGISTERS_A_NEW_CALL_WITH_PARTICIPANTS', display_name='Registers a new call with participants', parameters=ActionParametersModel(properties={'title': {'default': None, 'description': 'The name of the Call.', 'title': 'Title', 'type': 'string'}, 'created_by': {'default': None, 'description': 'The valid Slack user ID of the user who created this Call. When this method is called with a user token, the `created_by` field is optional and defaults to the authed user of the token. Otherwise, the field is required. ', 'title': 'Created By', 'type': 'string'}, 'date_start': {'default': None, 'description': 'Call start time in UTC UNIX timestamp format', 'title': 'Date Start', 'type': 'integer'}, 'desktop_app_join_url': {'default': None, 'description': 'When supplied, available Slack clients will attempt to directly launch the 3rd-party Call with this URL. ', 'title': 'Desktop App Join Url', 'type': 'string'}, 'external_display_id': {'default': None, 'description': 'An optional, human-readable ID supplied by the 3rd-party Call provider. If supplied, this ID will be displayed in the Call object. ', 'title': 'External Display Id', 'type': 'string'}, 'external_unique_id': {'description': 'An ID supplied by the 3rd-party Call provider. It must be unique across all Calls from that service. ', 'title': 'External Unique Id', 'type': 'string'}, 'join_url': {'description': 'The URL required for a client to join the Call.', 'title': 'Join Url', 'type': 'string'}, 'users': {'default': None, 'description': 'The list of users to register as participants in the Call. [Read more on how to specify users here](https://slack.dev). ', 'title': 'Users', 'type': 'string'}}, title='RegistersANewCallWithParticipantsRequest', type='object', required=['external_unique_id', 'join_url']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='RegistersANewCallWithParticipantsResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['calls'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Registers A New Call.'), ActionModel(name='SLACK_SEARCH_CHANNELS_IN_AN_ENTERPRISE_ORGANIZATION', display_name='Search channels in an enterprise organization', parameters=ActionParametersModel(properties={'team_ids': {'default': None, 'description': 'Comma separated string of team IDs, signifying the workspaces to search through. ', 'title': 'Team Ids', 'type': 'string'}, 'query': {'default': None, 'description': 'Name of the the channel to query by.', 'title': 'Query', 'type': 'string'}, 'limit': {'default': None, 'description': 'Maximum number of items to be returned. Must be between 1 - 20 both inclusive. Default is 10. ', 'title': 'Limit', 'type': 'integer'}, 'cursor': {'default': None, 'description': 'Set `cursor` to `next_cursor` returned by the previous call to list items in the next page. ', 'title': 'Cursor', 'type': 'string'}, 'search_channel_types': {'default': None, 'description': 'The type of channel to include or exclude in the search. For example `private` will search private channels, while `private_exclude` will exclude them. For a full list of types, check the [Types section](https://slack.dev). ', 'title': 'Search Channel Types', 'type': 'string'}, 'sort': {'default': None, 'description': 'Possible values are `relevant` (search ranking based on what we think is closest), `name` (alphabetical), `member_count` (number of users in the channel), and `created` (date channel was created). You can optionally pair this with the `sort_dir` arg to change how it is sorted  ', 'title': 'Sort', 'type': 'string'}, 'sort_dir': {'default': None, 'description': 'Sort direction. Possible values are `asc` for ascending order like (1, 2, 3) or (a, b, c), and `desc` for descending order like (3, 2, 1) or (c, b, a) ', 'title': 'Sort Dir', 'type': 'string'}}, title='SearchChannelsInAnEnterpriseOrganizationRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='SearchChannelsInAnEnterpriseOrganizationResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['admin.conversations', 'admin'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Search For Public Or Private Channels In An Enterprise Organization.'), ActionModel(name='SLACK_DELETE_USER_PROFILE_PHOTO', display_name='Delete user profile photo', parameters=ActionParametersModel(properties={'token': {'description': 'Authentication token. Requires scope: `users.profile:write`', 'title': 'Token', 'type': 'string'}}, title='DeleteUserProfilePhotoRequest', type='object', required=['token']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='DeleteUserProfilePhotoResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['users'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Delete The User Profile Photo'), ActionModel(name='SLACK_INVALIDATE_A_USER_SESSION_BY_ID', display_name='Invalidate a user session by id', parameters=ActionParametersModel(properties={'session_id': {'description': 'Session Id', 'title': 'Session Id', 'type': 'integer'}, 'team_id': {'description': 'ID of the team that the session belongs to', 'title': 'Team Id', 'type': 'string'}}, title='InvalidateAUserSessionByIdRequest', type='object', required=['session_id', 'team_id']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='InvalidateAUserSessionByIdResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['admin.users.session', 'admin'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Invalidate A Single Session For A User By Session'), ActionModel(name='SLACK_LISTS_USER_S_STARRED_ITEMS_WITH_PAGINATION', display_name='Lists user s starred items with pagination', parameters=ActionParametersModel(properties={'count': {'default': None, 'description': 'Count', 'title': 'Count', 'type': 'string'}, 'page': {'default': None, 'description': 'Page', 'title': 'Page', 'type': 'string'}, 'cursor': {'default': None, 'description': 'Parameter for pagination. Set `cursor` equal to the `next_cursor` attribute returned by the previous request\"s `response_metadata`. This parameter is optional, but pagination is mandatory: the default value simply fetches the first \"page\" of the collection. See [pagination](https://slack.dev) for more details. ', 'title': 'Cursor', 'type': 'string'}, 'limit': {'default': None, 'description': 'The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the list hasn\"t been reached. ', 'title': 'Limit', 'type': 'integer'}}, title='ListsUserSStarredItemsWithPaginationRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='ListsUserSStarredItemsWithPaginationResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['stars'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Lists Stars For A User.'), ActionModel(name='SLACK_JOIN_AN_EXISTING_CONVERSATION', display_name='Join an existing conversation', parameters=ActionParametersModel(properties={'channel': {'default': None, 'description': 'ID of conversation to join', 'title': 'Channel', 'type': 'string'}}, title='JoinAnExistingConversationRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='JoinAnExistingConversationResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['conversations'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Joins An Existing Conversation.'), ActionModel(name='SLACK_RETRIEVE_MESSAGE_PERMALINK_URL', display_name='Retrieve message permalink url', parameters=ActionParametersModel(properties={'channel': {'description': 'The ID of the conversation or channel containing the message', 'title': 'Channel', 'type': 'string'}, 'message_ts': {'description': 'A message\"s `ts` value, uniquely identifying it within a channel', 'title': 'Message Ts', 'type': 'string'}}, title='RetrieveMessagePermalinkUrlRequest', type='object', required=['channel', 'message_ts']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='RetrieveMessagePermalinkUrlResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['chat'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Retrieve A Permalink Url For A Specific Extant Message'), ActionModel(name='SLACK_RETRIEVE_CURRENT_USER_DND_STATUS', display_name='Retrieve current user dnd status', parameters=ActionParametersModel(properties={'user': {'default': None, 'description': 'User to fetch status for (defaults to current user)', 'title': 'User', 'type': 'string'}}, title='RetrieveCurrentUserDndStatusRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='RetrieveCurrentUserDndStatusResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['dnd'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description=\"Retrieves A User's Current Do Not Disturb Status.\"), ActionModel(name='SLACK_REMOVE_IDP_GROUP_FROM_PRIVATE_CHANNEL', display_name='Remove idp group from private channel', parameters=ActionParametersModel(properties={'channel_id': {'description': 'The channel to remove the linked group from.', 'title': 'Channel Id', 'type': 'string'}, 'group_id': {'description': 'The [IDP Group](https://slack.com/help/articles/115001435788-Connect-identity-provider-groups-to-your-Enterprise-Grid-org) ID to remove from the private channel. ', 'title': 'Group Id', 'type': 'string'}, 'team_id': {'description': 'The workspace where the channel exists. This argument is required for channels only tied to one workspace, and optional for channels that are shared across an organization. ', 'title': 'Team Id', 'type': 'string'}, 'token': {'description': 'Authentication token. Requires scope: `admin.conversations:write`', 'title': 'Token', 'type': 'string'}}, title='RemoveIdpGroupFromPrivateChannelRequest', type='object', required=['channel_id', 'group_id', 'team_id', 'token']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='RemoveIdpGroupFromPrivateChannelResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['admin.conversations.restrictAccess', 'admin'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Remove A Linked Idp Group Linked From A Private Channel'), ActionModel(name='SLACK_UPDATE_WORKFLOW_EXTENSION_STEP_CONFIGURATION', display_name='Update workflow extension step configuration', parameters=ActionParametersModel(properties={'workflow_step_edit_id': {'description': 'A context identifier provided with `view_submission` payloads used to call back to `workflows.updateStep`. ', 'title': 'Workflow Step Edit Id', 'type': 'string'}, 'inputs': {'default': None, 'description': 'A JSON key-value map of inputs required from a user during configuration. This is the data your app expects to receive when the workflow step starts. **Please note**: the embedded variable format is set and replaced by the workflow system. You cannot create custom variables that will be replaced at runtime. [Read more about variables in workflow steps here](https://slack.dev). ', 'title': 'Inputs', 'type': 'string'}, 'outputs': {'default': None, 'description': 'An JSON array of output objects used during step execution. This is the data your app agrees to provide when your workflow step was executed. ', 'title': 'Outputs', 'type': 'string'}, 'step_name': {'default': None, 'description': 'An optional field that can be used to override the step name that is shown in the Workflow Builder. ', 'title': 'Step Name', 'type': 'string'}, 'step_image_url': {'default': None, 'description': 'An optional field that can be used to override app image that is shown in the Workflow Builder. ', 'title': 'Step Image Url', 'type': 'string'}}, title='UpdateWorkflowExtensionStepConfigurationRequest', type='object', required=['workflow_step_edit_id']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='UpdateWorkflowExtensionStepConfigurationResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['workflows'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Update The Configuration For A Workflow Extension Step.'), ActionModel(name='SLACK_LIST_FILES_WITH_FILTERS_IN_SLACK', display_name='List files with filters in slack', parameters=ActionParametersModel(properties={'user': {'default': None, 'description': 'Filter files created by a single user.', 'title': 'User', 'type': 'string'}, 'channel': {'default': None, 'description': 'Filter files appearing in a specific channel, indicated by its ID.', 'title': 'Channel', 'type': 'string'}, 'ts_from': {'default': None, 'description': 'Filter files created after this timestamp (inclusive).', 'title': 'Ts From', 'type': 'integer'}, 'ts_to': {'default': None, 'description': 'Filter files created before this timestamp (inclusive).', 'title': 'Ts To', 'type': 'integer'}, 'types': {'default': None, 'description': 'Filter files by type ([see below](https://slack.dev)). You can pass multiple values in the types argument, like `types=spaces,snippets`.The default value is `all`, which does not filter the list. ', 'title': 'Types', 'type': 'string'}, 'count': {'default': None, 'description': 'Count', 'title': 'Count', 'type': 'string'}, 'page': {'default': None, 'description': 'Page', 'title': 'Page', 'type': 'string'}, 'show_files_hidden_by_limit': {'default': None, 'description': 'Show truncated file info for files hidden due to being too old, and the team who owns the file being over the file limit. ', 'title': 'Show Files Hidden By Limit', 'type': 'boolean'}}, title='ListFilesWithFiltersInSlackRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='ListFilesWithFiltersInSlackResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['files'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='List For A Team, In A Channel, Or From A User With Applied Filters.'), ActionModel(name='SLACK_ADD_A_STAR_TO_AN_ITEM', display_name='Add a star to an item', parameters=ActionParametersModel(properties={'channel': {'default': None, 'description': 'Channel to add star to, or channel where the message to add star to was posted (used with `timestamp`). ', 'title': 'Channel', 'type': 'string'}, 'file': {'default': None, 'description': 'File to add star to.', 'title': 'File', 'type': 'string'}, 'file_comment': {'default': None, 'description': 'File comment to add star to.', 'title': 'File Comment', 'type': 'string'}, 'timestamp': {'default': None, 'description': 'Timestamp of the message to add star to.', 'title': 'Timestamp', 'type': 'string'}}, title='AddAStarToAnItemRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='AddAStarToAnItemResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['stars'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Adds A Star To An Item.'), ActionModel(name='SLACK_OPEN_OR_RESUME_DIRECT_OR_MULTI_PERSON_MESSAGES', display_name='Open or resume direct or multi person messages', parameters=ActionParametersModel(properties={'channel': {'default': None, 'description': 'Resume a conversation by supplying an `im` or `mpim`\"s ID. Or provide the `users` field instead. ', 'title': 'Channel', 'type': 'string'}, 'return_im': {'default': None, 'description': 'Boolean, indicates you want the full IM channel definition in the response. ', 'title': 'Return Im', 'type': 'boolean'}, 'users': {'default': None, 'description': 'Comma separated lists of users. If only one user is included, this creates a 1:1 DM.  The ordering of the users is preserved whenever a multi-person direct message is returned. Supply a `channel` when not supplying `users`. ', 'title': 'Users', 'type': 'string'}}, title='OpenOrResumeDirectOrMultiPersonMessagesRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='OpenOrResumeDirectOrMultiPersonMessagesResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['conversations'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Opens Or Resumes A Direct Message Or Multi Person Direct Message.'), ActionModel(name='SLACK_LIST_APP_RESOURCE_GRANTS_ON_A_TEAM', display_name='List app resource grants on a team', parameters=ActionParametersModel(properties={'cursor': {'default': None, 'description': 'Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request\"s `response_metadata`. Default value fetches the first \"page\" of the collection. See [pagination](https://slack.dev) for more detail. ', 'title': 'Cursor', 'type': 'string'}, 'limit': {'default': None, 'description': 'The maximum number of items to return.', 'title': 'Limit', 'type': 'integer'}}, title='ListAppResourceGrantsOnATeamRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='ListAppResourceGrantsOnATeamResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['apps.permissions.resources', 'apps'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Returns List Of Resource Grants This App Has On A Team.'), ActionModel(name='SLACK_LIST_ALL_TEAMS_IN_AN_ENTERPRISE_ORGANIZATION', display_name='List all teams in an enterprise organization', parameters=ActionParametersModel(properties={'limit': {'default': None, 'description': 'The maximum number of items to return. Must be between 1 - 100 both inclusive. ', 'title': 'Limit', 'type': 'integer'}, 'cursor': {'default': None, 'description': 'Set `cursor` to `next_cursor` returned by the previous call to list items in the next page. ', 'title': 'Cursor', 'type': 'string'}}, title='ListAllTeamsInAnEnterpriseOrganizationRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='ListAllTeamsInAnEnterpriseOrganizationResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['admin.teams', 'admin'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='List All Teams On An Enterprise Organization'), ActionModel(name='SLACK_LIST_SCHEDULED_MESSAGES_IN_A_CHANNEL', display_name='List scheduled messages in a channel', parameters=ActionParametersModel(properties={'channel': {'default': None, 'description': 'The channel of the scheduled messages', 'title': 'Channel', 'type': 'string'}, 'latest': {'default': None, 'description': 'A UNIX timestamp of the latest value in the time range', 'title': 'Latest', 'type': 'integer'}, 'oldest': {'default': None, 'description': 'A UNIX timestamp of the oldest value in the time range', 'title': 'Oldest', 'type': 'integer'}, 'limit': {'default': None, 'description': 'Maximum number of original entries to return.', 'title': 'Limit', 'type': 'integer'}, 'cursor': {'default': None, 'description': 'For pagination purposes, this is the `cursor` value returned from a previous call to `chat.scheduledmessages.list` indicating where you want to start this call from. ', 'title': 'Cursor', 'type': 'string'}}, title='ListScheduledMessagesInAChannelRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='ListScheduledMessagesInAChannelResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['chat.scheduledMessages', 'chat'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Returns A List Of Scheduled Messages.'), ActionModel(name='SLACK_ARCHIVE_A_PUBLIC_OR_PRIVATE_CHANNEL', display_name='Archive a public or private channel', parameters=ActionParametersModel(properties={'channel_id': {'description': 'The channel to archive.', 'title': 'Channel Id', 'type': 'string'}}, title='ArchiveAPublicOrPrivateChannelRequest', type='object', required=['channel_id']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='ArchiveAPublicOrPrivateChannelResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['admin.conversations', 'admin'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Archive A Public Or Private Channel.'), ActionModel(name='SLACK_RENAME_A_SLACK_CHANNEL', display_name='Rename a slack channel', parameters=ActionParametersModel(properties={'channel_id': {'description': 'The channel to rename.', 'title': 'Channel Id', 'type': 'string'}, 'name': {'description': 'Name', 'title': 'Name', 'type': 'string'}}, title='RenameASlackChannelRequest', type='object', required=['channel_id', 'name']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='RenameASlackChannelResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['admin.conversations', 'admin'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Rename A Public Or Private Channel.'), ActionModel(name='SLACK_LEAVE_A_CONVERSATION', display_name='Leave a conversation', parameters=ActionParametersModel(properties={'channel': {'default': None, 'description': 'Conversation to leave', 'title': 'Channel', 'type': 'string'}}, title='LeaveAConversationRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='LeaveAConversationResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['conversations'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Leaves A Conversation.'), ActionModel(name='SLACK_UPDATES_AN_EXISTING_REMOTE_FILE', display_name='Updates an existing remote file', parameters=ActionParametersModel(properties={'title': {'default': None, 'description': 'Title of the file being shared.', 'title': 'Title', 'type': 'string'}, 'external_id': {'default': None, 'description': 'Creator defined GUID for the file.', 'title': 'External Id', 'type': 'string'}, 'external_url': {'default': None, 'description': 'URL of the remote file.', 'title': 'External Url', 'type': 'string'}, 'file': {'default': None, 'description': 'Specify a file by providing its ID.', 'title': 'File', 'type': 'string'}, 'filetype': {'default': None, 'description': 'type of file', 'title': 'Filetype', 'type': 'string'}, 'indexable_file_contents': {'default': None, 'description': 'File containing contents that can be used to improve searchability for the remote file. ', 'title': 'Indexable File Contents', 'type': 'string'}, 'preview_image': {'default': None, 'description': 'Preview of the document via `multipart/form-data`.', 'title': 'Preview Image', 'type': 'string'}, 'token': {'default': None, 'description': 'Authentication token. Requires scope: `remote_files:write`', 'title': 'Token', 'type': 'string'}}, title='UpdatesAnExistingRemoteFileRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='UpdatesAnExistingRemoteFileResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['files.remote', 'files'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Updates An Existing Remote File.'), ActionModel(name='SLACK_SET_WORKSPACE_ICON', display_name='Set workspace icon', parameters=ActionParametersModel(properties={'image_url': {'description': 'Image URL for the icon', 'title': 'Image Url', 'type': 'string'}, 'team_id': {'description': 'ID for the workspace to set the icon for.', 'title': 'Team Id', 'type': 'string'}, 'token': {'description': 'Authentication token. Requires scope: `admin.teams:write`', 'title': 'Token', 'type': 'string'}}, title='SetWorkspaceIconRequest', type='object', required=['image_url', 'team_id', 'token']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='SetWorkspaceIconResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['admin.teams.settings', 'admin'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Sets The Icon Of A Workspace.'), ActionModel(name='SLACK_SET_SLACK_USER_PROFILE_INFORMATION', display_name='Set slack user profile information', parameters=ActionParametersModel(properties={'name': {'default': None, 'description': 'Name of a single key to set. Usable only if `profile` is not passed.', 'title': 'Name', 'type': 'string'}, 'profile': {'default': None, 'description': 'Collection of key:value pairs presented as a URL-encoded JSON hash. At most 50 fields may be set. Each field name is limited to 255 characters. ', 'title': 'Profile', 'type': 'string'}, 'user': {'default': None, 'description': 'ID of user to change. This argument may only be specified by team admins on paid teams. ', 'title': 'User', 'type': 'string'}, 'value': {'default': None, 'description': 'Value to set a single key to. Usable only if `profile` is not passed.', 'title': 'Value', 'type': 'string'}}, title='SetSlackUserProfileInformationRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='SetSlackUserProfileInformationResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['users.profile', 'users'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Set The Profile Information For A User.'), ActionModel(name='SLACK_INVITE_USER_TO_CHANNEL', display_name='Invite user to channel', parameters=ActionParametersModel(properties={'channel_id': {'description': 'The channel that the users will be invited to.', 'title': 'Channel Id', 'type': 'string'}, 'user_ids': {'description': 'The users to invite.', 'title': 'User Ids', 'type': 'string'}}, title='InviteUserToChannelRequest', type='object', required=['channel_id', 'user_ids']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='InviteUserToChannelResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['admin.conversations', 'admin'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Invite A User To A Public Or Private Channel.'), ActionModel(name='SLACK_REMOVE_A_USER_FROM_A_CONVERSATION', display_name='Remove a user from a conversation', parameters=ActionParametersModel(properties={'channel': {'default': None, 'description': 'ID of conversation to remove user from.', 'title': 'Channel', 'type': 'string'}, 'user': {'default': None, 'description': 'User ID to be removed.', 'title': 'User', 'type': 'string'}}, title='RemoveAUserFromAConversationRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='RemoveAUserFromAConversationResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['conversations'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Removes A User From A Conversation.'), ActionModel(name='SLACK_INVITE_USERS_TO_A_SLACK_CHANNEL', display_name='Invite users to a slack channel', parameters=ActionParametersModel(properties={'channel': {'default': None, 'description': 'The ID of the public or private channel to invite user(s) to.', 'title': 'Channel', 'type': 'string'}, 'users': {'default': None, 'description': 'A comma separated list of user IDs. Up to 1000 users may be listed.', 'title': 'Users', 'type': 'string'}}, title='InviteUsersToASlackChannelRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='InviteUsersToASlackChannelResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['conversations'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Invites Users To A Channel.'), ActionModel(name='SLACK_MARK_A_USER_AS_ACTIVE_DEPRECATED', display_name='Mark a user as active  deprecated', parameters=ActionParametersModel(properties={}, title='MarkAUserAsActiveDeprecatedRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='MarkAUserAsActiveDeprecatedResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['users'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Marked A User As Active. Deprecated And Non Functional.'), ActionModel(name='SLACK_LIST_APPROVED_WORKSPACE_INVITE_REQUESTS', display_name='List approved workspace invite requests', parameters=ActionParametersModel(properties={'team_id': {'default': None, 'description': 'ID for the workspace where the invite requests were made.', 'title': 'Team Id', 'type': 'string'}, 'cursor': {'default': None, 'description': 'Value of the `next_cursor` field sent as part of the previous API response ', 'title': 'Cursor', 'type': 'string'}, 'limit': {'default': None, 'description': 'The number of results that will be returned by the API on each invocation. Must be between 1 - 1000, both inclusive ', 'title': 'Limit', 'type': 'integer'}}, title='ListApprovedWorkspaceInviteRequestsRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='ListApprovedWorkspaceInviteRequestsResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['admin.inviteRequests.approved', 'admin'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='List All Approved Workspace Invite Requests.'), ActionModel(name='SLACK_OPEN_A_VIEW_FOR_A_SLACK_USER', display_name='Open a view for a slack user', parameters=ActionParametersModel(properties={'trigger_id': {'description': 'Exchange a trigger to post to the user.', 'title': 'Trigger Id', 'type': 'string'}, 'view': {'description': 'A [view payload](https://slack.dev). This must be a JSON-encoded string.', 'title': 'View', 'type': 'string'}}, title='OpenAViewForASlackUserRequest', type='object', required=['trigger_id', 'view']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='OpenAViewForASlackUserResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['views'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Open A View For A User.'), ActionModel(name='SLACK_PINS_AN_ITEM_TO_A_CHANNEL', display_name='Pins an item to a channel', parameters=ActionParametersModel(properties={'channel': {'description': 'Channel to pin the item in.', 'title': 'Channel', 'type': 'string'}, 'timestamp': {'default': None, 'description': 'Timestamp of the message to pin.', 'title': 'Timestamp', 'type': 'string'}}, title='PinsAnItemToAChannelRequest', type='object', required=['channel']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='PinsAnItemToAChannelResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['pins'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Pins An Item To A Channel.'), ActionModel(name='SLACK_REMOVE_CHANNELS_FROM_IDP_GROUP', display_name='Remove channels from idp group', parameters=ActionParametersModel(properties={'channel_ids': {'description': 'Comma-separated string of channel IDs', 'title': 'Channel Ids', 'type': 'string'}, 'usergroup_id': {'description': 'ID of the IDP Group', 'title': 'Usergroup Id', 'type': 'string'}}, title='RemoveChannelsFromIdpGroupRequest', type='object', required=['channel_ids', 'usergroup_id']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='RemoveChannelsFromIdpGroupResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['admin.usergroups', 'admin'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Remove One Or More Default Channels From An Org Level Idp Group (User Group).'), ActionModel(name='SLACK_DISABLE_AN_EXISTING_SLACK_USER_GROUP', display_name='Disable an existing slack user group', parameters=ActionParametersModel(properties={'include_count': {'default': None, 'description': 'Include the number of users in the User Group.', 'title': 'Include Count', 'type': 'boolean'}, 'usergroup': {'description': 'The encoded ID of the User Group to disable.', 'title': 'Usergroup', 'type': 'string'}}, title='DisableAnExistingSlackUserGroupRequest', type='object', required=['usergroup']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='DisableAnExistingSlackUserGroupResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['usergroups'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Disable An Existing User Group'), ActionModel(name='SLACK_CREATE_CHANNEL_BASED_CONVERSATION', display_name='Create channel based conversation', parameters=ActionParametersModel(properties={'description': {'default': None, 'description': 'Description of the public or private channel to create.', 'title': 'Description', 'type': 'string'}, 'is_private': {'description': 'When `true`, creates a private channel instead of a public channel', 'title': 'Is Private', 'type': 'boolean'}, 'name': {'description': 'Name of the public or private channel to create.', 'title': 'Name', 'type': 'string'}, 'org_wide': {'default': None, 'description': 'When `true`, the channel will be available org-wide. Note: if the channel is not `org_wide=true`, you must specify a `team_id` for this channel ', 'title': 'Org Wide', 'type': 'boolean'}, 'team_id': {'default': None, 'description': 'The workspace to create the channel in. Note: this argument is required unless you set `org_wide=true`. ', 'title': 'Team Id', 'type': 'string'}}, title='CreateChannelBasedConversationRequest', type='object', required=['is_private', 'name']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='CreateChannelBasedConversationResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['admin.conversations', 'admin'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Create A Public Or Private Channel Based Conversation.'), ActionModel(name='SLACK_RETRIEVE_CONVERSATION_INFORMATION', display_name='Retrieve conversation information', parameters=ActionParametersModel(properties={'channel': {'default': None, 'description': 'Conversation ID to learn more about', 'title': 'Channel', 'type': 'string'}, 'include_locale': {'default': None, 'description': 'Set this to `true` to receive the locale for this conversation. Defaults to `false` ', 'title': 'Include Locale', 'type': 'boolean'}, 'include_num_members': {'default': None, 'description': 'Set to `true` to include the member count for the specified conversation. Defaults to `false` ', 'title': 'Include Num Members', 'type': 'boolean'}}, title='RetrieveConversationInformationRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='RetrieveConversationInformationResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['conversations'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Retrieve Information About A Conversation.'), ActionModel(name='SLACK_REMINDERS_ADD', display_name='Create a reminder', parameters=ActionParametersModel(properties={'text': {'description': 'The content of the reminder', 'title': 'Text', 'type': 'string'}, 'time': {'description': 'When this reminder should happen: the Unix timestamp (up to five years from now), the number of seconds until the reminder (if within 24 hours), or a natural language description (Ex. \"in 15 minutes,\" or \"every Thursday\") ', 'title': 'Time', 'type': 'string'}, 'user': {'default': None, 'description': 'The user who will receive the reminder. If no user is specified, the reminder will go to user who created it. ', 'title': 'User', 'type': 'string'}}, title='CreateAReminderRequest', type='object', required=['text', 'time']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='CreateAReminderResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=[], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Creates A Reminder.<<DEPRECATED use create_a_reminder>>'), ActionModel(name='SLACK_CONVERT_PUBLIC_CHANNEL_TO_PRIVATE', display_name='Convert public channel to private', parameters=ActionParametersModel(properties={'channel_id': {'description': 'The channel to convert to private.', 'title': 'Channel Id', 'type': 'string'}}, title='ConvertPublicChannelToPrivateRequest', type='object', required=['channel_id']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='ConvertPublicChannelToPrivateResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['admin.conversations', 'admin'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Convert A Public Channel To A Private Channel.'), ActionModel(name='SLACK_USERS_LOOKUP_BY_EMAIL', display_name='Find user by email address', parameters=ActionParametersModel(properties={'email': {'description': 'An email address belonging to a user in the workspace', 'title': 'Email', 'type': 'string'}}, title='FindUserByEmailAddressRequest', type='object', required=['email']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='FindUserByEmailAddressResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=[], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Find A User With An Email Address.<<DEPRECATED use find_user_by_email_address>>'), ActionModel(name='SLACK_LIST_ACCESSIBLE_CONVERSATIONS_FOR_A_USER', display_name='List accessible conversations for a user', parameters=ActionParametersModel(properties={'user': {'default': None, 'description': 'Browse conversations by a specific user ID\"s membership. Non-public channels are restricted to those where the calling user shares membership. ', 'title': 'User', 'type': 'string'}, 'types': {'default': None, 'description': 'Mix and match channel types by providing a comma-separated list of any combination of `public_channel`, `private_channel`, `mpim`, `im` ', 'title': 'Types', 'type': 'string'}, 'exclude_archived': {'default': None, 'description': 'Set to `true` to exclude archived channels from the list', 'title': 'Exclude Archived', 'type': 'boolean'}, 'limit': {'default': None, 'description': 'The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the list hasn\"t been reached. Must be an integer no larger than 1000. ', 'title': 'Limit', 'type': 'integer'}, 'cursor': {'default': None, 'description': 'Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request\"s `response_metadata`. Default value fetches the first \"page\" of the collection. See [pagination](https://slack.dev) for more detail. ', 'title': 'Cursor', 'type': 'string'}}, title='ListAccessibleConversationsForAUserRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='ListAccessibleConversationsForAUserResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['users'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='List Conversations The Calling User May Access.'), ActionModel(name='SLACK_FETCH_CURRENT_TEAM_INFO_WITH_OPTIONAL_TEAM_SCOPE', display_name='Fetch current team info with optional team scope', parameters=ActionParametersModel(properties={'team': {'default': None, 'description': 'Team to get info on, if omitted, will return information about the current team. Will only return team that the authenticated token is allowed to see through external shared channels ', 'title': 'Team', 'type': 'string'}}, title='FetchCurrentTeamInfoWithOptionalTeamScopeRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='FetchCurrentTeamInfoWithOptionalTeamScopeResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['team'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Gets Information About The Current Team.'), ActionModel(name='SLACK_SET_WORKSPACE_DESCRIPTION', display_name='Set workspace description', parameters=ActionParametersModel(properties={'description': {'description': 'The new description for the workspace.', 'title': 'Description', 'type': 'string'}, 'team_id': {'description': 'ID for the workspace to set the description for.', 'title': 'Team Id', 'type': 'string'}}, title='SetWorkspaceDescriptionRequest', type='object', required=['description', 'team_id']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='SetWorkspaceDescriptionResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['admin.teams.settings', 'admin'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Set The Description Of A Given Workspace.'), ActionModel(name='SLACK_ADD_REACTION_TO_AN_ITEM', display_name='Add reaction to an item', parameters=ActionParametersModel(properties={'channel': {'description': 'Channel where the message to add reaction to was posted.', 'title': 'Channel', 'type': 'string'}, 'name': {'description': 'Reaction (emoji) name.', 'title': 'Name', 'type': 'string'}, 'timestamp': {'description': 'Timestamp of the message to add reaction to.', 'title': 'Timestamp', 'type': 'string'}}, title='AddReactionToAnItemRequest', type='object', required=['channel', 'name', 'timestamp']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='AddReactionToAnItemResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['reactions', 'important'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Adds A Reaction To An Item.'), ActionModel(name='SLACK_EXCHANGE_OAUTH_VERIFIER_FOR_ACCESS_TOKEN', display_name='Exchange oauth verifier for access token', parameters=ActionParametersModel(properties={'client_id': {'default': None, 'description': 'Issued when you created your application.', 'title': 'Client Id', 'type': 'string'}, 'client_secret': {'default': None, 'description': 'Issued when you created your application.', 'title': 'Client Secret', 'type': 'string'}, 'code': {'description': 'The `code` param returned via the OAuth callback.', 'title': 'Code', 'type': 'string'}, 'redirect_uri': {'default': None, 'description': 'This must match the originally submitted URI (if one was sent).', 'title': 'Redirect Uri', 'type': 'string'}}, title='ExchangeOauthVerifierForAccessTokenRequest', type='object', required=['code']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='ExchangeOauthVerifierForAccessTokenResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['oauth.v2', 'oauth'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Exchanges A Temporary O Auth Verifier Code For An Access Token.'), ActionModel(name='SLACK_REGISTERS_NEW_CALL_PARTICIPANTS', display_name='Registers new call participants', parameters=ActionParametersModel(properties={'id': {'description': '`id` returned by the [`calls.add`](https://slack.dev) method.', 'title': 'Id', 'type': 'string'}, 'users': {'description': 'The list of users to add as participants in the Call. [Read more on how to specify users here](https://slack.dev). ', 'title': 'Users', 'type': 'string'}}, title='RegistersNewCallParticipantsRequest', type='object', required=['id', 'users']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='RegistersNewCallParticipantsResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['calls.participants', 'calls'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Registers New Participants Added To A Call.'), ActionModel(name='SLACK_CUSTOMIZE_URL_UNFURLING_IN_MESSAGES', display_name='Customize url unfurling in messages', parameters=ActionParametersModel(properties={'channel': {'description': 'Channel ID of the message', 'title': 'Channel', 'type': 'string'}, 'ts': {'description': 'Timestamp of the message to add unfurl behavior to.', 'title': 'Ts', 'type': 'string'}, 'unfurls': {'default': None, 'description': 'URL-encoded JSON map with keys set to URLs featured in the the message, pointing to their unfurl blocks or message attachments. ', 'title': 'Unfurls', 'type': 'string'}, 'user_auth_message': {'default': None, 'description': 'Provide a simply-formatted string to send as an ephemeral message to the user as invitation to authenticate further and enable full unfurling behavior ', 'title': 'User Auth Message', 'type': 'string'}, 'user_auth_required': {'default': None, 'description': 'Set to `true` or `1` to indicate the user must install your Slack app to trigger unfurls for this domain ', 'title': 'User Auth Required', 'type': 'boolean'}, 'user_auth_url': {'default': None, 'description': 'Send users to this custom URL where they will complete authentication in your app to fully trigger unfurling. Value should be properly URL-encoded. ', 'title': 'User Auth Url', 'type': 'string'}}, title='CustomizeUrlUnfurlingInMessagesRequest', type='object', required=['channel', 'ts']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='CustomizeUrlUnfurlingInMessagesResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['chat'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Provide Custom Unfurl Behavior For User Posted Ur Ls'), ActionModel(name='SLACK_PUBLISH_STATIC_VIEW_FOR_USER', display_name='Publish static view for user', parameters=ActionParametersModel(properties={'user_id': {'description': '`id` of the user you want publish a view to.', 'title': 'User Id', 'type': 'string'}, 'view': {'description': 'A [view payload](https://slack.dev). This must be a JSON-encoded string.', 'title': 'View', 'type': 'string'}, 'hash': {'default': None, 'description': 'A string that represents view state to protect against possible race conditions. ', 'title': 'Hash', 'type': 'string'}}, title='PublishStaticViewForUserRequest', type='object', required=['user_id', 'view']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='PublishStaticViewForUserResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['views'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Publish A Static View For A User.'), ActionModel(name='SLACK_MAP_USER_IDS_FOR_ENTERPRISE_GRID_WORKSPACES', display_name='Map user ids for enterprise grid workspaces', parameters=ActionParametersModel(properties={'users': {'description': 'A comma-separated list of user ids, up to 400 per request', 'title': 'Users', 'type': 'string'}, 'team_id': {'default': None, 'description': 'Specify team_id starts with `T` in case of Org Token', 'title': 'Team Id', 'type': 'string'}, 'to_old': {'default': None, 'description': 'Specify `true` to convert `W` global user IDs to workspace-specific `U` IDs. Defaults to `false`. ', 'title': 'To Old', 'type': 'boolean'}}, title='MapUserIdsForEnterpriseGridWorkspacesRequest', type='object', required=['users']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='MapUserIdsForEnterpriseGridWorkspacesResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['migration'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='For Enterprise Grid Workspaces, Map Local User I Ds To Global User I Ds'), ActionModel(name='SLACK_SHARE_A_ME_MESSAGE_IN_A_CHANNEL', display_name='Share a me message in a channel', parameters=ActionParametersModel(properties={'channel': {'default': None, 'description': 'Channel to send message to. Can be a public channel, private group or IM channel. Can be an encoded ID, or a name. ', 'title': 'Channel', 'type': 'string'}, 'text': {'default': None, 'description': 'Text of the message to send.', 'title': 'Text', 'type': 'string'}}, title='ShareAMeMessageInAChannelRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='ShareAMeMessageInAChannelResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['chat'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Share A Me Message Into A Channel.'), ActionModel(name='SLACK_APPS_PERMISSIONS_SCOPES_GET_LIST', display_name='List app permissions scopes on a team', parameters=ActionParametersModel(properties={}, title='ListAppPermissionsScopesOnATeamRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='ListAppPermissionsScopesOnATeamResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=[], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Returns List Of Scopes This App Has On A Team.<<DEPRECATED use list_app_permissions_scopes_on_a_team>>'), ActionModel(name='SLACK_CREATE_AN_ENTERPRISE_TEAM', display_name='Create an enterprise team', parameters=ActionParametersModel(properties={'team_description': {'default': None, 'description': 'Description for the team.', 'title': 'Team Description', 'type': 'string'}, 'team_discoverability': {'default': None, 'description': 'Who can join the team. A team\"s discoverability can be `open`, `closed`, `invite_only`, or `unlisted`. ', 'title': 'Team Discoverability', 'type': 'string'}, 'team_domain': {'description': 'Team domain (for example, slacksoftballteam).', 'title': 'Team Domain', 'type': 'string'}, 'team_name': {'description': 'Team name (for example, Slack Softball Team).', 'title': 'Team Name', 'type': 'string'}}, title='CreateAnEnterpriseTeamRequest', type='object', required=['team_domain', 'team_name']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='CreateAnEnterpriseTeamResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['admin.teams', 'admin'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Create An Enterprise Team.'), ActionModel(name='SLACK_APPS_PERMISSIONS_LIST_PERMISSIONS', display_name='List app permissions on a team', parameters=ActionParametersModel(properties={}, title='ListAppPermissionsOnATeamRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='ListAppPermissionsOnATeamResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=[], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Returns List Of Permissions This App Has On A Team.<<DEPRECATED use list_app_permissions_on_a_team>>'), ActionModel(name='SLACK_GET_CHANNEL_S_CONNECTED_WORKSPACES_IN_ENTERPRISE', display_name='Get channel s connected workspaces in enterprise', parameters=ActionParametersModel(properties={'channel_id': {'description': 'The channel to determine connected workspaces within the organization for. ', 'title': 'Channel Id', 'type': 'string'}, 'cursor': {'default': None, 'description': 'Set `cursor` to `next_cursor` returned by the previous call to list items in the next page ', 'title': 'Cursor', 'type': 'string'}, 'limit': {'default': None, 'description': 'The maximum number of items to return. Must be between 1 - 1000 both inclusive. ', 'title': 'Limit', 'type': 'integer'}}, title='GetChannelSConnectedWorkspacesInEnterpriseRequest', type='object', required=['channel_id']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='GetChannelSConnectedWorkspacesInEnterpriseResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['admin.conversations', 'admin'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Get All The Workspaces A Given Public Or Private Channel Is Connected To Within This Enterprise Org.'), ActionModel(name='SLACK_INVITE_USER_TO_WORKSPACE_WITH_OPTIONAL_CHANNEL_INVITES', display_name='Invite user to workspace with optional channel invites', parameters=ActionParametersModel(properties={'channel_ids': {'description': 'A comma-separated list of `channel_id`s for this user to join. At least one channel is required. ', 'title': 'Channel Ids', 'type': 'string'}, 'custom_message': {'default': None, 'description': 'An optional message to send to the user in the invite email.', 'title': 'Custom Message', 'type': 'string'}, 'email': {'description': 'The email address of the person to invite.', 'title': 'Email', 'type': 'string'}, 'guest_expiration_ts': {'default': None, 'description': 'Timestamp when guest account should be disabled. Only include this timestamp if you are inviting a guest user and you want their account to expire on a certain date. ', 'title': 'Guest Expiration Ts', 'type': 'string'}, 'is_restricted': {'default': None, 'description': 'Is this user a multi-channel guest user? (default: false)', 'title': 'Is Restricted', 'type': 'boolean'}, 'is_ultra_restricted': {'default': None, 'description': 'Is this user a single channel guest user? (default: false)', 'title': 'Is Ultra Restricted', 'type': 'boolean'}, 'real_name': {'default': None, 'description': 'Full name of the user.', 'title': 'Real Name', 'type': 'string'}, 'resend': {'default': None, 'description': 'Allow this invite to be resent in the future if a user has not signed up yet. (default: false) ', 'title': 'Resend', 'type': 'boolean'}, 'team_id': {'description': 'The ID (`T1234`) of the workspace.', 'title': 'Team Id', 'type': 'string'}}, title='InviteUserToWorkspaceWithOptionalChannelInvitesRequest', type='object', required=['channel_ids', 'email', 'team_id']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='InviteUserToWorkspaceWithOptionalChannelInvitesResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['admin.users', 'admin'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Invite A User To A Workspace.'), ActionModel(name='SLACK_USERS_PROFILE_GET_PROFILE_INFO', display_name='Retrieve user profile information', parameters=ActionParametersModel(properties={'include_labels': {'default': None, 'description': 'Include labels for each ID in custom profile fields', 'title': 'Include Labels', 'type': 'boolean'}, 'user': {'default': None, 'description': 'User to retrieve profile info for', 'title': 'User', 'type': 'string'}}, title='RetrieveUserProfileInformationRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='RetrieveUserProfileInformationResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=[], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description=\"Retrieves A User's Profile Information.<<DEPRECATED use retrieve_user_profile_information>>\"), ActionModel(name='SLACK_SET_USER_TO_REGULAR_STATUS', display_name='Set user to regular status', parameters=ActionParametersModel(properties={'team_id': {'description': 'The ID (`T1234`) of the workspace.', 'title': 'Team Id', 'type': 'string'}, 'user_id': {'description': 'The ID of the user to designate as a regular user.', 'title': 'User Id', 'type': 'string'}}, title='SetUserToRegularStatusRequest', type='object', required=['team_id', 'user_id']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='SetUserToRegularStatusResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['admin.users', 'admin'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Set An Existing Guest User, Admin User, Or Owner To Be A Regular User.'), ActionModel(name='SLACK_RETRIEVE_A_USER_S_IDENTITY_DETAILS', display_name='Retrieve a user s identity details', parameters=ActionParametersModel(properties={}, title='RetrieveAUserSIdentityDetailsRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='RetrieveAUserSIdentityDetailsResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['users'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description=\"Get A User's Identity.\"), ActionModel(name='SLACK_GET_CURRENT_TEAM_INTEGRATION_LOGS', display_name='Get current team integration logs', parameters=ActionParametersModel(properties={'app_id': {'default': None, 'description': 'Filter logs to this Slack app. Defaults to all logs.', 'title': 'App Id', 'type': 'string'}, 'change_type': {'default': None, 'description': 'Filter logs with this change type. Defaults to all logs.', 'title': 'Change Type', 'type': 'string'}, 'count': {'default': None, 'description': 'Count', 'title': 'Count', 'type': 'string'}, 'page': {'default': None, 'description': 'Page', 'title': 'Page', 'type': 'string'}, 'service_id': {'default': None, 'description': 'Filter logs to this service. Defaults to all logs.', 'title': 'Service Id', 'type': 'string'}, 'user': {'default': None, 'description': 'Filter logs generated by this user\u2019s actions. Defaults to all logs.', 'title': 'User', 'type': 'string'}}, title='GetCurrentTeamIntegrationLogsRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='GetCurrentTeamIntegrationLogsResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['team'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Gets The Integration Logs For The Current Team.'), ActionModel(name='SLACK_LIST_ALL_USERS_IN_A_USER_GROUP', display_name='List all users in a user group', parameters=ActionParametersModel(properties={'include_disabled': {'default': None, 'description': 'Allow results that involve disabled User Groups.', 'title': 'Include Disabled', 'type': 'boolean'}, 'usergroup': {'description': 'The encoded ID of the User Group to update.', 'title': 'Usergroup', 'type': 'string'}}, title='ListAllUsersInAUserGroupRequest', type='object', required=['usergroup']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='ListAllUsersInAUserGroupResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['usergroups.users', 'usergroups'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='List All Users In A User Group'), ActionModel(name='SLACK_DENY_WORKSPACE_INVITE_REQUEST', display_name='Deny workspace invite request', parameters=ActionParametersModel(properties={'invite_request_id': {'description': 'ID of the request to invite.', 'title': 'Invite Request Id', 'type': 'string'}, 'team_id': {'default': None, 'description': 'ID for the workspace where the invite request was made.', 'title': 'Team Id', 'type': 'string'}}, title='DenyWorkspaceInviteRequestRequest', type='object', required=['invite_request_id']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='DenyWorkspaceInviteRequestResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['admin.inviteRequests', 'admin'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Deny A Workspace Invite Request.'), ActionModel(name='SLACK_ENABLE_PUBLIC_SHARING_OF_A_FILE', display_name='Enable public sharing of a file', parameters=ActionParametersModel(properties={'file': {'default': None, 'description': 'File to share', 'title': 'File', 'type': 'string'}}, title='EnablePublicSharingOfAFileRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='EnablePublicSharingOfAFileResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['files'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Enables A File For Public/External Sharing.'), ActionModel(name='SLACK_WIPE_USER_SESSIONS_ACROSS_DEVICES', display_name='Wipe user sessions across devices', parameters=ActionParametersModel(properties={'mobile_only': {'default': None, 'description': 'Only expire mobile sessions (default: false)', 'title': 'Mobile Only', 'type': 'boolean'}, 'user_id': {'description': 'The ID of the user to wipe sessions for', 'title': 'User Id', 'type': 'string'}, 'web_only': {'default': None, 'description': 'Only expire web sessions (default: false)', 'title': 'Web Only', 'type': 'boolean'}}, title='WipeUserSessionsAcrossDevicesRequest', type='object', required=['user_id']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='WipeUserSessionsAcrossDevicesResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['admin.users.session', 'admin'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Wipes All Valid Sessions On All Devices For A Given User'), ActionModel(name='SLACK_CONVERSATIONS_HISTORY', display_name='Fetch conversation history', parameters=ActionParametersModel(properties={'channel': {'default': None, 'description': 'Conversation ID to fetch history for.', 'title': 'Channel', 'type': 'string'}, 'latest': {'default': None, 'description': 'End of time range of messages to include in results.', 'title': 'Latest', 'type': 'integer'}, 'oldest': {'default': None, 'description': 'Start of time range of messages to include in results.', 'title': 'Oldest', 'type': 'integer'}, 'inclusive': {'default': None, 'description': 'Include messages with latest or oldest timestamp in results only when either timestamp is specified. ', 'title': 'Inclusive', 'type': 'boolean'}, 'limit': {'default': None, 'description': 'The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the users list hasn\"t been reached. ', 'title': 'Limit', 'type': 'integer'}, 'cursor': {'default': None, 'description': 'Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request\"s `response_metadata`. Default value fetches the first \"page\" of the collection. See [pagination](https://slack.dev) for more detail. ', 'title': 'Cursor', 'type': 'string'}}, title='FetchConversationHistoryRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='FetchConversationHistoryResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=[], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description=\"Fetches A Conversation's History Of Messages And Events.<<DEPRECATED use fetch_conversation_history>>\"), ActionModel(name='SLACK_INDICATE_WORKFLOW_STEP_FAILURE', display_name='Indicate workflow step failure', parameters=ActionParametersModel(properties={'workflow_step_execute_id': {'description': 'Context identifier that maps to the correct workflow step execution.', 'title': 'Workflow Step Execute Id', 'type': 'string'}, 'error': {'description': 'A JSON-based object with a `message` property that should contain a human readable error message. ', 'title': 'Error', 'type': 'string'}}, title='IndicateWorkflowStepFailureRequest', type='object', required=['workflow_step_execute_id', 'error']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='IndicateWorkflowStepFailureResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['workflows'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description=\"Indicate That An App's Step In A Workflow Failed To Execute.\"), ActionModel(name='SLACK_RETRIEVE_TEAM_PROFILE_DETAILS', display_name='Retrieve team profile details', parameters=ActionParametersModel(properties={'visibility': {'default': None, 'description': 'Filter by visibility.', 'title': 'Visibility', 'type': 'string'}}, title='RetrieveTeamProfileDetailsRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='RetrieveTeamProfileDetailsResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['team.profile', 'team'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description=\"Retrieve A Team's Profile.\"), ActionModel(name='SLACK_PROMOTE_USER_TO_WORKSPACE_OWNER', display_name='Promote user to workspace owner', parameters=ActionParametersModel(properties={'team_id': {'description': 'The ID (`T1234`) of the workspace.', 'title': 'Team Id', 'type': 'string'}, 'user_id': {'description': 'Id of the user to promote to owner.', 'title': 'User Id', 'type': 'string'}}, title='PromoteUserToWorkspaceOwnerRequest', type='object', required=['team_id', 'user_id']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='PromoteUserToWorkspaceOwnerResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['admin.users', 'admin'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Set An Existing Guest, Regular User, Or Admin User To Be A Workspace Owner.'), ActionModel(name='SLACK_UNARCHIVE_A_PUBLIC_OR_PRIVATE_CHANNEL', display_name='Unarchive a public or private channel', parameters=ActionParametersModel(properties={'channel_id': {'description': 'The channel to unarchive.', 'title': 'Channel Id', 'type': 'string'}}, title='UnarchiveAPublicOrPrivateChannelRequest', type='object', required=['channel_id']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='UnarchiveAPublicOrPrivateChannelResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['admin.conversations', 'admin'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Unarchive A Public Or Private Channel.'), ActionModel(name='SLACK_USERS_INFO', display_name='Retrieve detailed user information', parameters=ActionParametersModel(properties={'include_locale': {'default': None, 'description': 'Set this to `true` to receive the locale for this user. Defaults to `false` ', 'title': 'Include Locale', 'type': 'boolean'}, 'user': {'default': None, 'description': 'User to get info on', 'title': 'User', 'type': 'string'}}, title='RetrieveDetailedUserInformationRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='RetrieveDetailedUserInformationResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=[], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Gets Information About A User.<<DEPRECATED use retrieve_detailed_user_information>>'), ActionModel(name='SLACK_FETCH_ITEM_REACTIONS', display_name='Fetch item reactions', parameters=ActionParametersModel(properties={'channel': {'default': None, 'description': 'Channel where the message to get reactions for was posted.', 'title': 'Channel', 'type': 'string'}, 'file': {'default': None, 'description': 'File to get reactions for.', 'title': 'File', 'type': 'string'}, 'file_comment': {'default': None, 'description': 'File comment to get reactions for.', 'title': 'File Comment', 'type': 'string'}, 'full': {'default': None, 'description': 'If true always return the complete reaction list.', 'title': 'Full', 'type': 'boolean'}, 'timestamp': {'default': None, 'description': 'Timestamp of the message to get reactions for.', 'title': 'Timestamp', 'type': 'string'}}, title='FetchItemReactionsRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='FetchItemReactionsResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['reactions'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Gets Reactions For An Item.'), ActionModel(name='SLACK_LIST_DISCONNECTED_CHANNELS_WITH_ORIGINAL_IDS_FOR_EKM', display_name='List disconnected channels with original ids for ekm', parameters=ActionParametersModel(properties={'channel_ids': {'default': None, 'description': 'A comma-separated list of channels to filter to.', 'title': 'Channel Ids', 'type': 'string'}, 'team_ids': {'default': None, 'description': 'A comma-separated list of the workspaces to which the channels you would like returned belong. ', 'title': 'Team Ids', 'type': 'string'}, 'limit': {'default': None, 'description': 'The maximum number of items to return. Must be between 1 - 1000 both inclusive. ', 'title': 'Limit', 'type': 'integer'}, 'cursor': {'default': None, 'description': 'Set `cursor` to `next_cursor` returned by the previous call to list items in the next page. ', 'title': 'Cursor', 'type': 'string'}}, title='ListDisconnectedChannelsWithOriginalIdsForEkmRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='ListDisconnectedChannelsWithOriginalIdsForEkmResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['admin.conversations.ekm', 'admin'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='List All Disconnected Channels\u2014I.E., Channels That Were Once Connected To Other Workspaces And Then Disconnected\u2014And The Corresponding Original Channel I Ds For Key Revocation With Ekm.'), ActionModel(name='SLACK_CHECKS_API_CALL_AND_RETURNS_SUCCESS_OR_ERROR', display_name='Checks api call and returns success or error', parameters=ActionParametersModel(properties={'error': {'default': None, 'description': 'Error response to return', 'title': 'Error', 'type': 'string'}, 'foo': {'default': None, 'description': 'example property to return', 'title': 'Foo', 'type': 'string'}}, title='ChecksApiCallAndReturnsSuccessOrErrorRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='ChecksApiCallAndReturnsSuccessOrErrorResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['api'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Checks Api Calling Code.'), ActionModel(name='SLACK_GET_CURRENT_TEAM_S_ACCESS_LOGS', display_name='Get current team s access logs', parameters=ActionParametersModel(properties={'before': {'default': None, 'description': 'End of time range of logs to include in results (inclusive).', 'title': 'Before', 'type': 'string'}, 'count': {'default': None, 'description': 'Count', 'title': 'Count', 'type': 'string'}, 'page': {'default': None, 'description': 'Page', 'title': 'Page', 'type': 'string'}}, title='GetCurrentTeamSAccessLogsRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='GetCurrentTeamSAccessLogsResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['team'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Gets The Access Logs For The Current Team.'), ActionModel(name='SLACK_APPROVE_AN_APP_INSTALLATION_IN_A_WORKSPACE', display_name='Approve an app installation in a workspace', parameters=ActionParametersModel(properties={'app_id': {'default': None, 'description': 'The id of the app to approve.', 'title': 'App Id', 'type': 'string'}, 'request_id': {'default': None, 'description': 'The id of the request to approve.', 'title': 'Request Id', 'type': 'string'}, 'team_id': {'default': None, 'description': 'Team Id', 'title': 'Team Id', 'type': 'string'}}, title='ApproveAnAppInstallationInAWorkspaceRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='ApproveAnAppInstallationInAWorkspaceResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['admin.apps', 'admin'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Approve An App For Installation On A Workspace.'), ActionModel(name='SLACK_SHARE_REMOTE_FILE_IN_CHANNELS', display_name='Share remote file in channels', parameters=ActionParametersModel(properties={'file': {'default': None, 'description': 'Specify a file registered with Slack by providing its ID. Either this field or `external_id` or both are required. ', 'title': 'File', 'type': 'string'}, 'external_id': {'default': None, 'description': 'The globally unique identifier (GUID) for the file, as set by the app registering the file with Slack.  Either this field or `file` or both are required. ', 'title': 'External Id', 'type': 'string'}, 'channels': {'default': None, 'description': 'Comma-separated list of channel IDs where the file will be shared.', 'title': 'Channels', 'type': 'string'}}, title='ShareRemoteFileInChannelsRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='ShareRemoteFileInChannelsResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['files.remote', 'files'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Share A Remote File Into A Channel.'), ActionModel(name='SLACK_FETCH_BOT_USER_INFORMATION', display_name='Fetch bot user information', parameters=ActionParametersModel(properties={'bot': {'default': None, 'description': 'Bot user to get info on', 'title': 'Bot', 'type': 'string'}}, title='FetchBotUserInformationRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='FetchBotUserInformationResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['bots'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Gets Information About A Bot User.'), ActionModel(name='SLACK_ADD_A_CUSTOM_EMOJI_TO_A_SLACK_TEAM', display_name='Add a custom emoji to a slack team', parameters=ActionParametersModel(properties={'name': {'description': 'The name of the emoji to be removed. Colons (`:myemoji:`) around the value are not required, although they may be included. ', 'title': 'Name', 'type': 'string'}, 'token': {'description': 'Authentication token. Requires scope: `admin.teams:write`', 'title': 'Token', 'type': 'string'}, 'url': {'description': 'The URL of a file to use as an image for the emoji. Square images under 128KB and with transparent backgrounds work best. ', 'title': 'Url', 'type': 'string'}}, title='AddACustomEmojiToASlackTeamRequest', type='object', required=['name', 'token', 'url']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='AddACustomEmojiToASlackTeamResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['admin.emoji', 'admin'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Add An Emoji.'), ActionModel(name='SLACK_PUSH_VIEW_TO_ROOT_VIEW_STACK', display_name='Push view to root view stack', parameters=ActionParametersModel(properties={'trigger_id': {'description': 'Exchange a trigger to post to the user.', 'title': 'Trigger Id', 'type': 'string'}, 'view': {'description': 'A [view payload](https://slack.dev). This must be a JSON-encoded string.', 'title': 'View', 'type': 'string'}}, title='PushViewToRootViewStackRequest', type='object', required=['trigger_id', 'view']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='PushViewToRootViewStackResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['views'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Push A View Onto The Stack Of A Root View.'), ActionModel(name='SLACK_RESTRICT_APP_INSTALLATION_ON_WORKSPACE', display_name='Restrict app installation on workspace', parameters=ActionParametersModel(properties={'app_id': {'default': None, 'description': 'The id of the app to restrict.', 'title': 'App Id', 'type': 'string'}, 'request_id': {'default': None, 'description': 'The id of the request to restrict.', 'title': 'Request Id', 'type': 'string'}, 'team_id': {'default': None, 'description': 'Team Id', 'title': 'Team Id', 'type': 'string'}}, title='RestrictAppInstallationOnWorkspaceRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='RestrictAppInstallationOnWorkspaceResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['admin.apps', 'admin'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Restrict An App For Installation On A Workspace.'), ActionModel(name='SLACK_REMOVE_REACTION_FROM_ITEM', display_name='Remove reaction from item', parameters=ActionParametersModel(properties={'channel': {'default': None, 'description': 'Channel where the message to remove reaction from was posted.', 'title': 'Channel', 'type': 'string'}, 'file': {'default': None, 'description': 'File to remove reaction from.', 'title': 'File', 'type': 'string'}, 'file_comment': {'default': None, 'description': 'File comment to remove reaction from.', 'title': 'File Comment', 'type': 'string'}, 'name': {'description': 'Reaction (emoji) name.', 'title': 'Name', 'type': 'string'}, 'timestamp': {'default': None, 'description': 'Timestamp of the message to remove reaction from.', 'title': 'Timestamp', 'type': 'string'}}, title='RemoveReactionFromItemRequest', type='object', required=['name']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='RemoveReactionFromItemResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['reactions', 'important'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Removes A Reaction From An Item.'), ActionModel(name='SLACK_REMOVE_A_STAR_FROM_AN_ITEM', display_name='Remove a star from an item', parameters=ActionParametersModel(properties={'channel': {'default': None, 'description': 'Channel to remove star from, or channel where the message to remove star from was posted (used with `timestamp`). ', 'title': 'Channel', 'type': 'string'}, 'file': {'default': None, 'description': 'File to remove star from.', 'title': 'File', 'type': 'string'}, 'file_comment': {'default': None, 'description': 'File comment to remove star from.', 'title': 'File Comment', 'type': 'string'}, 'timestamp': {'default': None, 'description': 'Timestamp of the message to remove star from.', 'title': 'Timestamp', 'type': 'string'}}, title='RemoveAStarFromAnItemRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='RemoveAStarFromAnItemResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['stars'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Removes A Star From An Item.'), ActionModel(name='SLACK_REMOVE_ENTERPRISE_GRID_ORG_EMOJI', display_name='Remove enterprise grid org emoji', parameters=ActionParametersModel(properties={'name': {'description': 'The name of the emoji to be removed. Colons (`:myemoji:`) around the value are not required, although they may be included. ', 'title': 'Name', 'type': 'string'}, 'token': {'description': 'Authentication token. Requires scope: `admin.teams:write`', 'title': 'Token', 'type': 'string'}}, title='RemoveEnterpriseGridOrgEmojiRequest', type='object', required=['name', 'token']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='RemoveEnterpriseGridOrgEmojiResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['admin.emoji', 'admin'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Remove An Emoji Across An Enterprise Grid Organization'), ActionModel(name='SLACK_LIST_APP_PERMISSIONS_SCOPES_ON_A_TEAM', display_name='List app permissions scopes on a team', parameters=ActionParametersModel(properties={}, title='ListAppPermissionsScopesOnATeamRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='ListAppPermissionsScopesOnATeamResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['apps.permissions.scopes', 'apps'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Returns List Of Scopes This App Has On A Team.'), ActionModel(name='SLACK_SET_WORKSPACE_DISCOVERABILITY_SETTINGS', display_name='Set workspace discoverability settings', parameters=ActionParametersModel(properties={'discoverability': {'description': 'This workspace\"s discovery setting. It must be set to one of `open`, `invite_only`, `closed`, or `unlisted`. ', 'title': 'Discoverability', 'type': 'string'}, 'team_id': {'description': 'The ID of the workspace to set discoverability on.', 'title': 'Team Id', 'type': 'string'}}, title='SetWorkspaceDiscoverabilitySettingsRequest', type='object', required=['discoverability', 'team_id']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='SetWorkspaceDiscoverabilitySettingsResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['admin.teams.settings', 'admin'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='An Api Method That Allows Admins To Set The Discoverability Of A Given Workspace'), ActionModel(name='SLACK_UNPIN_ITEM_FROM_CHANNEL', display_name='Unpin item from channel', parameters=ActionParametersModel(properties={'channel': {'description': 'Channel where the item is pinned to.', 'title': 'Channel', 'type': 'string'}, 'timestamp': {'default': None, 'description': 'Timestamp of the message to un-pin.', 'title': 'Timestamp', 'type': 'string'}}, title='UnpinItemFromChannelRequest', type='object', required=['channel']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='UnpinItemFromChannelResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['pins'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Un Pins An Item From A Channel.'), ActionModel(name='SLACK_ADD_AN_EMOJI_ALIAS_IN_SLACK', display_name='Add an emoji alias in slack', parameters=ActionParametersModel(properties={'alias_for': {'description': 'The alias of the emoji.', 'title': 'Alias For', 'type': 'string'}, 'name': {'description': 'The name of the emoji to be aliased. Colons (`:myemoji:`) around the value are not required, although they may be included. ', 'title': 'Name', 'type': 'string'}, 'token': {'description': 'Authentication token. Requires scope: `admin.teams:write`', 'title': 'Token', 'type': 'string'}}, title='AddAnEmojiAliasInSlackRequest', type='object', required=['alias_for', 'name', 'token']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='AddAnEmojiAliasInSlackResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['admin.emoji', 'admin'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Add An Emoji Alias.'), ActionModel(name='SLACK_MANUALLY_SET_USER_PRESENCE', display_name='Manually set user presence', parameters=ActionParametersModel(properties={'presence': {'description': 'Either `auto` or `away`', 'title': 'Presence', 'type': 'string'}}, title='ManuallySetUserPresenceRequest', type='object', required=['presence']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='ManuallySetUserPresenceResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['users'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Manually Sets User Presence.'), ActionModel(name='SLACK_END_USER_DO_NOT_DISTURB_SESSION', display_name='End user do not disturb session', parameters=ActionParametersModel(properties={}, title='EndUserDoNotDisturbSessionRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='EndUserDoNotDisturbSessionResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['dnd'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description=\"Ends The Current User's Do Not Disturb Session Immediately.\"), ActionModel(name='SLACK_RENAME_A_CONVERSATION', display_name='Rename a conversation', parameters=ActionParametersModel(properties={'channel': {'default': None, 'description': 'ID of conversation to rename', 'title': 'Channel', 'type': 'string'}, 'name': {'default': None, 'description': 'New name for conversation.', 'title': 'Name', 'type': 'string'}}, title='RenameAConversationRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='RenameAConversationResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['conversations'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Renames A Conversation.'), ActionModel(name='SLACK_UPLOAD_OR_CREATE_A_FILE_IN_SLACK', display_name='Upload or create a file in slack', parameters=ActionParametersModel(properties={'title': {'default': None, 'description': 'Title of file.', 'title': 'Title', 'type': 'string'}, 'channels': {'default': None, 'description': 'Comma-separated list of channel names or IDs where the file will be shared. ', 'title': 'Channels', 'type': 'string'}, 'content': {'default': None, 'description': 'File contents via a POST variable. If omitting this parameter, you must provide a `file`. ', 'title': 'Content', 'type': 'string'}, 'file': {'default': None, 'description': 'File contents via `multipart/form-data`. If omitting this parameter, you must submit `content`. ', 'title': 'File', 'type': 'string'}, 'filename': {'default': None, 'description': 'Filename of file.', 'title': 'Filename', 'type': 'string'}, 'filetype': {'default': None, 'description': 'A [file type](https://slack.dev) identifier.', 'title': 'Filetype', 'type': 'string'}, 'initial_comment': {'default': None, 'description': 'The message text introducing the file in specified `channels`.', 'title': 'Initial Comment', 'type': 'string'}, 'thread_ts': {'default': None, 'description': 'Provide another message\"s `ts` value to upload this file as a reply. Never use a reply\"s `ts` value; use its parent instead. ', 'title': 'Thread Ts', 'type': 'integer'}, 'token': {'default': None, 'description': 'Authentication token. Requires scope: `files:write:user`', 'title': 'Token', 'type': 'string'}}, title='UploadOrCreateAFileInSlackRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='UploadOrCreateAFileInSlackResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['files'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Uploads Or Creates A File.'), ActionModel(name='SLACK_SET_WORKSPACE_NAME', display_name='Set workspace name', parameters=ActionParametersModel(properties={'name': {'description': 'The new name of the workspace.', 'title': 'Name', 'type': 'string'}, 'team_id': {'description': 'ID for the workspace to set the name for.', 'title': 'Team Id', 'type': 'string'}}, title='SetWorkspaceNameRequest', type='object', required=['name', 'team_id']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='SetWorkspaceNameResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['admin.teams.settings', 'admin'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Set The Name Of A Given Workspace.'), ActionModel(name='SLACK_CHAT_POST_MESSAGE', display_name='Sends a message to a slack channel', parameters=ActionParametersModel(properties={'as_user': {'default': None, 'description': 'Pass true to post the message as the authed user, instead of as a bot. Defaults to false. See [authorship](https://slack.dev) below. ', 'title': 'As User', 'type': 'boolean'}, 'attachments': {'default': None, 'description': 'A JSON-based array of structured attachments, presented as a URL-encoded string. ', 'title': 'Attachments', 'type': 'string'}, 'blocks': {'default': None, 'description': 'A JSON-based array of structured blocks, presented as a URL-encoded string. ', 'title': 'Blocks', 'type': 'string'}, 'channel': {'description': 'Channel, private group, or IM channel to send message to. Can be an encoded ID, or a name. See [below](https://slack.dev) for more details. ', 'title': 'Channel', 'type': 'string'}, 'icon_emoji': {'default': None, 'description': 'Emoji to use as the icon for this message. Overrides `icon_url`. Must be used in conjunction with `as_user` set to `false`, otherwise ignored. See [authorship](https://slack.dev) below. ', 'title': 'Icon Emoji', 'type': 'string'}, 'icon_url': {'default': None, 'description': 'URL to an image to use as the icon for this message. Must be used in conjunction with `as_user` set to false, otherwise ignored. See [authorship](https://slack.dev) below. ', 'title': 'Icon Url', 'type': 'string'}, 'link_names': {'default': None, 'description': 'Find and link channel names and usernames.', 'title': 'Link Names', 'type': 'boolean'}, 'mrkdwn': {'default': None, 'description': 'Disable Slack markup parsing by setting to `false`. Enabled by default.', 'title': 'Mrkdwn', 'type': 'boolean'}, 'parse': {'default': None, 'description': 'Change how messages are treated. Defaults to `none`. See [below](https://slack.dev). ', 'title': 'Parse', 'type': 'string'}, 'reply_broadcast': {'default': None, 'description': 'Used in conjunction with `thread_ts` and indicates whether reply should be made visible to everyone in the channel or conversation. Defaults to `false`. ', 'title': 'Reply Broadcast', 'type': 'boolean'}, 'text': {'default': None, 'description': 'How this field works and whether it is required depends on other fields you use in your API call. [See below](https://slack.dev) for more detail. ', 'title': 'Text', 'type': 'string'}, 'thread_ts': {'default': None, 'description': 'Provide another message\"s `ts` value to make this message a reply. Avoid using a reply\"s `ts` value; use its parent instead. ', 'title': 'Thread Ts', 'type': 'string'}, 'unfurl_links': {'default': None, 'description': 'Pass true to enable unfurling of primarily text-based content.', 'title': 'Unfurl Links', 'type': 'boolean'}, 'unfurl_media': {'default': None, 'description': 'Pass false to disable unfurling of media content.', 'title': 'Unfurl Media', 'type': 'boolean'}, 'username': {'default': None, 'description': 'Set your bot\"s user name. Must be used in conjunction with `as_user` set to false, otherwise ignored. See [authorship](https://slack.dev) below. ', 'title': 'Username', 'type': 'string'}}, title='SendsAMessageToASlackChannelRequest', type='object', required=['channel']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='SendsAMessageToASlackChannelResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=[], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Sends A Message To A Channel.<<DEPRECATED use sends_a_message_to_a_slack_channel>>'), ActionModel(name='SLACK_SET_CHANNEL_POSTING_PERMISSIONS', display_name='Set channel posting permissions', parameters=ActionParametersModel(properties={'channel_id': {'description': 'The channel to set the prefs for', 'title': 'Channel Id', 'type': 'string'}, 'prefs': {'description': 'The prefs for this channel in a stringified JSON format.', 'title': 'Prefs', 'type': 'string'}}, title='SetChannelPostingPermissionsRequest', type='object', required=['channel_id', 'prefs']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='SetChannelPostingPermissionsResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['admin.conversations', 'admin'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Set The Posting Permissions For A Public Or Private Channel.'), ActionModel(name='SLACK_USERS_LIST', display_name='List all slack team users with pagination', parameters=ActionParametersModel(properties={'limit': {'default': None, 'description': 'The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the users list hasn\"t been reached. Providing no `limit` value will result in Slack attempting to deliver you the entire result set. If the collection is too large you may experience `limit_required` or HTTP 500 errors. ', 'title': 'Limit', 'type': 'integer'}, 'cursor': {'default': None, 'description': 'Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request\"s `response_metadata`. Default value fetches the first \"page\" of the collection. See [pagination](https://slack.dev) for more detail. ', 'title': 'Cursor', 'type': 'string'}, 'include_locale': {'default': None, 'description': 'Set this to `true` to receive the locale for users. Defaults to `false`', 'title': 'Include Locale', 'type': 'boolean'}}, title='ListAllSlackTeamUsersWithPaginationRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='ListAllSlackTeamUsersWithPaginationResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=[], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Lists All Users In A Slack Team.<<DEPRECATED use list_all_slack_team_users_with_pagination>>'), ActionModel(name='SLACK_UPDATE_AN_EXISTING_SLACK_VIEW', display_name='Update an existing slack view', parameters=ActionParametersModel(properties={'view_id': {'default': None, 'description': 'A unique identifier of the view to be updated. Either `view_id` or `external_id` is required. ', 'title': 'View Id', 'type': 'string'}, 'external_id': {'default': None, 'description': 'A unique identifier of the view set by the developer. Must be unique for all views on a team. Max length of 255 characters. Either `view_id` or `external_id` is required. ', 'title': 'External Id', 'type': 'string'}, 'view': {'default': None, 'description': 'A [view object](https://slack.dev). This must be a JSON-encoded string.', 'title': 'View', 'type': 'string'}, 'hash': {'default': None, 'description': 'A string that represents view state to protect against possible race conditions. ', 'title': 'Hash', 'type': 'string'}}, title='UpdateAnExistingSlackViewRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='UpdateAnExistingSlackViewResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['views'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Update An Existing View.'), ActionModel(name='SLACK_LISTS_PINNED_ITEMS_IN_A_CHANNEL', display_name='Lists pinned items in a channel', parameters=ActionParametersModel(properties={'channel': {'description': 'Channel to get pinned items for.', 'title': 'Channel', 'type': 'string'}}, title='ListsPinnedItemsInAChannelRequest', type='object', required=['channel']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='ListsPinnedItemsInAChannelResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['pins'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Lists Items Pinned To A Channel.'), ActionModel(name='SLACK_FETCH_CONVERSATION_HISTORY', display_name='Fetch conversation history', parameters=ActionParametersModel(properties={'channel': {'default': None, 'description': 'Conversation ID to fetch history for.', 'title': 'Channel', 'type': 'string'}, 'latest': {'default': None, 'description': 'End of time range of messages to include in results.', 'title': 'Latest', 'type': 'integer'}, 'oldest': {'default': None, 'description': 'Start of time range of messages to include in results.', 'title': 'Oldest', 'type': 'integer'}, 'inclusive': {'default': None, 'description': 'Include messages with latest or oldest timestamp in results only when either timestamp is specified. ', 'title': 'Inclusive', 'type': 'boolean'}, 'limit': {'default': None, 'description': 'The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the users list hasn\"t been reached. ', 'title': 'Limit', 'type': 'integer'}, 'cursor': {'default': None, 'description': 'Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request\"s `response_metadata`. Default value fetches the first \"page\" of the collection. See [pagination](https://slack.dev) for more detail. ', 'title': 'Cursor', 'type': 'string'}}, title='FetchConversationHistoryRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='FetchConversationHistoryResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['conversations', 'important'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description=\"Fetches A Conversation's History Of Messages And Events.\"), ActionModel(name='SLACK_LIST_USER_REMINDERS_WITH_DETAILS', display_name='List user reminders with details', parameters=ActionParametersModel(properties={}, title='ListUserRemindersWithDetailsRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='ListUserRemindersWithDetailsResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['reminders'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Lists All Reminders Created By Or For A Given User.'), ActionModel(name='SLACK_GET_CHANNEL_CONVERSATION_PREFERENCES', display_name='Get channel conversation preferences', parameters=ActionParametersModel(properties={'channel_id': {'description': 'The channel to get preferences for.', 'title': 'Channel Id', 'type': 'string'}}, title='GetChannelConversationPreferencesRequest', type='object', required=['channel_id']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='GetChannelConversationPreferencesResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['admin.conversations', 'admin'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Get Conversation Preferences For A Public Or Private Channel.'), ActionModel(name='SLACK_LIST_WORKSPACE_OWNERS', display_name='List workspace owners', parameters=ActionParametersModel(properties={'team_id': {'description': 'Team Id', 'title': 'Team Id', 'type': 'string'}, 'limit': {'default': None, 'description': 'The maximum number of items to return. Must be between 1 - 1000 both inclusive. ', 'title': 'Limit', 'type': 'integer'}, 'cursor': {'default': None, 'description': 'Set `cursor` to `next_cursor` returned by the previous call to list items in the next page. ', 'title': 'Cursor', 'type': 'string'}}, title='ListWorkspaceOwnersRequest', type='object', required=['team_id']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='ListWorkspaceOwnersResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['admin.teams.owners', 'admin'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='List All Of The Owners On A Given Workspace.'), ActionModel(name='SLACK_LIST_ALL_SLACK_TEAM_USERS_WITH_PAGINATION', display_name='List all slack team users with pagination', parameters=ActionParametersModel(properties={'limit': {'default': None, 'description': 'The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the users list hasn\"t been reached. Providing no `limit` value will result in Slack attempting to deliver you the entire result set. If the collection is too large you may experience `limit_required` or HTTP 500 errors. ', 'title': 'Limit', 'type': 'integer'}, 'cursor': {'default': None, 'description': 'Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request\"s `response_metadata`. Default value fetches the first \"page\" of the collection. See [pagination](https://slack.dev) for more detail. ', 'title': 'Cursor', 'type': 'string'}, 'include_locale': {'default': None, 'description': 'Set this to `true` to receive the locale for users. Defaults to `false`', 'title': 'Include Locale', 'type': 'boolean'}}, title='ListAllSlackTeamUsersWithPaginationRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='ListAllSlackTeamUsersWithPaginationResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['users', 'important'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Lists All Users In A Slack Team.'), ActionModel(name='SLACK_DELETE_A_FILE_BY_ID', display_name='Delete a file by id', parameters=ActionParametersModel(properties={'file': {'default': None, 'description': 'ID of file to delete.', 'title': 'File', 'type': 'string'}}, title='DeleteAFileByIdRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='DeleteAFileByIdResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['files'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Deletes A File.'), ActionModel(name='SLACK_EXCHANGE_OAUTH_CODE_FOR_WORKSPACE_TOKEN', display_name='Exchange oauth code for workspace token', parameters=ActionParametersModel(properties={'client_id': {'default': None, 'description': 'Issued when you created your application.', 'title': 'Client Id', 'type': 'string'}, 'client_secret': {'default': None, 'description': 'Issued when you created your application.', 'title': 'Client Secret', 'type': 'string'}, 'code': {'default': None, 'description': 'The `code` param returned via the OAuth callback.', 'title': 'Code', 'type': 'string'}, 'redirect_uri': {'default': None, 'description': 'This must match the originally submitted URI (if one was sent).', 'title': 'Redirect Uri', 'type': 'string'}, 'single_channel': {'default': None, 'description': 'Request the user to add your app only to a single channel.', 'title': 'Single Channel', 'type': 'boolean'}}, title='ExchangeOauthCodeForWorkspaceTokenRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='ExchangeOauthCodeForWorkspaceTokenResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['oauth'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Exchanges A Temporary O Auth Verifier Code For A Workspace Token.'), ActionModel(name='SLACK_CONVERSATIONS_LIST', display_name='List all slack team channels with various filters', parameters=ActionParametersModel(properties={'exclude_archived': {'default': None, 'description': 'Set to `true` to exclude archived channels from the list', 'title': 'Exclude Archived', 'type': 'boolean'}, 'types': {'default': None, 'description': 'Mix and match channel types by providing a comma-separated list of any combination of `public_channel`, `private_channel`, `mpim`, `im` ', 'title': 'Types', 'type': 'string'}, 'limit': {'default': None, 'description': 'The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the list hasn\"t been reached. Must be an integer no larger than 1000. ', 'title': 'Limit', 'type': 'integer'}, 'cursor': {'default': None, 'description': 'Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request\"s `response_metadata`. Default value fetches the first \"page\" of the collection. See [pagination](https://slack.dev) for more detail. ', 'title': 'Cursor', 'type': 'string'}}, title='ListAllSlackTeamChannelsWithVariousFiltersRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='ListAllSlackTeamChannelsWithVariousFiltersResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=[], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Lists All Channels In A Slack Team.<<DEPRECATED use list_all_slack_team_channels_with_various_filters>>'), ActionModel(name='SLACK_LIST_TEAM_WORKSPACE_APP_REQUESTS', display_name='List team workspace app requests', parameters=ActionParametersModel(properties={'limit': {'default': None, 'description': 'The maximum number of items to return. Must be between 1 - 1000 both inclusive. ', 'title': 'Limit', 'type': 'integer'}, 'cursor': {'default': None, 'description': 'Set `cursor` to `next_cursor` returned by the previous call to list items in the next page ', 'title': 'Cursor', 'type': 'string'}, 'team_id': {'default': None, 'description': 'Team Id', 'title': 'Team Id', 'type': 'string'}}, title='ListTeamWorkspaceAppRequestsRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='ListTeamWorkspaceAppRequestsResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['admin.apps.requests', 'admin'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='List App Requests For A Team/Workspace.'), ActionModel(name='SLACK_FETCH_MESSAGE_THREAD_FROM_A_CONVERSATION', display_name='Fetch message thread from a conversation', parameters=ActionParametersModel(properties={'channel': {'default': None, 'description': 'Conversation ID to fetch thread from.', 'title': 'Channel', 'type': 'string'}, 'ts': {'default': None, 'description': 'Unique identifier of a thread\"s parent message. `ts` must be the timestamp of an existing message with 0 or more replies. If there are no replies then just the single message referenced by `ts` will return - it is just an ordinary, unthreaded message. ', 'title': 'Ts', 'type': 'integer'}, 'latest': {'default': None, 'description': 'End of time range of messages to include in results.', 'title': 'Latest', 'type': 'integer'}, 'oldest': {'default': None, 'description': 'Start of time range of messages to include in results.', 'title': 'Oldest', 'type': 'integer'}, 'inclusive': {'default': None, 'description': 'Include messages with latest or oldest timestamp in results only when either timestamp is specified. ', 'title': 'Inclusive', 'type': 'boolean'}, 'limit': {'default': None, 'description': 'The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the users list hasn\"t been reached. ', 'title': 'Limit', 'type': 'integer'}, 'cursor': {'default': None, 'description': 'Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request\"s `response_metadata`. Default value fetches the first \"page\" of the collection. See [pagination](https://slack.dev) for more detail. ', 'title': 'Cursor', 'type': 'string'}}, title='FetchMessageThreadFromAConversationRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='FetchMessageThreadFromAConversationResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['conversations'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Retrieve A Thread Of Messages Posted To A Conversation'), ActionModel(name='SLACK_DELETES_A_MESSAGE_FROM_A_CHAT', display_name='Deletes a message from a chat', parameters=ActionParametersModel(properties={'as_user': {'default': None, 'description': 'Pass true to delete the message as the authed user with `chat:write:user` scope. [Bot users](https://slack.dev) in this context are considered authed users. If unused or false, the message will be deleted with `chat:write:bot` scope. ', 'title': 'As User', 'type': 'boolean'}, 'channel': {'default': None, 'description': 'Channel containing the message to be deleted.', 'title': 'Channel', 'type': 'string'}, 'ts': {'default': None, 'description': 'Timestamp of the message to be deleted.', 'title': 'Ts', 'type': 'integer'}}, title='DeletesAMessageFromAChatRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='DeletesAMessageFromAChatResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['chat'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Deletes A Message.'), ActionModel(name='SLACK_OPEN_USER_DIALOG_WITH_JSON_DEFINED_UI', display_name='Open user dialog with json defined ui', parameters=ActionParametersModel(properties={'dialog': {'description': 'The dialog definition. This must be a JSON-encoded string.', 'title': 'Dialog', 'type': 'string'}, 'trigger_id': {'description': 'Exchange a trigger to post to the user.', 'title': 'Trigger Id', 'type': 'string'}}, title='OpenUserDialogWithJsonDefinedUiRequest', type='object', required=['dialog', 'trigger_id']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='OpenUserDialogWithJsonDefinedUiResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['dialog'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Open A Dialog With A User'), ActionModel(name='SLACK_RETRIEVE_CONVERSATION_MEMBERS_LIST', display_name='Retrieve conversation members list', parameters=ActionParametersModel(properties={'channel': {'default': None, 'description': 'ID of the conversation to retrieve members for', 'title': 'Channel', 'type': 'string'}, 'limit': {'default': None, 'description': 'The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the users list hasn\"t been reached. ', 'title': 'Limit', 'type': 'integer'}, 'cursor': {'default': None, 'description': 'Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request\"s `response_metadata`. Default value fetches the first \"page\" of the collection. See [pagination](https://slack.dev) for more detail. ', 'title': 'Cursor', 'type': 'string'}}, title='RetrieveConversationMembersListRequest', type='object', required=None), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='RetrieveConversationMembersListResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['conversations'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Retrieve Members Of A Conversation.'), ActionModel(name='SLACK_FIND_USER_BY_EMAIL_ADDRESS', display_name='Find user by email address', parameters=ActionParametersModel(properties={'email': {'description': 'An email address belonging to a user in the workspace', 'title': 'Email', 'type': 'string'}}, title='FindUserByEmailAddressRequest', type='object', required=['email']), response=ActionResponseModel(properties={'data': {'title': 'Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='FindUserByEmailAddressResponse', type='object', required=['data', 'successful']), appName='slack', appId='slack', tags=['users'], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/slack.svg', description='Find A User With An Email Address.')]\n\nFor the following request, determine:\n1. Which specific actions from slack's registry are needed (if any)\n2. What each action's purpose would be in the workflow\n3. If this app's actions alone aren't sufficient for its part in the workflow, explain why\n\nRemember: Focus only on slack's capabilities - ignore requirements for other apps."}, {"role": "user", "content": "Automate checking CPA against target in Google Sheets and send Slack alert if exceeded."}], "model": "deepseek-ai/DeepSeek-R1-Distill-Qwen-32B", "n": 1, "parallel_tool_calls": true, "stream": false, "tool_choice": "required", "tools": [{"type": "function", "function": {"name": "final_result", "description": "The final response which ends this conversation", "parameters": {"$defs": {"ActionRequirement": {"properties": {"app_id": {"description": "ID of the required application", "title": "App Id", "type": "string"}, "action_name": {"description": "Name of the required action", "title": "Action Name", "type": "string"}, "purpose": {"description": "Why this action is needed in the workflow", "title": "Purpose", "type": "string"}}, "required": ["app_id", "action_name", "purpose"], "title": "ActionRequirement", "type": "object"}}, "properties": {"feasible": {"description": "Whether request can be implemented with available actions", "title": "Feasible", "type": "boolean"}, "required_actions": {"anyOf": [{"items": {"$ref": "#/$defs/ActionRequirement"}, "type": "array"}, {"type": "null"}], "default": null, "description": "List of required actions if feasible", "title": "Required Actions"}, "infeasible_reason": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "description": "Detailed explanation if request is not feasible", "title": "Infeasible Reason"}}, "required": ["feasible"], "title": "ActionFeasibilityResult", "type": "object"}}}]}
{"messages": [{"role": "system", "content": "You are a workflow analysis agent that evaluates automation requests.\nYour goal is to determine if a workflow request contains enough core information to proceed with implementation.\n\nKey Guidelines:\n- Focus only on blocking/critical missing information\n- Make reasonable assumptions about company context when possible\n- Only flag missing information if it would completely prevent the workflow from being implemented\n- Accept general company references without requiring specific domain names\n- For document classifications, accept natural language descriptions\n- Consider the request complete if the core workflow logic is clear, even if some details could be configured later\n\nWhen evaluating completeness, ask:\n1. Is the basic workflow logic clear and actionable?\n2. Are the essential triggers and actions defined?\n3. Would an implementer understand the core goal?\n\nErr on the side of accepting requests as complete if the fundamental workflow is understandable.\n"}, {"role": "user", "content": "Need help keeping my East Asian culture lessons organized across systems. Right now I'm copying the same materials between Blackboard and Canvas for different classes, and keeping originals in Drive. Can you set things up so when I update a lesson doc in Drive, it automatically syncs the new version to both my Blackboard and Canvas courses? Just trying to avoid updating everything three times."}], "model": "deepseek-ai/DeepSeek-R1-Distill-Qwen-32B", "n": 1, "parallel_tool_calls": true, "stream": false, "tool_choice": "required", "tools": [{"type": "function", "function": {"name": "final_result", "description": "The final response which ends this conversation", "parameters": {"properties": {"is_complete": {"description": "Whether request has all needed information", "title": "Is Complete", "type": "boolean"}, "missing_info": {"anyOf": [{"items": {"type": "string"}, "type": "array"}, {"type": "null"}], "default": null, "description": "List of missing information pieces if incomplete", "title": "Missing Info"}, "clarifying_questions": {"anyOf": [{"items": {"type": "string"}, "type": "array"}, {"type": "null"}], "default": null, "description": "Questions to ask user if more information needed", "title": "Clarifying Questions"}, "parsed_request": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "description": "Clean version of request once complete", "title": "Parsed Request"}}, "required": ["is_complete"], "title": "RequestCompleteness", "type": "object"}}}]}
{"messages": [{"role": "system", "content": "You are a workflow analysis agent that evaluates automation requests.\nYour goal is to determine if a workflow request contains enough core information to proceed with implementation.\n\nKey Guidelines:\n- Focus only on blocking/critical missing information\n- Make reasonable assumptions about company context when possible\n- Only flag missing information if it would completely prevent the workflow from being implemented\n- Accept general company references without requiring specific domain names\n- For document classifications, accept natural language descriptions\n- Consider the request complete if the core workflow logic is clear, even if some details could be configured later\n\nWhen evaluating completeness, ask:\n1. Is the basic workflow logic clear and actionable?\n2. Are the essential triggers and actions defined?\n3. Would an implementer understand the core goal?\n\nErr on the side of accepting requests as complete if the fundamental workflow is understandable.\n"}, {"role": "user", "content": "Looking for a way to handle interpreter scheduling requests. Want to give departments a Calendly link where they pick times they need an interpreter. Then automatically create a calendar event and email our interpreter contact list to see who's available. Using Google Calendar and Gmail now but it's all manual."}], "model": "deepseek-ai/DeepSeek-R1-Distill-Qwen-32B", "n": 1, "parallel_tool_calls": true, "stream": false, "tool_choice": "required", "tools": [{"type": "function", "function": {"name": "final_result", "description": "The final response which ends this conversation", "parameters": {"properties": {"is_complete": {"description": "Whether request has all needed information", "title": "Is Complete", "type": "boolean"}, "missing_info": {"anyOf": [{"items": {"type": "string"}, "type": "array"}, {"type": "null"}], "default": null, "description": "List of missing information pieces if incomplete", "title": "Missing Info"}, "clarifying_questions": {"anyOf": [{"items": {"type": "string"}, "type": "array"}, {"type": "null"}], "default": null, "description": "Questions to ask user if more information needed", "title": "Clarifying Questions"}, "parsed_request": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "description": "Clean version of request once complete", "title": "Parsed Request"}}, "required": ["is_complete"], "title": "RequestCompleteness", "type": "object"}}}]}
{"messages": [{"role": "system", "content": "You are a workflow analysis agent that evaluates automation requests.\nYour goal is to determine if a workflow request contains enough core information to proceed with implementation.\n\nKey Guidelines:\n- Focus only on blocking/critical missing information\n- Make reasonable assumptions about company context when possible\n- Only flag missing information if it would completely prevent the workflow from being implemented\n- Accept general company references without requiring specific domain names\n- For document classifications, accept natural language descriptions\n- Consider the request complete if the core workflow logic is clear, even if some details could be configured later\n\nWhen evaluating completeness, ask:\n1. Is the basic workflow logic clear and actionable?\n2. Are the essential triggers and actions defined?\n3. Would an implementer understand the core goal?\n\nErr on the side of accepting requests as complete if the fundamental workflow is understandable.\n"}, {"role": "user", "content": "Looking for a way to handle interpreter scheduling requests. Want to give departments a Calendly link where they pick times they need an interpreter. Then automatically create a calendar event and email our interpreter contact list to see who's available. Using Google Calendar and Gmail now but it's all manual."}], "model": "deepseek-ai/DeepSeek-R1-Distill-Qwen-32B", "n": 1, "parallel_tool_calls": true, "stream": false, "tool_choice": "required", "tools": [{"type": "function", "function": {"name": "final_result", "description": "The final response which ends this conversation", "parameters": {"properties": {"is_complete": {"description": "Whether request has all needed information", "title": "Is Complete", "type": "boolean"}, "missing_info": {"anyOf": [{"items": {"type": "string"}, "type": "array"}, {"type": "null"}], "default": null, "description": "List of missing information pieces if incomplete", "title": "Missing Info"}, "clarifying_questions": {"anyOf": [{"items": {"type": "string"}, "type": "array"}, {"type": "null"}], "default": null, "description": "Questions to ask user if more information needed", "title": "Clarifying Questions"}, "parsed_request": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "description": "Clean version of request once complete", "title": "Parsed Request"}}, "required": ["is_complete"], "title": "RequestCompleteness", "type": "object"}}}]}
{"messages": [{"role": "system", "content": "You are a workflow analysis agent that evaluates automation requests.\nYour goal is to determine if a workflow request contains enough core information to proceed with implementation.\n\nKey Guidelines:\n- Focus only on blocking/critical missing information\n- Make reasonable assumptions about company context when possible\n- Only flag missing information if it would completely prevent the workflow from being implemented\n- Accept general company references without requiring specific domain names\n- For document classifications, accept natural language descriptions\n- Consider the request complete if the core workflow logic is clear, even if some details could be configured later\n\nWhen evaluating completeness, ask:\n1. Is the basic workflow logic clear and actionable?\n2. Are the essential triggers and actions defined?\n3. Would an implementer understand the core goal?\n\nErr on the side of accepting requests as complete if the fundamental workflow is understandable.\n"}, {"role": "user", "content": "Looking for a way to handle interpreter scheduling requests. Want to give departments a Calendly link where they pick times they need an interpreter. Then automatically create a calendar event and email our interpreter contact list to see who's available. Using Google Calendar and Gmail now but it's all manual."}], "model": "deepseek-ai/DeepSeek-R1-Distill-Qwen-32B", "n": 1, "parallel_tool_calls": true, "stream": false, "tool_choice": "required", "tools": [{"type": "function", "function": {"name": "final_result", "description": "The final response which ends this conversation", "parameters": {"properties": {"is_complete": {"description": "Whether request has all needed information", "title": "Is Complete", "type": "boolean"}, "missing_info": {"anyOf": [{"items": {"type": "string"}, "type": "array"}, {"type": "null"}], "default": null, "description": "List of missing information pieces if incomplete", "title": "Missing Info"}, "clarifying_questions": {"anyOf": [{"items": {"type": "string"}, "type": "array"}, {"type": "null"}], "default": null, "description": "Questions to ask user if more information needed", "title": "Clarifying Questions"}, "parsed_request": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "description": "Clean version of request once complete", "title": "Parsed Request"}}, "required": ["is_complete"], "title": "RequestCompleteness", "type": "object"}}}]}
{"messages": [{"role": "system", "content": "You are a workflow analysis agent that evaluates automation requests.\nYour goal is to determine if a workflow request contains enough core information to proceed with implementation.\n\nKey Guidelines:\n- Focus only on blocking/critical missing information\n- Make reasonable assumptions about company context when possible\n- Only flag missing information if it would completely prevent the workflow from being implemented\n- Accept general company references without requiring specific domain names\n- For document classifications, accept natural language descriptions\n- Consider the request complete if the core workflow logic is clear, even if some details could be configured later\n\nWhen evaluating completeness, ask:\n1. Is the basic workflow logic clear and actionable?\n2. Are the essential triggers and actions defined?\n3. Would an implementer understand the core goal?\n\nErr on the side of accepting requests as complete if the fundamental workflow is understandable.\n"}, {"role": "user", "content": "Need help keeping track of all the family communications about our residents. Right now important emails and messages are scattered between Gmail and Teams - some staff miss critical updates about dietary changes or health concerns. Can you watch those channels and copy anything from families into a Notion page so all our staff can easily find the latest updates about any resident?"}], "model": "deepseek-ai/DeepSeek-R1-Distill-Qwen-32B", "n": 1, "parallel_tool_calls": true, "stream": false, "tool_choice": "required", "tools": [{"type": "function", "function": {"name": "final_result", "description": "The final response which ends this conversation", "parameters": {"properties": {"is_complete": {"description": "Whether request has all needed information", "title": "Is Complete", "type": "boolean"}, "missing_info": {"anyOf": [{"items": {"type": "string"}, "type": "array"}, {"type": "null"}], "default": null, "description": "List of missing information pieces if incomplete", "title": "Missing Info"}, "clarifying_questions": {"anyOf": [{"items": {"type": "string"}, "type": "array"}, {"type": "null"}], "default": null, "description": "Questions to ask user if more information needed", "title": "Clarifying Questions"}, "parsed_request": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "description": "Clean version of request once complete", "title": "Parsed Request"}}, "required": ["is_complete"], "title": "RequestCompleteness", "type": "object"}}}]}
{"messages": [{"role": "system", "content": "You are a workflow analysis agent that evaluates automation requests.\nYour goal is to determine if a workflow request contains enough core information to proceed with implementation.\n\nKey Guidelines:\n- Focus only on blocking/critical missing information\n- Make reasonable assumptions about company context when possible\n- Only flag missing information if it would completely prevent the workflow from being implemented\n- Accept general company references without requiring specific domain names\n- For document classifications, accept natural language descriptions\n- Consider the request complete if the core workflow logic is clear, even if some details could be configured later\n\nWhen evaluating completeness, ask:\n1. Is the basic workflow logic clear and actionable?\n2. Are the essential triggers and actions defined?\n3. Would an implementer understand the core goal?\n\nErr on the side of accepting requests as complete if the fundamental workflow is understandable.\n"}, {"role": "user", "content": "Need to automate the annoying part of my morning routine. I keep our shipping manifest in Google Sheets where my team updates tracking numbers and delivery status. Can you check that sheet every morning at 8am and shoot me a Teams message if we have more than 2 overdue deliveries? That way I can jump on carrier issues before the warehouse starts calling."}], "model": "deepseek-ai/DeepSeek-R1-Distill-Qwen-32B", "n": 1, "parallel_tool_calls": true, "stream": false, "tool_choice": "required", "tools": [{"type": "function", "function": {"name": "final_result", "description": "The final response which ends this conversation", "parameters": {"properties": {"is_complete": {"description": "Whether request has all needed information", "title": "Is Complete", "type": "boolean"}, "missing_info": {"anyOf": [{"items": {"type": "string"}, "type": "array"}, {"type": "null"}], "default": null, "description": "List of missing information pieces if incomplete", "title": "Missing Info"}, "clarifying_questions": {"anyOf": [{"items": {"type": "string"}, "type": "array"}, {"type": "null"}], "default": null, "description": "Questions to ask user if more information needed", "title": "Clarifying Questions"}, "parsed_request": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "description": "Clean version of request once complete", "title": "Parsed Request"}}, "required": ["is_complete"], "title": "RequestCompleteness", "type": "object"}}}]}
{"messages": [{"role": "system", "content": "You are a workflow analysis agent.\nYour task is to identify which apps are needed for this workflow.\nReturn ONLY app IDs from this available set:\n\nAvailable app IDs:\n['affinity', 'agencyzoom', 'ahrefs', 'airtable', 'anthropic', 'apollo', 'asana', 'attio', 'bamboohr', 'bitbucket', 'blackboard', 'brevo', 'browser_tool', 'browserbase_tool', 'cal', 'calendly', 'canva', 'canvas', 'clickup', 'code_analysis_tool', 'code_format_tool', 'codeinterpreter', 'composio', 'discord', 'discordbot', 'docusign', 'dropbox', 'dynamics365', 'elevenlabs', 'embed_tool', 'entelligence', 'exa', 'figma', 'filetool', 'firecrawl', 'freshdesk', 'git', 'github', 'gmail', 'google_maps', 'googlebigquery', 'googlecalendar', 'googledocs', 'googledrive', 'googlemeet', 'googlephotos', 'googlesheets', 'googletasks', 'greptile', 'hackernews', 'heygen', 'history_fetcher', 'hubspot', 'image_analyser', 'induced_ai', 'intercom', 'jira', 'junglescout', 'klaviyo', 'linear', 'linkedin', 'listennotes', 'lmnt', 'mailchimp', 'mathematical', 'mem0', 'microsoft_clarity', 'microsoft_teams', 'monday', 'multionai', 'neon', 'notion', 'one_drive', 'outlook', 'pagerduty', 'peopledatalabs', 'perplexityai', 'pipedrive', 'posthog', 'ragtool', 'reddit', 'retellai', 'rocketlane', 'salesforce', 'sendgrid', 'sentry', 'serpapi', 'share_point', 'shelltool', 'shopify', 'slack', 'slackbot', 'snowflake', 'spidertool', 'spotify', 'sqltool', 'stripe', 'supabase', 'tavily', 'trello', 'twitter', 'twitter_media', 'weathermap', 'webtool', 'workspace_tool', 'wrike', 'yousearch', 'youtube', 'zendesk', 'zenrows', 'zeptool', 'zoho', 'zoom', 'zoominfo']\n\nIdentify required apps from the request."}, {"role": "user", "content": "Automate checking Google Sheets for overdue deliveries and send Teams message if more than 2 are overdue."}], "model": "deepseek-ai/DeepSeek-R1-Distill-Qwen-32B", "n": 1, "parallel_tool_calls": true, "stream": false, "tool_choice": "required", "tools": [{"type": "function", "function": {"name": "final_result", "description": "The final response which ends this conversation", "parameters": {"properties": {"app_ids": {"description": "List of app IDs required for this workflow", "items": {"type": "string"}, "title": "App Ids", "type": "array"}}, "required": ["app_ids"], "title": "AppIdsResult", "type": "object"}}}]}
{"messages": [{"role": "system", "content": "You are a workflow analysis agent that evaluates automation requests.\nYour task is to analyze what actions from ONE SPECIFIC APP (googlesheets) are needed for this workflow.\n\nFocus ONLY on analyzing which actions from this app's registry are required. \nDo NOT consider actions needed from other apps - that will be handled separately.\n\nAvailable Actions for googlesheets:\n[ActionModel(name='GOOGLESHEETS_BATCH_GET', display_name='Batch Get Spreadsheet', parameters=ActionParametersModel(properties={'spreadsheet_id': {'description': 'The ID of the spreadsheet', 'title': 'Spreadsheet Id', 'type': 'string'}, 'ranges': {'default': None, 'description': \"List of ranges to retrieve in A1 notation, e.g. 'Sheet1!A1:B2'. If not specified, the filled part of the sheet will be returned if it is less than 100 rows and columns.\", 'examples': ['Sheet1!A1:B2', 'Sheet1!A:A', 'Sheet1!1:2', 'Sheet1!A5:A', 'A1:B2'], 'items': {'type': 'string'}, 'title': 'Ranges', 'type': 'array'}}, title='BatchGetRequest', type='object', required=['spreadsheet_id']), response=ActionResponseModel(properties={'spreadsheet_data': {'default': None, 'description': 'The retrieved spreadsheet data if successful', 'title': 'Spreadsheet Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='BatchGetResponse', type='object', required=['successful']), appName='googlesheets', appId='googlesheets', tags=[], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/google-sheets.svg', description='Perform A Batch Get On A Specific Spreadsheet.'), ActionModel(name='GOOGLESHEETS_BATCH_UPDATE', display_name='Batch Update Spreadsheet', parameters=ActionParametersModel(properties={'spreadsheet_id': {'description': 'The unique identifier of the Google Sheets spreadsheet to be updated', 'examples': ['1BxiMVs0XRA5nFMdKvBdBZjgmUUqptlbs74OgvE2upms'], 'title': 'Spreadsheet Id', 'type': 'string'}, 'sheet_name': {'description': 'The name of the specific sheet within the spreadsheet to update', 'examples': ['Sheet1'], 'title': 'Sheet Name', 'type': 'string'}, 'first_cell_location': {'default': None, 'description': \"The starting cell for the update range, specified in A1 notation (e.g., 'A1', 'B2'). The update will extend from this cell to the right and down, based on the provided values.\", 'examples': ['A1', 'D3'], 'title': 'First Cell Location', 'type': 'string'}, 'values': {'description': 'A 2D list representing the values to update. Each inner list corresponds to a row in the spreadsheet.', 'examples': [['Item', 'Cost', 'Stocked', 'Ship Date'], ['Wheel', '20.5', 'Yes', '2020-06-01'], ['Screw', '0.5', 'Yes', '2020-06-03'], ['Nut', '0.25', 'No', '2020-06-02']], 'items': {'items': {'type': 'string'}, 'type': 'array'}, 'title': 'Values', 'type': 'array'}, 'includeValuesInResponse': {'default': False, 'description': 'If set to True, the response will include the updated values from the spreadsheet', 'examples': [True, False], 'title': 'Includevaluesinresponse', 'type': 'boolean'}}, title='BatchUpdateRequest', type='object', required=['spreadsheet_id', 'sheet_name', 'values']), response=ActionResponseModel(properties={'spreadsheet': {'default': None, 'description': 'Contains the updated spreadsheet data if requested in the original request', 'title': 'Spreadsheet', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='BatchUpdateResponse', type='object', required=['successful']), appName='googlesheets', appId='googlesheets', tags=[], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/google-sheets.svg', description='Perform A Batch Update Operation On A Specified Google Sheets Spreadsheet.'), ActionModel(name='GOOGLESHEETS_GET_SPREADSHEET_INFO', display_name='Get Spreadsheet Info', parameters=ActionParametersModel(properties={'spreadsheet_id': {'description': 'ID of the Google Sheet to retrieve', 'title': 'Spreadsheet Id', 'type': 'string'}}, title='GetSpreadsheetInfoRequest', type='object', required=['spreadsheet_id']), response=ActionResponseModel(properties={'response_data': {'description': 'The full response data from the API', 'title': 'Response Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='GetSpreadsheetInfoResponse', type='object', required=['response_data', 'successful']), appName='googlesheets', appId='googlesheets', tags=[], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/google-sheets.svg', description='Retrieve Information About An Existing Google Sheet.'), ActionModel(name='GOOGLESHEETS_SHEET_FROM_JSON', display_name='Sheet From Json', parameters=ActionParametersModel(properties={'title': {'description': 'Title of the Google Sheet. Please ensure the title is mentioned.', 'title': 'Title', 'type': 'string'}, 'sheet_name': {'description': 'Name of the sheet to be created. Please ensure the name is mentioned.', 'title': 'Sheet Name', 'type': 'string'}, 'sheet_json': {'description': 'A list of dictionaries where each dictionary has the same keys.', 'examples': [[{'company': 'Gol', 'cost(in usd)': '20000', 'year': '2015'}, {'company': 'Palio', 'cost(in usd)': '15000', 'year': '2010'}]], 'items': {'additionalProperties': {'type': 'string'}, 'type': 'object'}, 'title': 'Sheet Json', 'type': 'array'}}, title='SheetFromJsonRequest', type='object', required=['title', 'sheet_name', 'sheet_json']), response=ActionResponseModel(properties={'response_data': {'description': 'The full response data from the API', 'title': 'Response Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='SheetFromJsonResponse', type='object', required=['response_data', 'successful']), appName='googlesheets', appId='googlesheets', tags=[], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/google-sheets.svg', description='Create A New Google Sheet From A Json Object.\\n This Action Takes A Json Structure And Converts It Into A Google Sheet Where:   The First Row Contains The Keys As Headers   Subsequent Rows Contain The Corresponding Values   All Rows Must Have The Same Structure (Keys)\\n Args:     Title (Str): The Title Of The New Google Sheet     Sheet Name (Str): Name Of The Worksheet Within The Spreadsheet     Sheet Json (List[Dict]): List Of Dictionaries With Consistent Keys'), ActionModel(name='GOOGLESHEETS_LOOKUP_SPREADSHEET_ROW', display_name='Lookup Spreadsheet Row', parameters=ActionParametersModel(properties={'spreadsheet_id': {'description': 'The ID of the spreadsheet', 'examples': ['1BiexwqQYjfC_BXy6zDQYJqb6zxzRyP9'], 'title': 'Spreadsheet Id', 'type': 'string'}, 'range': {'default': None, 'description': 'The A1 notation of the range to search.If not specified, it will return the non-empty part of the first sheet in the spreadsheet.Example: Sheet1!A1:D5.\\nPlease specify the range for large spreadsheets.', 'examples': ['Sheet1!A1:D5', 'Sheet1!A:Z'], 'title': 'Range', 'type': 'string'}, 'query': {'description': 'The search query to use for matching the row. This field is required.', 'examples': ['John'], 'title': 'Query', 'type': 'string'}}, title='LookupSpreadsheetRowRequest', type='object', required=['spreadsheet_id', 'query']), response=ActionResponseModel(properties={'row_data': {'default': None, 'description': 'The data of the found row', 'title': 'Row Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='LookupSpreadsheetRowResponse', type='object', required=['successful']), appName='googlesheets', appId='googlesheets', tags=[], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/google-sheets.svg', description='Lookup A Row In A Specific Spreadsheet By A Column And Value.'), ActionModel(name='GOOGLESHEETS_CREATE_GOOGLE_SHEET1', display_name='Create Google Sheet', parameters=ActionParametersModel(properties={'title': {'description': 'Title of the Google Sheet. Please ensure the title is mentioned.', 'title': 'Title', 'type': 'string'}}, title='CreateGoogleSheetRequest', type='object', required=['title']), response=ActionResponseModel(properties={'response_data': {'description': 'The full response data from the API', 'title': 'Response Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='CreateGoogleSheetResponse', type='object', required=['response_data', 'successful']), appName='googlesheets', appId='googlesheets', tags=[], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/google-sheets.svg', description='Create A New Google Sheet.'), ActionModel(name='GOOGLESHEETS_CLEAR_VALUES', display_name='Clear Spreadsheet Values', parameters=ActionParametersModel(properties={'spreadsheet_id': {'description': 'The ID of the spreadsheet', 'title': 'Spreadsheet Id', 'type': 'string'}, 'range': {'description': 'The A1 notation range to clear in the spreadsheet', 'title': 'Range', 'type': 'string'}}, title='ClearValuesRequest', type='object', required=['spreadsheet_id', 'range']), response=ActionResponseModel(properties={'response_data': {'default': None, 'description': 'Response of the operation', 'title': 'Response Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='ClearValuesResponse', type='object', required=['successful']), appName='googlesheets', appId='googlesheets', tags=[], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/google-sheets.svg', description='Clear Values From A Specified Range In A Spreadsheet.')]\n\nFor the following request, determine:\n1. Which specific actions from googlesheets's registry are needed (if any)\n2. What each action's purpose would be in the workflow\n3. If this app's actions alone aren't sufficient for its part in the workflow, explain why\n\nRemember: Focus only on googlesheets's capabilities - ignore requirements for other apps."}, {"role": "user", "content": "Automate checking Google Sheets for overdue deliveries and send Teams message if more than 2 are overdue."}], "model": "deepseek-ai/DeepSeek-R1-Distill-Qwen-32B", "n": 1, "parallel_tool_calls": true, "stream": false, "tool_choice": "required", "tools": [{"type": "function", "function": {"name": "final_result", "description": "The final response which ends this conversation", "parameters": {"$defs": {"ActionRequirement": {"properties": {"app_id": {"description": "ID of the required application", "title": "App Id", "type": "string"}, "action_name": {"description": "Name of the required action", "title": "Action Name", "type": "string"}, "purpose": {"description": "Why this action is needed in the workflow", "title": "Purpose", "type": "string"}}, "required": ["app_id", "action_name", "purpose"], "title": "ActionRequirement", "type": "object"}}, "properties": {"feasible": {"description": "Whether request can be implemented with available actions", "title": "Feasible", "type": "boolean"}, "required_actions": {"anyOf": [{"items": {"$ref": "#/$defs/ActionRequirement"}, "type": "array"}, {"type": "null"}], "default": null, "description": "List of required actions if feasible", "title": "Required Actions"}, "infeasible_reason": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "description": "Detailed explanation if request is not feasible", "title": "Infeasible Reason"}}, "required": ["feasible"], "title": "ActionFeasibilityResult", "type": "object"}}}]}
{"messages": [{"role": "system", "content": "You are a workflow analysis agent that evaluates automation requests.\nYour task is to analyze what actions from ONE SPECIFIC APP (googlesheets) are needed for this workflow.\n\nFocus ONLY on analyzing which actions from this app's registry are required. \nDo NOT consider actions needed from other apps - that will be handled separately.\n\nAvailable Actions for googlesheets:\n[ActionModel(name='GOOGLESHEETS_BATCH_GET', display_name='Batch Get Spreadsheet', parameters=ActionParametersModel(properties={'spreadsheet_id': {'description': 'The ID of the spreadsheet', 'title': 'Spreadsheet Id', 'type': 'string'}, 'ranges': {'default': None, 'description': \"List of ranges to retrieve in A1 notation, e.g. 'Sheet1!A1:B2'. If not specified, the filled part of the sheet will be returned if it is less than 100 rows and columns.\", 'examples': ['Sheet1!A1:B2', 'Sheet1!A:A', 'Sheet1!1:2', 'Sheet1!A5:A', 'A1:B2'], 'items': {'type': 'string'}, 'title': 'Ranges', 'type': 'array'}}, title='BatchGetRequest', type='object', required=['spreadsheet_id']), response=ActionResponseModel(properties={'spreadsheet_data': {'default': None, 'description': 'The retrieved spreadsheet data if successful', 'title': 'Spreadsheet Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='BatchGetResponse', type='object', required=['successful']), appName='googlesheets', appId='googlesheets', tags=[], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/google-sheets.svg', description='Perform A Batch Get On A Specific Spreadsheet.'), ActionModel(name='GOOGLESHEETS_BATCH_UPDATE', display_name='Batch Update Spreadsheet', parameters=ActionParametersModel(properties={'spreadsheet_id': {'description': 'The unique identifier of the Google Sheets spreadsheet to be updated', 'examples': ['1BxiMVs0XRA5nFMdKvBdBZjgmUUqptlbs74OgvE2upms'], 'title': 'Spreadsheet Id', 'type': 'string'}, 'sheet_name': {'description': 'The name of the specific sheet within the spreadsheet to update', 'examples': ['Sheet1'], 'title': 'Sheet Name', 'type': 'string'}, 'first_cell_location': {'default': None, 'description': \"The starting cell for the update range, specified in A1 notation (e.g., 'A1', 'B2'). The update will extend from this cell to the right and down, based on the provided values.\", 'examples': ['A1', 'D3'], 'title': 'First Cell Location', 'type': 'string'}, 'values': {'description': 'A 2D list representing the values to update. Each inner list corresponds to a row in the spreadsheet.', 'examples': [['Item', 'Cost', 'Stocked', 'Ship Date'], ['Wheel', '20.5', 'Yes', '2020-06-01'], ['Screw', '0.5', 'Yes', '2020-06-03'], ['Nut', '0.25', 'No', '2020-06-02']], 'items': {'items': {'type': 'string'}, 'type': 'array'}, 'title': 'Values', 'type': 'array'}, 'includeValuesInResponse': {'default': False, 'description': 'If set to True, the response will include the updated values from the spreadsheet', 'examples': [True, False], 'title': 'Includevaluesinresponse', 'type': 'boolean'}}, title='BatchUpdateRequest', type='object', required=['spreadsheet_id', 'sheet_name', 'values']), response=ActionResponseModel(properties={'spreadsheet': {'default': None, 'description': 'Contains the updated spreadsheet data if requested in the original request', 'title': 'Spreadsheet', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='BatchUpdateResponse', type='object', required=['successful']), appName='googlesheets', appId='googlesheets', tags=[], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/google-sheets.svg', description='Perform A Batch Update Operation On A Specified Google Sheets Spreadsheet.'), ActionModel(name='GOOGLESHEETS_GET_SPREADSHEET_INFO', display_name='Get Spreadsheet Info', parameters=ActionParametersModel(properties={'spreadsheet_id': {'description': 'ID of the Google Sheet to retrieve', 'title': 'Spreadsheet Id', 'type': 'string'}}, title='GetSpreadsheetInfoRequest', type='object', required=['spreadsheet_id']), response=ActionResponseModel(properties={'response_data': {'description': 'The full response data from the API', 'title': 'Response Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='GetSpreadsheetInfoResponse', type='object', required=['response_data', 'successful']), appName='googlesheets', appId='googlesheets', tags=[], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/google-sheets.svg', description='Retrieve Information About An Existing Google Sheet.'), ActionModel(name='GOOGLESHEETS_SHEET_FROM_JSON', display_name='Sheet From Json', parameters=ActionParametersModel(properties={'title': {'description': 'Title of the Google Sheet. Please ensure the title is mentioned.', 'title': 'Title', 'type': 'string'}, 'sheet_name': {'description': 'Name of the sheet to be created. Please ensure the name is mentioned.', 'title': 'Sheet Name', 'type': 'string'}, 'sheet_json': {'description': 'A list of dictionaries where each dictionary has the same keys.', 'examples': [[{'company': 'Gol', 'cost(in usd)': '20000', 'year': '2015'}, {'company': 'Palio', 'cost(in usd)': '15000', 'year': '2010'}]], 'items': {'additionalProperties': {'type': 'string'}, 'type': 'object'}, 'title': 'Sheet Json', 'type': 'array'}}, title='SheetFromJsonRequest', type='object', required=['title', 'sheet_name', 'sheet_json']), response=ActionResponseModel(properties={'response_data': {'description': 'The full response data from the API', 'title': 'Response Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='SheetFromJsonResponse', type='object', required=['response_data', 'successful']), appName='googlesheets', appId='googlesheets', tags=[], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/google-sheets.svg', description='Create A New Google Sheet From A Json Object.\\n This Action Takes A Json Structure And Converts It Into A Google Sheet Where:   The First Row Contains The Keys As Headers   Subsequent Rows Contain The Corresponding Values   All Rows Must Have The Same Structure (Keys)\\n Args:     Title (Str): The Title Of The New Google Sheet     Sheet Name (Str): Name Of The Worksheet Within The Spreadsheet     Sheet Json (List[Dict]): List Of Dictionaries With Consistent Keys'), ActionModel(name='GOOGLESHEETS_LOOKUP_SPREADSHEET_ROW', display_name='Lookup Spreadsheet Row', parameters=ActionParametersModel(properties={'spreadsheet_id': {'description': 'The ID of the spreadsheet', 'examples': ['1BiexwqQYjfC_BXy6zDQYJqb6zxzRyP9'], 'title': 'Spreadsheet Id', 'type': 'string'}, 'range': {'default': None, 'description': 'The A1 notation of the range to search.If not specified, it will return the non-empty part of the first sheet in the spreadsheet.Example: Sheet1!A1:D5.\\nPlease specify the range for large spreadsheets.', 'examples': ['Sheet1!A1:D5', 'Sheet1!A:Z'], 'title': 'Range', 'type': 'string'}, 'query': {'description': 'The search query to use for matching the row. This field is required.', 'examples': ['John'], 'title': 'Query', 'type': 'string'}}, title='LookupSpreadsheetRowRequest', type='object', required=['spreadsheet_id', 'query']), response=ActionResponseModel(properties={'row_data': {'default': None, 'description': 'The data of the found row', 'title': 'Row Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='LookupSpreadsheetRowResponse', type='object', required=['successful']), appName='googlesheets', appId='googlesheets', tags=[], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/google-sheets.svg', description='Lookup A Row In A Specific Spreadsheet By A Column And Value.'), ActionModel(name='GOOGLESHEETS_CREATE_GOOGLE_SHEET1', display_name='Create Google Sheet', parameters=ActionParametersModel(properties={'title': {'description': 'Title of the Google Sheet. Please ensure the title is mentioned.', 'title': 'Title', 'type': 'string'}}, title='CreateGoogleSheetRequest', type='object', required=['title']), response=ActionResponseModel(properties={'response_data': {'description': 'The full response data from the API', 'title': 'Response Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='CreateGoogleSheetResponse', type='object', required=['response_data', 'successful']), appName='googlesheets', appId='googlesheets', tags=[], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/google-sheets.svg', description='Create A New Google Sheet.'), ActionModel(name='GOOGLESHEETS_CLEAR_VALUES', display_name='Clear Spreadsheet Values', parameters=ActionParametersModel(properties={'spreadsheet_id': {'description': 'The ID of the spreadsheet', 'title': 'Spreadsheet Id', 'type': 'string'}, 'range': {'description': 'The A1 notation range to clear in the spreadsheet', 'title': 'Range', 'type': 'string'}}, title='ClearValuesRequest', type='object', required=['spreadsheet_id', 'range']), response=ActionResponseModel(properties={'response_data': {'default': None, 'description': 'Response of the operation', 'title': 'Response Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='ClearValuesResponse', type='object', required=['successful']), appName='googlesheets', appId='googlesheets', tags=[], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/google-sheets.svg', description='Clear Values From A Specified Range In A Spreadsheet.')]\n\nFor the following request, determine:\n1. Which specific actions from googlesheets's registry are needed (if any)\n2. What each action's purpose would be in the workflow\n3. If this app's actions alone aren't sufficient for its part in the workflow, explain why\n\nRemember: Focus only on googlesheets's capabilities - ignore requirements for other apps."}, {"role": "user", "content": "Automate checking Google Sheets for overdue deliveries and send Teams message if more than 2 are overdue."}], "model": "deepseek-ai/DeepSeek-R1-Distill-Qwen-32B", "n": 1, "parallel_tool_calls": true, "stream": false, "tool_choice": "required", "tools": [{"type": "function", "function": {"name": "final_result", "description": "The final response which ends this conversation", "parameters": {"$defs": {"ActionRequirement": {"properties": {"app_id": {"description": "ID of the required application", "title": "App Id", "type": "string"}, "action_name": {"description": "Name of the required action", "title": "Action Name", "type": "string"}, "purpose": {"description": "Why this action is needed in the workflow", "title": "Purpose", "type": "string"}}, "required": ["app_id", "action_name", "purpose"], "title": "ActionRequirement", "type": "object"}}, "properties": {"feasible": {"description": "Whether request can be implemented with available actions", "title": "Feasible", "type": "boolean"}, "required_actions": {"anyOf": [{"items": {"$ref": "#/$defs/ActionRequirement"}, "type": "array"}, {"type": "null"}], "default": null, "description": "List of required actions if feasible", "title": "Required Actions"}, "infeasible_reason": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "description": "Detailed explanation if request is not feasible", "title": "Infeasible Reason"}}, "required": ["feasible"], "title": "ActionFeasibilityResult", "type": "object"}}}]}
{"messages": [{"role": "system", "content": "You are a workflow analysis agent that evaluates automation requests.\nYour task is to analyze what actions from ONE SPECIFIC APP (googlesheets) are needed for this workflow.\n\nFocus ONLY on analyzing which actions from this app's registry are required. \nDo NOT consider actions needed from other apps - that will be handled separately.\n\nAvailable Actions for googlesheets:\n[ActionModel(name='GOOGLESHEETS_BATCH_GET', display_name='Batch Get Spreadsheet', parameters=ActionParametersModel(properties={'spreadsheet_id': {'description': 'The ID of the spreadsheet', 'title': 'Spreadsheet Id', 'type': 'string'}, 'ranges': {'default': None, 'description': \"List of ranges to retrieve in A1 notation, e.g. 'Sheet1!A1:B2'. If not specified, the filled part of the sheet will be returned if it is less than 100 rows and columns.\", 'examples': ['Sheet1!A1:B2', 'Sheet1!A:A', 'Sheet1!1:2', 'Sheet1!A5:A', 'A1:B2'], 'items': {'type': 'string'}, 'title': 'Ranges', 'type': 'array'}}, title='BatchGetRequest', type='object', required=['spreadsheet_id']), response=ActionResponseModel(properties={'spreadsheet_data': {'default': None, 'description': 'The retrieved spreadsheet data if successful', 'title': 'Spreadsheet Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='BatchGetResponse', type='object', required=['successful']), appName='googlesheets', appId='googlesheets', tags=[], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/google-sheets.svg', description='Perform A Batch Get On A Specific Spreadsheet.'), ActionModel(name='GOOGLESHEETS_BATCH_UPDATE', display_name='Batch Update Spreadsheet', parameters=ActionParametersModel(properties={'spreadsheet_id': {'description': 'The unique identifier of the Google Sheets spreadsheet to be updated', 'examples': ['1BxiMVs0XRA5nFMdKvBdBZjgmUUqptlbs74OgvE2upms'], 'title': 'Spreadsheet Id', 'type': 'string'}, 'sheet_name': {'description': 'The name of the specific sheet within the spreadsheet to update', 'examples': ['Sheet1'], 'title': 'Sheet Name', 'type': 'string'}, 'first_cell_location': {'default': None, 'description': \"The starting cell for the update range, specified in A1 notation (e.g., 'A1', 'B2'). The update will extend from this cell to the right and down, based on the provided values.\", 'examples': ['A1', 'D3'], 'title': 'First Cell Location', 'type': 'string'}, 'values': {'description': 'A 2D list representing the values to update. Each inner list corresponds to a row in the spreadsheet.', 'examples': [['Item', 'Cost', 'Stocked', 'Ship Date'], ['Wheel', '20.5', 'Yes', '2020-06-01'], ['Screw', '0.5', 'Yes', '2020-06-03'], ['Nut', '0.25', 'No', '2020-06-02']], 'items': {'items': {'type': 'string'}, 'type': 'array'}, 'title': 'Values', 'type': 'array'}, 'includeValuesInResponse': {'default': False, 'description': 'If set to True, the response will include the updated values from the spreadsheet', 'examples': [True, False], 'title': 'Includevaluesinresponse', 'type': 'boolean'}}, title='BatchUpdateRequest', type='object', required=['spreadsheet_id', 'sheet_name', 'values']), response=ActionResponseModel(properties={'spreadsheet': {'default': None, 'description': 'Contains the updated spreadsheet data if requested in the original request', 'title': 'Spreadsheet', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='BatchUpdateResponse', type='object', required=['successful']), appName='googlesheets', appId='googlesheets', tags=[], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/google-sheets.svg', description='Perform A Batch Update Operation On A Specified Google Sheets Spreadsheet.'), ActionModel(name='GOOGLESHEETS_GET_SPREADSHEET_INFO', display_name='Get Spreadsheet Info', parameters=ActionParametersModel(properties={'spreadsheet_id': {'description': 'ID of the Google Sheet to retrieve', 'title': 'Spreadsheet Id', 'type': 'string'}}, title='GetSpreadsheetInfoRequest', type='object', required=['spreadsheet_id']), response=ActionResponseModel(properties={'response_data': {'description': 'The full response data from the API', 'title': 'Response Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='GetSpreadsheetInfoResponse', type='object', required=['response_data', 'successful']), appName='googlesheets', appId='googlesheets', tags=[], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/google-sheets.svg', description='Retrieve Information About An Existing Google Sheet.'), ActionModel(name='GOOGLESHEETS_SHEET_FROM_JSON', display_name='Sheet From Json', parameters=ActionParametersModel(properties={'title': {'description': 'Title of the Google Sheet. Please ensure the title is mentioned.', 'title': 'Title', 'type': 'string'}, 'sheet_name': {'description': 'Name of the sheet to be created. Please ensure the name is mentioned.', 'title': 'Sheet Name', 'type': 'string'}, 'sheet_json': {'description': 'A list of dictionaries where each dictionary has the same keys.', 'examples': [[{'company': 'Gol', 'cost(in usd)': '20000', 'year': '2015'}, {'company': 'Palio', 'cost(in usd)': '15000', 'year': '2010'}]], 'items': {'additionalProperties': {'type': 'string'}, 'type': 'object'}, 'title': 'Sheet Json', 'type': 'array'}}, title='SheetFromJsonRequest', type='object', required=['title', 'sheet_name', 'sheet_json']), response=ActionResponseModel(properties={'response_data': {'description': 'The full response data from the API', 'title': 'Response Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='SheetFromJsonResponse', type='object', required=['response_data', 'successful']), appName='googlesheets', appId='googlesheets', tags=[], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/google-sheets.svg', description='Create A New Google Sheet From A Json Object.\\n This Action Takes A Json Structure And Converts It Into A Google Sheet Where:   The First Row Contains The Keys As Headers   Subsequent Rows Contain The Corresponding Values   All Rows Must Have The Same Structure (Keys)\\n Args:     Title (Str): The Title Of The New Google Sheet     Sheet Name (Str): Name Of The Worksheet Within The Spreadsheet     Sheet Json (List[Dict]): List Of Dictionaries With Consistent Keys'), ActionModel(name='GOOGLESHEETS_LOOKUP_SPREADSHEET_ROW', display_name='Lookup Spreadsheet Row', parameters=ActionParametersModel(properties={'spreadsheet_id': {'description': 'The ID of the spreadsheet', 'examples': ['1BiexwqQYjfC_BXy6zDQYJqb6zxzRyP9'], 'title': 'Spreadsheet Id', 'type': 'string'}, 'range': {'default': None, 'description': 'The A1 notation of the range to search.If not specified, it will return the non-empty part of the first sheet in the spreadsheet.Example: Sheet1!A1:D5.\\nPlease specify the range for large spreadsheets.', 'examples': ['Sheet1!A1:D5', 'Sheet1!A:Z'], 'title': 'Range', 'type': 'string'}, 'query': {'description': 'The search query to use for matching the row. This field is required.', 'examples': ['John'], 'title': 'Query', 'type': 'string'}}, title='LookupSpreadsheetRowRequest', type='object', required=['spreadsheet_id', 'query']), response=ActionResponseModel(properties={'row_data': {'default': None, 'description': 'The data of the found row', 'title': 'Row Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='LookupSpreadsheetRowResponse', type='object', required=['successful']), appName='googlesheets', appId='googlesheets', tags=[], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/google-sheets.svg', description='Lookup A Row In A Specific Spreadsheet By A Column And Value.'), ActionModel(name='GOOGLESHEETS_CREATE_GOOGLE_SHEET1', display_name='Create Google Sheet', parameters=ActionParametersModel(properties={'title': {'description': 'Title of the Google Sheet. Please ensure the title is mentioned.', 'title': 'Title', 'type': 'string'}}, title='CreateGoogleSheetRequest', type='object', required=['title']), response=ActionResponseModel(properties={'response_data': {'description': 'The full response data from the API', 'title': 'Response Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='CreateGoogleSheetResponse', type='object', required=['response_data', 'successful']), appName='googlesheets', appId='googlesheets', tags=[], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/google-sheets.svg', description='Create A New Google Sheet.'), ActionModel(name='GOOGLESHEETS_CLEAR_VALUES', display_name='Clear Spreadsheet Values', parameters=ActionParametersModel(properties={'spreadsheet_id': {'description': 'The ID of the spreadsheet', 'title': 'Spreadsheet Id', 'type': 'string'}, 'range': {'description': 'The A1 notation range to clear in the spreadsheet', 'title': 'Range', 'type': 'string'}}, title='ClearValuesRequest', type='object', required=['spreadsheet_id', 'range']), response=ActionResponseModel(properties={'response_data': {'default': None, 'description': 'Response of the operation', 'title': 'Response Data', 'type': 'object'}, 'successful': {'description': 'Whether or not the action execution was successful or not', 'title': 'Successful', 'type': 'boolean'}, 'error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'description': 'Error if any occurred during the execution of the action', 'title': 'Error'}}, title='ClearValuesResponse', type='object', required=['successful']), appName='googlesheets', appId='googlesheets', tags=[], enabled=False, logo='https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/google-sheets.svg', description='Clear Values From A Specified Range In A Spreadsheet.')]\n\nFor the following request, determine:\n1. Which specific actions from googlesheets's registry are needed (if any)\n2. What each action's purpose would be in the workflow\n3. If this app's actions alone aren't sufficient for its part in the workflow, explain why\n\nRemember: Focus only on googlesheets's capabilities - ignore requirements for other apps."}, {"role": "user", "content": "Automate checking Google Sheets for overdue deliveries and send Teams message if more than 2 are overdue."}], "model": "deepseek-ai/DeepSeek-R1-Distill-Qwen-32B", "n": 1, "parallel_tool_calls": true, "stream": false, "tool_choice": "required", "tools": [{"type": "function", "function": {"name": "final_result", "description": "The final response which ends this conversation", "parameters": {"$defs": {"ActionRequirement": {"properties": {"app_id": {"description": "ID of the required application", "title": "App Id", "type": "string"}, "action_name": {"description": "Name of the required action", "title": "Action Name", "type": "string"}, "purpose": {"description": "Why this action is needed in the workflow", "title": "Purpose", "type": "string"}}, "required": ["app_id", "action_name", "purpose"], "title": "ActionRequirement", "type": "object"}}, "properties": {"feasible": {"description": "Whether request can be implemented with available actions", "title": "Feasible", "type": "boolean"}, "required_actions": {"anyOf": [{"items": {"$ref": "#/$defs/ActionRequirement"}, "type": "array"}, {"type": "null"}], "default": null, "description": "List of required actions if feasible", "title": "Required Actions"}, "infeasible_reason": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "description": "Detailed explanation if request is not feasible", "title": "Infeasible Reason"}}, "required": ["feasible"], "title": "ActionFeasibilityResult", "type": "object"}}}]}
{"messages": [{"role": "system", "content": "You are a workflow analysis agent that evaluates automation requests.\nYour goal is to determine if a workflow request contains enough core information to proceed with implementation.\n\nKey Guidelines:\n- Focus only on blocking/critical missing information\n- Make reasonable assumptions about company context when possible\n- Only flag missing information if it would completely prevent the workflow from being implemented\n- Accept general company references without requiring specific domain names\n- For document classifications, accept natural language descriptions\n- Consider the request complete if the core workflow logic is clear, even if some details could be configured later\n\nWhen evaluating completeness, ask:\n1. Is the basic workflow logic clear and actionable?\n2. Are the essential triggers and actions defined?\n3. Would an implementer understand the core goal?\n\nErr on the side of accepting requests as complete if the fundamental workflow is understandable.\n"}, {"role": "user", "content": "Need to streamline my competitor analysis for strategy cases. Want to automatically pull traffic data from ahrefs when I input a company name - stuff like their top performing content, traffic trends, and what keywords they're ranking for. Just the key metrics I can use to analyze their digital presence. Can save the reports to Google Drive so I have everything in one place for my case write-ups."}], "model": "deepseek-ai/DeepSeek-R1-Distill-Qwen-32B", "n": 1, "parallel_tool_calls": true, "stream": false, "tool_choice": "required", "tools": [{"type": "function", "function": {"name": "final_result", "description": "The final response which ends this conversation", "parameters": {"properties": {"is_complete": {"description": "Whether request has all needed information", "title": "Is Complete", "type": "boolean"}, "missing_info": {"anyOf": [{"items": {"type": "string"}, "type": "array"}, {"type": "null"}], "default": null, "description": "List of missing information pieces if incomplete", "title": "Missing Info"}, "clarifying_questions": {"anyOf": [{"items": {"type": "string"}, "type": "array"}, {"type": "null"}], "default": null, "description": "Questions to ask user if more information needed", "title": "Clarifying Questions"}, "parsed_request": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "description": "Clean version of request once complete", "title": "Parsed Request"}}, "required": ["is_complete"], "title": "RequestCompleteness", "type": "object"}}}]}
{"messages": [{"role": "system", "content": "You are a workflow analysis agent that evaluates automation requests.\nYour goal is to determine if a workflow request contains enough core information to proceed with implementation.\n\nKey Guidelines:\n- Focus only on blocking/critical missing information\n- Make reasonable assumptions about company context when possible\n- Only flag missing information if it would completely prevent the workflow from being implemented\n- Accept general company references without requiring specific domain names\n- For document classifications, accept natural language descriptions\n- Consider the request complete if the core workflow logic is clear, even if some details could be configured later\n\nWhen evaluating completeness, ask:\n1. Is the basic workflow logic clear and actionable?\n2. Are the essential triggers and actions defined?\n3. Would an implementer understand the core goal?\n\nErr on the side of accepting requests as complete if the fundamental workflow is understandable.\n"}, {"role": "user", "content": "Need to streamline my competitor analysis for strategy cases. Want to automatically pull traffic data from ahrefs when I input a company name - stuff like their top performing content, traffic trends, and what keywords they're ranking for. Just the key metrics I can use to analyze their digital presence. Can save the reports to Google Drive so I have everything in one place for my case write-ups."}], "model": "deepseek-ai/DeepSeek-R1-Distill-Qwen-32B", "n": 1, "parallel_tool_calls": true, "stream": false, "tool_choice": "required", "tools": [{"type": "function", "function": {"name": "final_result", "description": "The final response which ends this conversation", "parameters": {"properties": {"is_complete": {"description": "Whether request has all needed information", "title": "Is Complete", "type": "boolean"}, "missing_info": {"anyOf": [{"items": {"type": "string"}, "type": "array"}, {"type": "null"}], "default": null, "description": "List of missing information pieces if incomplete", "title": "Missing Info"}, "clarifying_questions": {"anyOf": [{"items": {"type": "string"}, "type": "array"}, {"type": "null"}], "default": null, "description": "Questions to ask user if more information needed", "title": "Clarifying Questions"}, "parsed_request": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "description": "Clean version of request once complete", "title": "Parsed Request"}}, "required": ["is_complete"], "title": "RequestCompleteness", "type": "object"}}}]}
{"messages": [{"role": "system", "content": "You are a workflow analysis agent that evaluates automation requests.\nYour goal is to determine if a workflow request contains enough core information to proceed with implementation.\n\nKey Guidelines:\n- Focus only on blocking/critical missing information\n- Make reasonable assumptions about company context when possible\n- Only flag missing information if it would completely prevent the workflow from being implemented\n- Accept general company references without requiring specific domain names\n- For document classifications, accept natural language descriptions\n- Consider the request complete if the core workflow logic is clear, even if some details could be configured later\n\nWhen evaluating completeness, ask:\n1. Is the basic workflow logic clear and actionable?\n2. Are the essential triggers and actions defined?\n3. Would an implementer understand the core goal?\n\nErr on the side of accepting requests as complete if the fundamental workflow is understandable.\n"}, {"role": "user", "content": "Need to streamline my competitor analysis for strategy cases. Want to automatically pull traffic data from ahrefs when I input a company name - stuff like their top performing content, traffic trends, and what keywords they're ranking for. Just the key metrics I can use to analyze their digital presence. Can save the reports to Google Drive so I have everything in one place for my case write-ups."}], "model": "deepseek-ai/DeepSeek-R1-Distill-Qwen-32B", "n": 1, "parallel_tool_calls": true, "stream": false, "tool_choice": "required", "tools": [{"type": "function", "function": {"name": "final_result", "description": "The final response which ends this conversation", "parameters": {"properties": {"is_complete": {"description": "Whether request has all needed information", "title": "Is Complete", "type": "boolean"}, "missing_info": {"anyOf": [{"items": {"type": "string"}, "type": "array"}, {"type": "null"}], "default": null, "description": "List of missing information pieces if incomplete", "title": "Missing Info"}, "clarifying_questions": {"anyOf": [{"items": {"type": "string"}, "type": "array"}, {"type": "null"}], "default": null, "description": "Questions to ask user if more information needed", "title": "Clarifying Questions"}, "parsed_request": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "description": "Clean version of request once complete", "title": "Parsed Request"}}, "required": ["is_complete"], "title": "RequestCompleteness", "type": "object"}}}]}
{"messages": [{"role": "system", "content": "You are a workflow analysis agent that evaluates automation requests.\nYour goal is to determine if a workflow request contains enough core information to proceed with implementation.\n\nKey Guidelines:\n- Focus only on blocking/critical missing information\n- Make reasonable assumptions about company context when possible\n- Only flag missing information if it would completely prevent the workflow from being implemented\n- Accept general company references without requiring specific domain names\n- For document classifications, accept natural language descriptions\n- Consider the request complete if the core workflow logic is clear, even if some details could be configured later\n\nWhen evaluating completeness, ask:\n1. Is the basic workflow logic clear and actionable?\n2. Are the essential triggers and actions defined?\n3. Would an implementer understand the core goal?\n\nErr on the side of accepting requests as complete if the fundamental workflow is understandable.\n"}, {"role": "user", "content": "When I need to check out a location for an investigation, I waste time copying addresses between my case notes and Maps. Just want something that lets me highlight an address in my Google Doc and instantly save it as a pinned location in Maps, maybe with a quick note about which case it's for."}], "model": "deepseek-ai/DeepSeek-R1-Distill-Qwen-32B", "n": 1, "parallel_tool_calls": true, "stream": false, "tool_choice": "required", "tools": [{"type": "function", "function": {"name": "final_result", "description": "The final response which ends this conversation", "parameters": {"properties": {"is_complete": {"description": "Whether request has all needed information", "title": "Is Complete", "type": "boolean"}, "missing_info": {"anyOf": [{"items": {"type": "string"}, "type": "array"}, {"type": "null"}], "default": null, "description": "List of missing information pieces if incomplete", "title": "Missing Info"}, "clarifying_questions": {"anyOf": [{"items": {"type": "string"}, "type": "array"}, {"type": "null"}], "default": null, "description": "Questions to ask user if more information needed", "title": "Clarifying Questions"}, "parsed_request": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "description": "Clean version of request once complete", "title": "Parsed Request"}}, "required": ["is_complete"], "title": "RequestCompleteness", "type": "object"}}}]}
{"messages": [{"role": "system", "content": "You are a workflow analysis agent that evaluates automation requests.\nYour goal is to determine if a workflow request contains enough core information to proceed with implementation.\n\nKey Guidelines:\n- Focus only on blocking/critical missing information\n- Make reasonable assumptions about company context when possible\n- Only flag missing information if it would completely prevent the workflow from being implemented\n- Accept general company references without requiring specific domain names\n- For document classifications, accept natural language descriptions\n- Consider the request complete if the core workflow logic is clear, even if some details could be configured later\n\nWhen evaluating completeness, ask:\n1. Is the basic workflow logic clear and actionable?\n2. Are the essential triggers and actions defined?\n3. Would an implementer understand the core goal?\n\nErr on the side of accepting requests as complete if the fundamental workflow is understandable.\n"}, {"role": "user", "content": "When I need to check out a location for an investigation, I waste time copying addresses between my case notes and Maps. Just want something that lets me highlight an address in my Google Doc and instantly save it as a pinned location in Maps, maybe with a quick note about which case it's for."}], "model": "deepseek-ai/DeepSeek-R1-Distill-Qwen-32B", "n": 1, "parallel_tool_calls": true, "stream": false, "tool_choice": "required", "tools": [{"type": "function", "function": {"name": "final_result", "description": "The final response which ends this conversation", "parameters": {"properties": {"is_complete": {"description": "Whether request has all needed information", "title": "Is Complete", "type": "boolean"}, "missing_info": {"anyOf": [{"items": {"type": "string"}, "type": "array"}, {"type": "null"}], "default": null, "description": "List of missing information pieces if incomplete", "title": "Missing Info"}, "clarifying_questions": {"anyOf": [{"items": {"type": "string"}, "type": "array"}, {"type": "null"}], "default": null, "description": "Questions to ask user if more information needed", "title": "Clarifying Questions"}, "parsed_request": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "description": "Clean version of request once complete", "title": "Parsed Request"}}, "required": ["is_complete"], "title": "RequestCompleteness", "type": "object"}}}]}
{"messages": [{"role": "system", "content": "You are a workflow analysis agent that evaluates automation requests.\nYour goal is to determine if a workflow request contains enough core information to proceed with implementation.\n\nKey Guidelines:\n- Focus only on blocking/critical missing information\n- Make reasonable assumptions about company context when possible\n- Only flag missing information if it would completely prevent the workflow from being implemented\n- Accept general company references without requiring specific domain names\n- For document classifications, accept natural language descriptions\n- Consider the request complete if the core workflow logic is clear, even if some details could be configured later\n\nWhen evaluating completeness, ask:\n1. Is the basic workflow logic clear and actionable?\n2. Are the essential triggers and actions defined?\n3. Would an implementer understand the core goal?\n\nErr on the side of accepting requests as complete if the fundamental workflow is understandable.\n"}, {"role": "user", "content": "When I need to check out a location for an investigation, I waste time copying addresses between my case notes and Maps. Just want something that lets me highlight an address in my Google Doc and instantly save it as a pinned location in Maps, maybe with a quick note about which case it's for."}], "model": "deepseek-ai/DeepSeek-R1-Distill-Qwen-32B", "n": 1, "parallel_tool_calls": true, "stream": false, "tool_choice": "required", "tools": [{"type": "function", "function": {"name": "final_result", "description": "The final response which ends this conversation", "parameters": {"properties": {"is_complete": {"description": "Whether request has all needed information", "title": "Is Complete", "type": "boolean"}, "missing_info": {"anyOf": [{"items": {"type": "string"}, "type": "array"}, {"type": "null"}], "default": null, "description": "List of missing information pieces if incomplete", "title": "Missing Info"}, "clarifying_questions": {"anyOf": [{"items": {"type": "string"}, "type": "array"}, {"type": "null"}], "default": null, "description": "Questions to ask user if more information needed", "title": "Clarifying Questions"}, "parsed_request": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "description": "Clean version of request once complete", "title": "Parsed Request"}}, "required": ["is_complete"], "title": "RequestCompleteness", "type": "object"}}}]}
{"messages": [{"role": "system", "content": "You are a workflow analysis agent that evaluates automation requests.\nYour goal is to determine if a workflow request contains enough core information to proceed with implementation.\n\nKey Guidelines:\n- Focus only on blocking/critical missing information\n- Make reasonable assumptions about company context when possible\n- Only flag missing information if it would completely prevent the workflow from being implemented\n- Accept general company references without requiring specific domain names\n- For document classifications, accept natural language descriptions\n- Consider the request complete if the core workflow logic is clear, even if some details could be configured later\n\nWhen evaluating completeness, ask:\n1. Is the basic workflow logic clear and actionable?\n2. Are the essential triggers and actions defined?\n3. Would an implementer understand the core goal?\n\nErr on the side of accepting requests as complete if the fundamental workflow is understandable.\n"}, {"role": "user", "content": "Need to stop wasting time on initial site visits. When someone sends coordinates in Outlook, automatically pull the Google Maps street view, transit stops within 800m, and satellite view into a Notion page. Just trying to rule out obvious no-gos before driving out there."}], "model": "deepseek-ai/DeepSeek-R1-Distill-Qwen-32B", "n": 1, "parallel_tool_calls": true, "stream": false, "tool_choice": "required", "tools": [{"type": "function", "function": {"name": "final_result", "description": "The final response which ends this conversation", "parameters": {"properties": {"is_complete": {"description": "Whether request has all needed information", "title": "Is Complete", "type": "boolean"}, "missing_info": {"anyOf": [{"items": {"type": "string"}, "type": "array"}, {"type": "null"}], "default": null, "description": "List of missing information pieces if incomplete", "title": "Missing Info"}, "clarifying_questions": {"anyOf": [{"items": {"type": "string"}, "type": "array"}, {"type": "null"}], "default": null, "description": "Questions to ask user if more information needed", "title": "Clarifying Questions"}, "parsed_request": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "description": "Clean version of request once complete", "title": "Parsed Request"}}, "required": ["is_complete"], "title": "RequestCompleteness", "type": "object"}}}]}
{"messages": [{"role": "system", "content": "You are a workflow analysis agent that evaluates automation requests.\nYour goal is to determine if a workflow request contains enough core information to proceed with implementation.\n\nKey Guidelines:\n- Focus only on blocking/critical missing information\n- Make reasonable assumptions about company context when possible\n- Only flag missing information if it would completely prevent the workflow from being implemented\n- Accept general company references without requiring specific domain names\n- For document classifications, accept natural language descriptions\n- Consider the request complete if the core workflow logic is clear, even if some details could be configured later\n\nWhen evaluating completeness, ask:\n1. Is the basic workflow logic clear and actionable?\n2. Are the essential triggers and actions defined?\n3. Would an implementer understand the core goal?\n\nErr on the side of accepting requests as complete if the fundamental workflow is understandable.\n"}, {"role": "user", "content": "Need to stop wasting time on initial site visits. When someone sends coordinates in Outlook, automatically pull the Google Maps street view, transit stops within 800m, and satellite view into a Notion page. Just trying to rule out obvious no-gos before driving out there."}], "model": "deepseek-ai/DeepSeek-R1-Distill-Qwen-32B", "n": 1, "parallel_tool_calls": true, "stream": false, "tool_choice": "required", "tools": [{"type": "function", "function": {"name": "final_result", "description": "The final response which ends this conversation", "parameters": {"properties": {"is_complete": {"description": "Whether request has all needed information", "title": "Is Complete", "type": "boolean"}, "missing_info": {"anyOf": [{"items": {"type": "string"}, "type": "array"}, {"type": "null"}], "default": null, "description": "List of missing information pieces if incomplete", "title": "Missing Info"}, "clarifying_questions": {"anyOf": [{"items": {"type": "string"}, "type": "array"}, {"type": "null"}], "default": null, "description": "Questions to ask user if more information needed", "title": "Clarifying Questions"}, "parsed_request": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "description": "Clean version of request once complete", "title": "Parsed Request"}}, "required": ["is_complete"], "title": "RequestCompleteness", "type": "object"}}}]}
{"messages": [{"role": "system", "content": "You are a workflow analysis agent that evaluates automation requests.\nYour goal is to determine if a workflow request contains enough core information to proceed with implementation.\n\nKey Guidelines:\n- Focus only on blocking/critical missing information\n- Make reasonable assumptions about company context when possible\n- Only flag missing information if it would completely prevent the workflow from being implemented\n- Accept general company references without requiring specific domain names\n- For document classifications, accept natural language descriptions\n- Consider the request complete if the core workflow logic is clear, even if some details could be configured later\n\nWhen evaluating completeness, ask:\n1. Is the basic workflow logic clear and actionable?\n2. Are the essential triggers and actions defined?\n3. Would an implementer understand the core goal?\n\nErr on the side of accepting requests as complete if the fundamental workflow is understandable.\n"}, {"role": "user", "content": "Need to stop wasting time on initial site visits. When someone sends coordinates in Outlook, automatically pull the Google Maps street view, transit stops within 800m, and satellite view into a Notion page. Just trying to rule out obvious no-gos before driving out there."}], "model": "deepseek-ai/DeepSeek-R1-Distill-Qwen-32B", "n": 1, "parallel_tool_calls": true, "stream": false, "tool_choice": "required", "tools": [{"type": "function", "function": {"name": "final_result", "description": "The final response which ends this conversation", "parameters": {"properties": {"is_complete": {"description": "Whether request has all needed information", "title": "Is Complete", "type": "boolean"}, "missing_info": {"anyOf": [{"items": {"type": "string"}, "type": "array"}, {"type": "null"}], "default": null, "description": "List of missing information pieces if incomplete", "title": "Missing Info"}, "clarifying_questions": {"anyOf": [{"items": {"type": "string"}, "type": "array"}, {"type": "null"}], "default": null, "description": "Questions to ask user if more information needed", "title": "Clarifying Questions"}, "parsed_request": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "description": "Clean version of request once complete", "title": "Parsed Request"}}, "required": ["is_complete"], "title": "RequestCompleteness", "type": "object"}}}]}
{"messages": [{"role": "system", "content": "You are a workflow analysis agent that evaluates automation requests.\nYour goal is to determine if a workflow request contains enough core information to proceed with implementation.\n\nKey Guidelines:\n- Focus only on blocking/critical missing information\n- Make reasonable assumptions about company context when possible\n- Only flag missing information if it would completely prevent the workflow from being implemented\n- Accept general company references without requiring specific domain names\n- For document classifications, accept natural language descriptions\n- Consider the request complete if the core workflow logic is clear, even if some details could be configured later\n\nWhen evaluating completeness, ask:\n1. Is the basic workflow logic clear and actionable?\n2. Are the essential triggers and actions defined?\n3. Would an implementer understand the core goal?\n\nErr on the side of accepting requests as complete if the fundamental workflow is understandable.\n"}, {"role": "user", "content": "I get so many different notifications about my restaurant - emails about DoorDash orders, reservation confirmations from OpenTable, Google review alerts. Can this watch my Gmail for any emails about reviews or complaints and send them straight to a Slack channel? Just trying to keep all the customer feedback in one place where my managers can see it too."}], "model": "deepseek-ai/DeepSeek-R1-Distill-Qwen-32B", "n": 1, "parallel_tool_calls": true, "stream": false, "tool_choice": "required", "tools": [{"type": "function", "function": {"name": "final_result", "description": "The final response which ends this conversation", "parameters": {"properties": {"is_complete": {"description": "Whether request has all needed information", "title": "Is Complete", "type": "boolean"}, "missing_info": {"anyOf": [{"items": {"type": "string"}, "type": "array"}, {"type": "null"}], "default": null, "description": "List of missing information pieces if incomplete", "title": "Missing Info"}, "clarifying_questions": {"anyOf": [{"items": {"type": "string"}, "type": "array"}, {"type": "null"}], "default": null, "description": "Questions to ask user if more information needed", "title": "Clarifying Questions"}, "parsed_request": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "description": "Clean version of request once complete", "title": "Parsed Request"}}, "required": ["is_complete"], "title": "RequestCompleteness", "type": "object"}}}]}
{"messages": [{"role": "system", "content": "You are a workflow analysis agent that evaluates automation requests.\nYour goal is to determine if a workflow request contains enough core information to proceed with implementation.\n\nKey Guidelines:\n- Focus only on blocking/critical missing information\n- Make reasonable assumptions about company context when possible\n- Only flag missing information if it would completely prevent the workflow from being implemented\n- Accept general company references without requiring specific domain names\n- For document classifications, accept natural language descriptions\n- Consider the request complete if the core workflow logic is clear, even if some details could be configured later\n\nWhen evaluating completeness, ask:\n1. Is the basic workflow logic clear and actionable?\n2. Are the essential triggers and actions defined?\n3. Would an implementer understand the core goal?\n\nErr on the side of accepting requests as complete if the fundamental workflow is understandable.\n"}, {"role": "user", "content": "I get so many different notifications about my restaurant - emails about DoorDash orders, reservation confirmations from OpenTable, Google review alerts. Can this watch my Gmail for any emails about reviews or complaints and send them straight to a Slack channel? Just trying to keep all the customer feedback in one place where my managers can see it too."}], "model": "deepseek-ai/DeepSeek-R1-Distill-Qwen-32B", "n": 1, "parallel_tool_calls": true, "stream": false, "tool_choice": "required", "tools": [{"type": "function", "function": {"name": "final_result", "description": "The final response which ends this conversation", "parameters": {"properties": {"is_complete": {"description": "Whether request has all needed information", "title": "Is Complete", "type": "boolean"}, "missing_info": {"anyOf": [{"items": {"type": "string"}, "type": "array"}, {"type": "null"}], "default": null, "description": "List of missing information pieces if incomplete", "title": "Missing Info"}, "clarifying_questions": {"anyOf": [{"items": {"type": "string"}, "type": "array"}, {"type": "null"}], "default": null, "description": "Questions to ask user if more information needed", "title": "Clarifying Questions"}, "parsed_request": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "description": "Clean version of request once complete", "title": "Parsed Request"}}, "required": ["is_complete"], "title": "RequestCompleteness", "type": "object"}}}]}
